"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/xstate";
exports.ids = ["vendor-chunks/xstate"];
exports.modules = {

/***/ "(ssr)/./node_modules/xstate/es/Actor.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/Actor.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDeferredActor: () => (/* binding */ createDeferredActor),\n/* harmony export */   createInvocableActor: () => (/* binding */ createInvocableActor),\n/* harmony export */   createNullActor: () => (/* binding */ createNullActor),\n/* harmony export */   isActor: () => (/* binding */ isActor),\n/* harmony export */   isSpawnedActor: () => (/* binding */ isSpawnedActor),\n/* harmony export */   toActorRef: () => (/* binding */ toActorRef)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n/* harmony import */ var _serviceScope_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serviceScope.js */ \"(ssr)/./node_modules/xstate/es/serviceScope.js\");\n\n\n\nfunction createNullActor(id) {\n    var _a;\n    return _a = {\n        id: id,\n        send: function() {\n            return void 0;\n        },\n        subscribe: function() {\n            return {\n                unsubscribe: function() {\n                    return void 0;\n                }\n            };\n        },\n        getSnapshot: function() {\n            return undefined;\n        },\n        toJSON: function() {\n            return {\n                id: id\n            };\n        }\n    }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function() {\n        return this;\n    }, _a;\n}\n/**\r\n * Creates a deferred actor that is able to be invoked given the provided\r\n * invocation information in its `.meta` value.\r\n *\r\n * @param invokeDefinition The meta information needed to invoke the actor.\r\n */ function createInvocableActor(invokeDefinition, machine, context, _event) {\n    var _a;\n    var invokeSrc = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toInvokeSource)(invokeDefinition.src);\n    var serviceCreator = (_a = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a === void 0 ? void 0 : _a[invokeSrc.type];\n    var resolvedData = invokeDefinition.data ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(invokeDefinition.data, context, _event) : undefined;\n    var tempActor = serviceCreator ? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor(invokeDefinition.id); // @ts-ignore\n    tempActor.meta = invokeDefinition;\n    return tempActor;\n}\nfunction createDeferredActor(entity, id, data) {\n    var tempActor = createNullActor(id); // @ts-ignore\n    tempActor.deferred = true;\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity)) {\n        // \"mute\" the existing service scope so potential spawned actors within the `.initialState` stay deferred here\n        var initialState_1 = tempActor.state = (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_1__.provide)(undefined, function() {\n            return (data ? entity.withContext(data) : entity).initialState;\n        });\n        tempActor.getSnapshot = function() {\n            return initialState_1;\n        };\n    }\n    return tempActor;\n}\nfunction isActor(item) {\n    try {\n        return typeof item.send === \"function\";\n    } catch (e) {\n        return false;\n    }\n}\nfunction isSpawnedActor(item) {\n    return isActor(item) && \"id\" in item;\n} // TODO: refactor the return type, this could be written in a better way but it's best to avoid unneccessary breaking changes now\nfunction toActorRef(actorRefLike) {\n    var _a;\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_a = {\n        subscribe: function() {\n            return {\n                unsubscribe: function() {\n                    return void 0;\n                }\n            };\n        },\n        id: \"anonymous\",\n        getSnapshot: function() {\n            return undefined;\n        }\n    }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function() {\n        return this;\n    }, _a), actorRefLike);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL0FjdG9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFnRDtBQUNxQztBQUN6QztBQUU1QyxTQUFTTSxnQkFBZ0JDLEVBQUU7SUFDekIsSUFBSUM7SUFFSixPQUFPQSxLQUFLO1FBQ1ZELElBQUlBO1FBQ0pFLE1BQU07WUFDSixPQUFPLEtBQUs7UUFDZDtRQUNBQyxXQUFXO1lBQ1QsT0FBTztnQkFDTEMsYUFBYTtvQkFDWCxPQUFPLEtBQUs7Z0JBQ2Q7WUFDRjtRQUNGO1FBQ0FDLGFBQWE7WUFDWCxPQUFPQztRQUNUO1FBQ0FDLFFBQVE7WUFDTixPQUFPO2dCQUNMUCxJQUFJQTtZQUNOO1FBQ0Y7SUFDRixHQUFHQyxFQUFFLENBQUNQLHVEQUFnQkEsQ0FBQyxHQUFHO1FBQ3hCLE9BQU8sSUFBSTtJQUNiLEdBQUdPO0FBQ0w7QUFDQTs7Ozs7Q0FLQyxHQUVELFNBQVNPLHFCQUFxQkMsZ0JBQWdCLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxNQUFNO0lBQ3RFLElBQUlYO0lBRUosSUFBSVksWUFBWWxCLHlEQUFjQSxDQUFDYyxpQkFBaUJLLEdBQUc7SUFDbkQsSUFBSUMsaUJBQWlCLENBQUNkLEtBQUtTLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRTSxPQUFPLENBQUNDLFFBQVEsTUFBTSxRQUFRaEIsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxFQUFFLENBQUNZLFVBQVVLLElBQUksQ0FBQztJQUM5SixJQUFJQyxlQUFlVixpQkFBaUJXLElBQUksR0FBR3hCLHFEQUFVQSxDQUFDYSxpQkFBaUJXLElBQUksRUFBRVQsU0FBU0MsVUFBVU47SUFDaEcsSUFBSWUsWUFBWU4saUJBQWlCTyxvQkFBb0JQLGdCQUFnQk4saUJBQWlCVCxFQUFFLEVBQUVtQixnQkFBZ0JwQixnQkFBZ0JVLGlCQUFpQlQsRUFBRSxHQUFHLGFBQWE7SUFFN0pxQixVQUFVRSxJQUFJLEdBQUdkO0lBQ2pCLE9BQU9ZO0FBQ1Q7QUFDQSxTQUFTQyxvQkFBb0JFLE1BQU0sRUFBRXhCLEVBQUUsRUFBRW9CLElBQUk7SUFDM0MsSUFBSUMsWUFBWXRCLGdCQUFnQkMsS0FBSyxhQUFhO0lBRWxEcUIsVUFBVUksUUFBUSxHQUFHO0lBRXJCLElBQUk1QixvREFBU0EsQ0FBQzJCLFNBQVM7UUFDckIsOEdBQThHO1FBQzlHLElBQUlFLGlCQUFpQkwsVUFBVU0sS0FBSyxHQUFHN0IseURBQU9BLENBQUNRLFdBQVc7WUFDeEQsT0FBTyxDQUFDYyxPQUFPSSxPQUFPSSxXQUFXLENBQUNSLFFBQVFJLE1BQUssRUFBR0ssWUFBWTtRQUNoRTtRQUVBUixVQUFVaEIsV0FBVyxHQUFHO1lBQ3RCLE9BQU9xQjtRQUNUO0lBQ0Y7SUFFQSxPQUFPTDtBQUNUO0FBQ0EsU0FBU1MsUUFBUUMsSUFBSTtJQUNuQixJQUFJO1FBQ0YsT0FBTyxPQUFPQSxLQUFLN0IsSUFBSSxLQUFLO0lBQzlCLEVBQUUsT0FBTzhCLEdBQUc7UUFDVixPQUFPO0lBQ1Q7QUFDRjtBQUNBLFNBQVNDLGVBQWVGLElBQUk7SUFDMUIsT0FBT0QsUUFBUUMsU0FBUyxRQUFRQTtBQUNsQyxFQUFFLGlJQUFpSTtBQUVuSSxTQUFTRyxXQUFXQyxZQUFZO0lBQzlCLElBQUlsQztJQUVKLE9BQU9SLDJEQUFRQSxDQUFFUSxDQUFBQSxLQUFLO1FBQ3BCRSxXQUFXO1lBQ1QsT0FBTztnQkFDTEMsYUFBYTtvQkFDWCxPQUFPLEtBQUs7Z0JBQ2Q7WUFDRjtRQUNGO1FBQ0FKLElBQUk7UUFDSkssYUFBYTtZQUNYLE9BQU9DO1FBQ1Q7SUFDRixHQUFHTCxFQUFFLENBQUNQLHVEQUFnQkEsQ0FBQyxHQUFHO1FBQ3hCLE9BQU8sSUFBSTtJQUNiLEdBQUdPLEVBQUMsR0FBSWtDO0FBQ1Y7QUFFMkciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydG5leHQvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL0FjdG9yLmpzP2JiM2IiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tICcuL192aXJ0dWFsL190c2xpYi5qcyc7XG5pbXBvcnQgeyBzeW1ib2xPYnNlcnZhYmxlLCB0b0ludm9rZVNvdXJjZSwgbWFwQ29udGV4dCwgaXNNYWNoaW5lIH0gZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQgeyBwcm92aWRlIH0gZnJvbSAnLi9zZXJ2aWNlU2NvcGUuanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVOdWxsQWN0b3IoaWQpIHtcbiAgdmFyIF9hO1xuXG4gIHJldHVybiBfYSA9IHtcbiAgICBpZDogaWQsXG4gICAgc2VuZDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9LFxuICAgIHN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0sXG4gICAgZ2V0U25hcHNob3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSxcbiAgICB0b0pTT046IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBpZFxuICAgICAgfTtcbiAgICB9XG4gIH0sIF9hW3N5bWJvbE9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LCBfYTtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgZGVmZXJyZWQgYWN0b3IgdGhhdCBpcyBhYmxlIHRvIGJlIGludm9rZWQgZ2l2ZW4gdGhlIHByb3ZpZGVkXHJcbiAqIGludm9jYXRpb24gaW5mb3JtYXRpb24gaW4gaXRzIGAubWV0YWAgdmFsdWUuXHJcbiAqXHJcbiAqIEBwYXJhbSBpbnZva2VEZWZpbml0aW9uIFRoZSBtZXRhIGluZm9ybWF0aW9uIG5lZWRlZCB0byBpbnZva2UgdGhlIGFjdG9yLlxyXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlSW52b2NhYmxlQWN0b3IoaW52b2tlRGVmaW5pdGlvbiwgbWFjaGluZSwgY29udGV4dCwgX2V2ZW50KSB7XG4gIHZhciBfYTtcblxuICB2YXIgaW52b2tlU3JjID0gdG9JbnZva2VTb3VyY2UoaW52b2tlRGVmaW5pdGlvbi5zcmMpO1xuICB2YXIgc2VydmljZUNyZWF0b3IgPSAoX2EgPSBtYWNoaW5lID09PSBudWxsIHx8IG1hY2hpbmUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1hY2hpbmUub3B0aW9ucy5zZXJ2aWNlcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW2ludm9rZVNyYy50eXBlXTtcbiAgdmFyIHJlc29sdmVkRGF0YSA9IGludm9rZURlZmluaXRpb24uZGF0YSA/IG1hcENvbnRleHQoaW52b2tlRGVmaW5pdGlvbi5kYXRhLCBjb250ZXh0LCBfZXZlbnQpIDogdW5kZWZpbmVkO1xuICB2YXIgdGVtcEFjdG9yID0gc2VydmljZUNyZWF0b3IgPyBjcmVhdGVEZWZlcnJlZEFjdG9yKHNlcnZpY2VDcmVhdG9yLCBpbnZva2VEZWZpbml0aW9uLmlkLCByZXNvbHZlZERhdGEpIDogY3JlYXRlTnVsbEFjdG9yKGludm9rZURlZmluaXRpb24uaWQpOyAvLyBAdHMtaWdub3JlXG5cbiAgdGVtcEFjdG9yLm1ldGEgPSBpbnZva2VEZWZpbml0aW9uO1xuICByZXR1cm4gdGVtcEFjdG9yO1xufVxuZnVuY3Rpb24gY3JlYXRlRGVmZXJyZWRBY3RvcihlbnRpdHksIGlkLCBkYXRhKSB7XG4gIHZhciB0ZW1wQWN0b3IgPSBjcmVhdGVOdWxsQWN0b3IoaWQpOyAvLyBAdHMtaWdub3JlXG5cbiAgdGVtcEFjdG9yLmRlZmVycmVkID0gdHJ1ZTtcblxuICBpZiAoaXNNYWNoaW5lKGVudGl0eSkpIHtcbiAgICAvLyBcIm11dGVcIiB0aGUgZXhpc3Rpbmcgc2VydmljZSBzY29wZSBzbyBwb3RlbnRpYWwgc3Bhd25lZCBhY3RvcnMgd2l0aGluIHRoZSBgLmluaXRpYWxTdGF0ZWAgc3RheSBkZWZlcnJlZCBoZXJlXG4gICAgdmFyIGluaXRpYWxTdGF0ZV8xID0gdGVtcEFjdG9yLnN0YXRlID0gcHJvdmlkZSh1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAoZGF0YSA/IGVudGl0eS53aXRoQ29udGV4dChkYXRhKSA6IGVudGl0eSkuaW5pdGlhbFN0YXRlO1xuICAgIH0pO1xuXG4gICAgdGVtcEFjdG9yLmdldFNuYXBzaG90ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGluaXRpYWxTdGF0ZV8xO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gdGVtcEFjdG9yO1xufVxuZnVuY3Rpb24gaXNBY3RvcihpdGVtKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdGVtLnNlbmQgPT09ICdmdW5jdGlvbic7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzU3Bhd25lZEFjdG9yKGl0ZW0pIHtcbiAgcmV0dXJuIGlzQWN0b3IoaXRlbSkgJiYgJ2lkJyBpbiBpdGVtO1xufSAvLyBUT0RPOiByZWZhY3RvciB0aGUgcmV0dXJuIHR5cGUsIHRoaXMgY291bGQgYmUgd3JpdHRlbiBpbiBhIGJldHRlciB3YXkgYnV0IGl0J3MgYmVzdCB0byBhdm9pZCB1bm5lY2Nlc3NhcnkgYnJlYWtpbmcgY2hhbmdlcyBub3dcblxuZnVuY3Rpb24gdG9BY3RvclJlZihhY3RvclJlZkxpa2UpIHtcbiAgdmFyIF9hO1xuXG4gIHJldHVybiBfX2Fzc2lnbigoX2EgPSB7XG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSxcbiAgICBpZDogJ2Fub255bW91cycsXG4gICAgZ2V0U25hcHNob3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LCBfYVtzeW1ib2xPYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSwgX2EpLCBhY3RvclJlZkxpa2UpO1xufVxuXG5leHBvcnQgeyBjcmVhdGVEZWZlcnJlZEFjdG9yLCBjcmVhdGVJbnZvY2FibGVBY3RvciwgY3JlYXRlTnVsbEFjdG9yLCBpc0FjdG9yLCBpc1NwYXduZWRBY3RvciwgdG9BY3RvclJlZiB9O1xuIl0sIm5hbWVzIjpbIl9fYXNzaWduIiwic3ltYm9sT2JzZXJ2YWJsZSIsInRvSW52b2tlU291cmNlIiwibWFwQ29udGV4dCIsImlzTWFjaGluZSIsInByb3ZpZGUiLCJjcmVhdGVOdWxsQWN0b3IiLCJpZCIsIl9hIiwic2VuZCIsInN1YnNjcmliZSIsInVuc3Vic2NyaWJlIiwiZ2V0U25hcHNob3QiLCJ1bmRlZmluZWQiLCJ0b0pTT04iLCJjcmVhdGVJbnZvY2FibGVBY3RvciIsImludm9rZURlZmluaXRpb24iLCJtYWNoaW5lIiwiY29udGV4dCIsIl9ldmVudCIsImludm9rZVNyYyIsInNyYyIsInNlcnZpY2VDcmVhdG9yIiwib3B0aW9ucyIsInNlcnZpY2VzIiwidHlwZSIsInJlc29sdmVkRGF0YSIsImRhdGEiLCJ0ZW1wQWN0b3IiLCJjcmVhdGVEZWZlcnJlZEFjdG9yIiwibWV0YSIsImVudGl0eSIsImRlZmVycmVkIiwiaW5pdGlhbFN0YXRlXzEiLCJzdGF0ZSIsIndpdGhDb250ZXh0IiwiaW5pdGlhbFN0YXRlIiwiaXNBY3RvciIsIml0ZW0iLCJlIiwiaXNTcGF3bmVkQWN0b3IiLCJ0b0FjdG9yUmVmIiwiYWN0b3JSZWZMaWtlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/Actor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/Machine.js":
/*!*******************************************!*\
  !*** ./node_modules/xstate/es/Machine.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Machine: () => (/* binding */ Machine),\n/* harmony export */   createMachine: () => (/* binding */ createMachine)\n/* harmony export */ });\n/* harmony import */ var _StateNode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StateNode.js */ \"(ssr)/./node_modules/xstate/es/StateNode.js\");\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environment.js */ \"(ssr)/./node_modules/xstate/es/environment.js\");\n\n\nvar warned = false;\nfunction Machine(config, options, initialContext) {\n    if (initialContext === void 0) {\n        initialContext = config.context;\n    }\n    return new _StateNode_js__WEBPACK_IMPORTED_MODULE_0__.StateNode(config, options, initialContext);\n}\nfunction createMachine(config, options) {\n    if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION && !(\"predictableActionArguments\" in config) && !warned) {\n        warned = true;\n        console.warn(\"It is highly recommended to set `predictableActionArguments` to `true` when using `createMachine`. https://xstate.js.org/docs/guides/actions.html\");\n    }\n    return new _StateNode_js__WEBPACK_IMPORTED_MODULE_0__.StateNode(config, options);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL01hY2hpbmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEyQztBQUNNO0FBRWpELElBQUlFLFNBQVM7QUFDYixTQUFTQyxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRUMsY0FBYztJQUM5QyxJQUFJQSxtQkFBbUIsS0FBSyxHQUFHO1FBQzdCQSxpQkFBaUJGLE9BQU9HLE9BQU87SUFDakM7SUFFQSxPQUFPLElBQUlQLG9EQUFTQSxDQUFDSSxRQUFRQyxTQUFTQztBQUN4QztBQUNBLFNBQVNFLGNBQWNKLE1BQU0sRUFBRUMsT0FBTztJQUNwQyxJQUFJLENBQUNKLDBEQUFhQSxJQUFJLENBQUUsaUNBQWdDRyxNQUFLLEtBQU0sQ0FBQ0YsUUFBUTtRQUMxRUEsU0FBUztRQUNUTyxRQUFRQyxJQUFJLENBQUM7SUFDZjtJQUVBLE9BQU8sSUFBSVYsb0RBQVNBLENBQUNJLFFBQVFDO0FBQy9CO0FBRWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnRuZXh0Ly4vbm9kZV9tb2R1bGVzL3hzdGF0ZS9lcy9NYWNoaW5lLmpzPzdiOGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhdGVOb2RlIH0gZnJvbSAnLi9TdGF0ZU5vZGUuanMnO1xuaW1wb3J0IHsgSVNfUFJPRFVDVElPTiB9IGZyb20gJy4vZW52aXJvbm1lbnQuanMnO1xuXG52YXIgd2FybmVkID0gZmFsc2U7XG5mdW5jdGlvbiBNYWNoaW5lKGNvbmZpZywgb3B0aW9ucywgaW5pdGlhbENvbnRleHQpIHtcbiAgaWYgKGluaXRpYWxDb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBpbml0aWFsQ29udGV4dCA9IGNvbmZpZy5jb250ZXh0O1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTdGF0ZU5vZGUoY29uZmlnLCBvcHRpb25zLCBpbml0aWFsQ29udGV4dCk7XG59XG5mdW5jdGlvbiBjcmVhdGVNYWNoaW5lKGNvbmZpZywgb3B0aW9ucykge1xuICBpZiAoIUlTX1BST0RVQ1RJT04gJiYgISgncHJlZGljdGFibGVBY3Rpb25Bcmd1bWVudHMnIGluIGNvbmZpZykgJiYgIXdhcm5lZCkge1xuICAgIHdhcm5lZCA9IHRydWU7XG4gICAgY29uc29sZS53YXJuKCdJdCBpcyBoaWdobHkgcmVjb21tZW5kZWQgdG8gc2V0IGBwcmVkaWN0YWJsZUFjdGlvbkFyZ3VtZW50c2AgdG8gYHRydWVgIHdoZW4gdXNpbmcgYGNyZWF0ZU1hY2hpbmVgLiBodHRwczovL3hzdGF0ZS5qcy5vcmcvZG9jcy9ndWlkZXMvYWN0aW9ucy5odG1sJyk7XG4gIH1cblxuICByZXR1cm4gbmV3IFN0YXRlTm9kZShjb25maWcsIG9wdGlvbnMpO1xufVxuXG5leHBvcnQgeyBNYWNoaW5lLCBjcmVhdGVNYWNoaW5lIH07XG4iXSwibmFtZXMiOlsiU3RhdGVOb2RlIiwiSVNfUFJPRFVDVElPTiIsIndhcm5lZCIsIk1hY2hpbmUiLCJjb25maWciLCJvcHRpb25zIiwiaW5pdGlhbENvbnRleHQiLCJjb250ZXh0IiwiY3JlYXRlTWFjaGluZSIsImNvbnNvbGUiLCJ3YXJuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/Machine.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/State.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/State.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   State: () => (/* binding */ State),\n/* harmony export */   bindActionToState: () => (/* binding */ bindActionToState),\n/* harmony export */   isState: () => (/* binding */ isState),\n/* harmony export */   isStateConfig: () => (/* binding */ isStateConfig),\n/* harmony export */   stateValuesEqual: () => (/* binding */ stateValuesEqual)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/xstate/es/constants.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n/* harmony import */ var _stateUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stateUtils.js */ \"(ssr)/./node_modules/xstate/es/stateUtils.js\");\n/* harmony import */ var _actions_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./actions.js */ \"(ssr)/./node_modules/xstate/es/actions.js\");\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./environment.js */ \"(ssr)/./node_modules/xstate/es/environment.js\");\n\n\n\n\n\n\nfunction stateValuesEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a === undefined || b === undefined) {\n        return false;\n    }\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(a) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(b)) {\n        return a === b;\n    }\n    var aKeys = Object.keys(a);\n    var bKeys = Object.keys(b);\n    return aKeys.length === bKeys.length && aKeys.every(function(key) {\n        return stateValuesEqual(a[key], b[key]);\n    });\n}\nfunction isStateConfig(state) {\n    if (typeof state !== \"object\" || state === null) {\n        return false;\n    }\n    return \"value\" in state && \"_event\" in state;\n}\n/**\r\n * @deprecated Use `isStateConfig(object)` or `state instanceof State` instead.\r\n */ var isState = isStateConfig;\nfunction bindActionToState(action, state) {\n    var exec = action.exec;\n    var boundAction = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, action), {\n        exec: exec !== undefined ? function() {\n            return exec(state.context, state.event, {\n                action: action,\n                state: state,\n                _event: state._event\n            });\n        } : undefined\n    });\n    return boundAction;\n}\nvar State = /*#__PURE__*/ /** @class */ function() {\n    /**\r\n   * Creates a new State instance.\r\n   * @param value The state value\r\n   * @param context The extended state\r\n   * @param historyValue The tree representing historical values of the state nodes\r\n   * @param history The previous state\r\n   * @param actions An array of action objects to execute as side-effects\r\n   * @param activities A mapping of activities and whether they are started (`true`) or stopped (`false`).\r\n   * @param meta\r\n   * @param events Internal event queue. Should be empty with run-to-completion semantics.\r\n   * @param configuration\r\n   */ function State(config) {\n        var _this = this;\n        var _a;\n        this.actions = [];\n        this.activities = _constants_js__WEBPACK_IMPORTED_MODULE_2__.EMPTY_ACTIVITY_MAP;\n        this.meta = {};\n        this.events = [];\n        this.value = config.value;\n        this.context = config.context;\n        this._event = config._event;\n        this._sessionid = config._sessionid;\n        this.event = this._event.data;\n        this.historyValue = config.historyValue;\n        this.history = config.history;\n        this.actions = config.actions || [];\n        this.activities = config.activities || _constants_js__WEBPACK_IMPORTED_MODULE_2__.EMPTY_ACTIVITY_MAP;\n        this.meta = (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_3__.getMeta)(config.configuration);\n        this.events = config.events || [];\n        this.matches = this.matches.bind(this);\n        this.toStrings = this.toStrings.bind(this);\n        this.configuration = config.configuration;\n        this.transitions = config.transitions;\n        this.children = config.children;\n        this.done = !!config.done;\n        this.tags = (_a = Array.isArray(config.tags) ? new Set(config.tags) : config.tags) !== null && _a !== void 0 ? _a : new Set();\n        this.machine = config.machine;\n        Object.defineProperty(this, \"nextEvents\", {\n            get: function() {\n                return (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_3__.nextEvents)(_this.configuration);\n            }\n        });\n    }\n    /**\r\n   * Creates a new State instance for the given `stateValue` and `context`.\r\n   * @param stateValue\r\n   * @param context\r\n   */ State.from = function(stateValue, context) {\n        if (stateValue instanceof State) {\n            if (stateValue.context !== context) {\n                return new State({\n                    value: stateValue.value,\n                    context: context,\n                    _event: stateValue._event,\n                    _sessionid: null,\n                    historyValue: stateValue.historyValue,\n                    history: stateValue.history,\n                    actions: [],\n                    activities: stateValue.activities,\n                    meta: {},\n                    events: [],\n                    configuration: [],\n                    transitions: [],\n                    children: {}\n                });\n            }\n            return stateValue;\n        }\n        var _event = _actions_js__WEBPACK_IMPORTED_MODULE_4__.initEvent;\n        return new State({\n            value: stateValue,\n            context: context,\n            _event: _event,\n            _sessionid: null,\n            historyValue: undefined,\n            history: undefined,\n            actions: [],\n            activities: undefined,\n            meta: undefined,\n            events: [],\n            configuration: [],\n            transitions: [],\n            children: {}\n        });\n    };\n    /**\r\n   * Creates a new State instance for the given `config`.\r\n   * @param config The state config\r\n   */ State.create = function(config) {\n        return new State(config);\n    };\n    /**\r\n   * Creates a new `State` instance for the given `stateValue` and `context` with no actions (side-effects).\r\n   * @param stateValue\r\n   * @param context\r\n   */ State.inert = function(stateValue, context) {\n        if (stateValue instanceof State) {\n            if (!stateValue.actions.length) {\n                return stateValue;\n            }\n            var _event = _actions_js__WEBPACK_IMPORTED_MODULE_4__.initEvent;\n            return new State({\n                value: stateValue.value,\n                context: context,\n                _event: _event,\n                _sessionid: null,\n                historyValue: stateValue.historyValue,\n                history: stateValue.history,\n                activities: stateValue.activities,\n                configuration: stateValue.configuration,\n                transitions: [],\n                children: {}\n            });\n        }\n        return State.from(stateValue, context);\n    };\n    /**\r\n   * Returns an array of all the string leaf state node paths.\r\n   * @param stateValue\r\n   * @param delimiter The character(s) that separate each subpath in the string state node path.\r\n   */ State.prototype.toStrings = function(stateValue, delimiter) {\n        var _this = this;\n        if (stateValue === void 0) {\n            stateValue = this.value;\n        }\n        if (delimiter === void 0) {\n            delimiter = \".\";\n        }\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)) {\n            return [\n                stateValue\n            ];\n        }\n        var valueKeys = Object.keys(stateValue);\n        return valueKeys.concat.apply(valueKeys, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(valueKeys.map(function(key) {\n            return _this.toStrings(stateValue[key], delimiter).map(function(s) {\n                return key + delimiter + s;\n            });\n        })), false));\n    };\n    State.prototype.toJSON = function() {\n        var _a = this;\n        _a.configuration;\n        _a.transitions;\n        var tags = _a.tags;\n        _a.machine;\n        var jsonValues = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__rest)(_a, [\n            \"configuration\",\n            \"transitions\",\n            \"tags\",\n            \"machine\"\n        ]);\n        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, jsonValues), {\n            tags: Array.from(tags)\n        });\n    };\n    State.prototype.matches = function(parentStateValue) {\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.matchesState)(parentStateValue, this.value);\n    };\n    /**\r\n   * Whether the current state configuration has a state node with the specified `tag`.\r\n   * @param tag\r\n   */ State.prototype.hasTag = function(tag) {\n        return this.tags.has(tag);\n    };\n    /**\r\n   * Determines whether sending the `event` will cause a non-forbidden transition\r\n   * to be selected, even if the transitions have no actions nor\r\n   * change the state value.\r\n   *\r\n   * @param event The event to test\r\n   * @returns Whether the event will cause a transition\r\n   */ State.prototype.can = function(event) {\n        var _a;\n        if (_environment_js__WEBPACK_IMPORTED_MODULE_5__.IS_PRODUCTION) {\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!!this.machine, \"state.can(...) used outside of a machine-created State object; this will always return false.\");\n        }\n        var transitionData = (_a = this.machine) === null || _a === void 0 ? void 0 : _a.getTransitionData(this, event);\n        return !!(transitionData === null || transitionData === void 0 ? void 0 : transitionData.transitions.length) && // Check that at least one transition is not forbidden\n        transitionData.transitions.some(function(t) {\n            return t.target !== undefined || t.actions.length;\n        });\n    };\n    return State;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/State.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/StateNode.js":
/*!*********************************************!*\
  !*** ./node_modules/xstate/es/StateNode.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StateNode: () => (/* binding */ StateNode)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n/* harmony import */ var _State_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./State.js */ \"(ssr)/./node_modules/xstate/es/State.js\");\n/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./actionTypes.js */ \"(ssr)/./node_modules/xstate/es/actionTypes.js\");\n/* harmony import */ var _actions_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./actions.js */ \"(ssr)/./node_modules/xstate/es/actions.js\");\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./environment.js */ \"(ssr)/./node_modules/xstate/es/environment.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/xstate/es/constants.js\");\n/* harmony import */ var _stateUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stateUtils.js */ \"(ssr)/./node_modules/xstate/es/stateUtils.js\");\n/* harmony import */ var _Actor_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Actor.js */ \"(ssr)/./node_modules/xstate/es/Actor.js\");\n/* harmony import */ var _invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./invokeUtils.js */ \"(ssr)/./node_modules/xstate/es/invokeUtils.js\");\n\n\n\n\n\n\n\n\n\n\nvar NULL_EVENT = \"\";\nvar STATE_IDENTIFIER = \"#\";\nvar WILDCARD = \"*\";\nvar EMPTY_OBJECT = {};\nvar isStateId = function(str) {\n    return str[0] === STATE_IDENTIFIER;\n};\nvar createDefaultOptions = function() {\n    return {\n        actions: {},\n        guards: {},\n        services: {},\n        activities: {},\n        delays: {}\n    };\n};\nvar validateArrayifiedTransitions = function(stateNode, event, transitions) {\n    var hasNonLastUnguardedTarget = transitions.slice(0, -1).some(function(transition) {\n        return !(\"cond\" in transition) && !(\"in\" in transition) && ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(transition.target) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(transition.target));\n    });\n    var eventText = event === NULL_EVENT ? \"the transient event\" : \"event '\".concat(event, \"'\");\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!hasNonLastUnguardedTarget, \"One or more transitions for \".concat(eventText, \" on state '\").concat(stateNode.id, \"' are unreachable. \") + \"Make sure that the default transition is the last one defined.\");\n};\nvar StateNode = /*#__PURE__*/ /** @class */ function() {\n    function StateNode(/**\r\n   * The raw config used to create the machine.\r\n   */ config, options, /**\r\n   * The initial extended state\r\n   */ _context, _stateInfo) {\n        if (_context === void 0) {\n            _context = \"context\" in config ? config.context : undefined;\n        }\n        var _this = this;\n        var _a;\n        this.config = config;\n        this._context = _context;\n        /**\r\n     * The order this state node appears. Corresponds to the implicit SCXML document order.\r\n     */ this.order = -1;\n        this.__xstatenode = true;\n        this.__cache = {\n            events: undefined,\n            relativeValue: new Map(),\n            initialStateValue: undefined,\n            initialState: undefined,\n            on: undefined,\n            transitions: undefined,\n            candidates: {},\n            delayedTransitions: undefined\n        };\n        this.idMap = {};\n        this.tags = [];\n        this.options = Object.assign(createDefaultOptions(), options);\n        this.parent = _stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.parent;\n        this.key = this.config.key || (_stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.key) || this.config.id || \"(machine)\";\n        this.machine = this.parent ? this.parent.machine : this;\n        this.path = this.parent ? this.parent.path.concat(this.key) : [];\n        this.delimiter = this.config.delimiter || (this.parent ? this.parent.delimiter : _constants_js__WEBPACK_IMPORTED_MODULE_1__.STATE_DELIMITER);\n        this.id = this.config.id || (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n            this.machine.key\n        ], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(this.path), false).join(this.delimiter);\n        this.version = this.parent ? this.parent.version : this.config.version;\n        this.type = this.config.type || (this.config.parallel ? \"parallel\" : this.config.states && Object.keys(this.config.states).length ? \"compound\" : this.config.history ? \"history\" : \"atomic\");\n        this.schema = this.parent ? this.machine.schema : (_a = this.config.schema) !== null && _a !== void 0 ? _a : {};\n        this.description = this.config.description;\n        if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION) {\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!(\"parallel\" in this.config), 'The \"parallel\" property is deprecated and will be removed in version 4.1. '.concat(this.config.parallel ? \"Replace with `type: 'parallel'`\" : \"Use `type: '\".concat(this.type, \"'`\"), \" in the config for state node '\").concat(this.id, \"' instead.\"));\n        }\n        this.initial = this.config.initial;\n        this.states = this.config.states ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(this.config.states, function(stateConfig, key) {\n            var _a;\n            var stateNode = new StateNode(stateConfig, {}, undefined, {\n                parent: _this,\n                key: key\n            });\n            Object.assign(_this.idMap, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_a = {}, _a[stateNode.id] = stateNode, _a), stateNode.idMap));\n            return stateNode;\n        }) : EMPTY_OBJECT; // Document order\n        var order = 0;\n        function dfs(stateNode) {\n            var e_1, _a;\n            stateNode.order = order++;\n            try {\n                for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getAllChildren)(stateNode)), _c = _b.next(); !_c.done; _c = _b.next()){\n                    var child = _c.value;\n                    dfs(child);\n                }\n            } catch (e_1_1) {\n                e_1 = {\n                    error: e_1_1\n                };\n            } finally{\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                } finally{\n                    if (e_1) throw e_1.error;\n                }\n            }\n        }\n        dfs(this); // History config\n        this.history = this.config.history === true ? \"shallow\" : this.config.history || false;\n        this._transient = !!this.config.always || (!this.config.on ? false : Array.isArray(this.config.on) ? this.config.on.some(function(_a) {\n            var event = _a.event;\n            return event === NULL_EVENT;\n        }) : NULL_EVENT in this.config.on);\n        this.strict = !!this.config.strict; // TODO: deprecate (entry)\n        this.onEntry = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.entry || this.config.onEntry).map(function(action) {\n            return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObject)(action);\n        }); // TODO: deprecate (exit)\n        this.onExit = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.exit || this.config.onExit).map(function(action) {\n            return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObject)(action);\n        });\n        this.meta = this.config.meta;\n        this.doneData = this.type === \"final\" ? this.config.data : undefined;\n        this.invoke = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.invoke).map(function(invokeConfig, i) {\n            var _a, _b;\n            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(invokeConfig)) {\n                var invokeId = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id, i);\n                _this.machine.options.services = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_a = {}, _a[invokeId] = invokeConfig, _a), _this.machine.options.services);\n                return (0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)({\n                    src: invokeId,\n                    id: invokeId\n                });\n            } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(invokeConfig.src)) {\n                var invokeId = invokeConfig.id || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id, i);\n                return (0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, invokeConfig), {\n                    id: invokeId,\n                    src: invokeConfig.src\n                }));\n            } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(invokeConfig.src) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(invokeConfig.src)) {\n                var invokeId = invokeConfig.id || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id, i);\n                _this.machine.options.services = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_b = {}, _b[invokeId] = invokeConfig.src, _b), _this.machine.options.services);\n                return (0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                    id: invokeId\n                }, invokeConfig), {\n                    src: invokeId\n                }));\n            } else {\n                var invokeSource = invokeConfig.src;\n                return (0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                    id: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id, i)\n                }, invokeConfig), {\n                    src: invokeSource\n                }));\n            }\n        });\n        this.activities = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.activities).concat(this.invoke).map(function(activity) {\n            return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActivityDefinition)(activity);\n        });\n        this.transition = this.transition.bind(this);\n        this.tags = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.tags); // TODO: this is the real fix for initialization once\n    // state node getters are deprecated\n    // if (!this.parent) {\n    //   this._init();\n    // }\n    }\n    StateNode.prototype._init = function() {\n        if (this.__cache.transitions) {\n            return;\n        }\n        (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getAllStateNodes)(this).forEach(function(stateNode) {\n            return stateNode.on;\n        });\n    };\n    /**\r\n   * Clones this state machine with custom options and context.\r\n   *\r\n   * @param options Options (actions, guards, activities, services) to recursively merge with the existing options.\r\n   * @param context Custom context (will override predefined context)\r\n   */ StateNode.prototype.withConfig = function(options, context) {\n        var _a = this.options, actions = _a.actions, activities = _a.activities, guards = _a.guards, services = _a.services, delays = _a.delays;\n        return new StateNode(this.config, {\n            actions: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, actions), options.actions),\n            activities: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, activities), options.activities),\n            guards: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, guards), options.guards),\n            services: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, services), options.services),\n            delays: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, delays), options.delays)\n        }, context !== null && context !== void 0 ? context : this.context);\n    };\n    /**\r\n   * Clones this state machine with custom context.\r\n   *\r\n   * @param context Custom context (will override predefined context, not recursive)\r\n   */ StateNode.prototype.withContext = function(context) {\n        return new StateNode(this.config, this.options, context);\n    };\n    Object.defineProperty(StateNode.prototype, \"context\", {\n        get: function() {\n            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(this._context) ? this._context() : this._context;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateNode.prototype, \"definition\", {\n        /**\r\n     * The well-structured state node definition.\r\n     */ get: function() {\n            return {\n                id: this.id,\n                key: this.key,\n                version: this.version,\n                context: this.context,\n                type: this.type,\n                initial: this.initial,\n                history: this.history,\n                states: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(this.states, function(state) {\n                    return state.definition;\n                }),\n                on: this.on,\n                transitions: this.transitions,\n                entry: this.onEntry,\n                exit: this.onExit,\n                activities: this.activities || [],\n                meta: this.meta,\n                order: this.order || -1,\n                data: this.doneData,\n                invoke: this.invoke,\n                description: this.description,\n                tags: this.tags\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    StateNode.prototype.toJSON = function() {\n        return this.definition;\n    };\n    Object.defineProperty(StateNode.prototype, \"on\", {\n        /**\r\n     * The mapping of events to transitions.\r\n     */ get: function() {\n            if (this.__cache.on) {\n                return this.__cache.on;\n            }\n            var transitions = this.transitions;\n            return this.__cache.on = transitions.reduce(function(map, transition) {\n                map[transition.eventType] = map[transition.eventType] || [];\n                map[transition.eventType].push(transition);\n                return map;\n            }, {});\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateNode.prototype, \"after\", {\n        get: function() {\n            return this.__cache.delayedTransitions || (this.__cache.delayedTransitions = this.getDelayedTransitions(), this.__cache.delayedTransitions);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateNode.prototype, \"transitions\", {\n        /**\r\n     * All the transitions that can be taken from this state node.\r\n     */ get: function() {\n            return this.__cache.transitions || (this.__cache.transitions = this.formatTransitions(), this.__cache.transitions);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    StateNode.prototype.getCandidates = function(eventName) {\n        if (this.__cache.candidates[eventName]) {\n            return this.__cache.candidates[eventName];\n        }\n        var transient = eventName === NULL_EVENT;\n        var candidates = this.transitions.filter(function(transition) {\n            var sameEventType = transition.eventType === eventName; // null events should only match against eventless transitions\n            return transient ? sameEventType : sameEventType || transition.eventType === WILDCARD;\n        });\n        this.__cache.candidates[eventName] = candidates;\n        return candidates;\n    };\n    /**\r\n   * All delayed transitions from the config.\r\n   */ StateNode.prototype.getDelayedTransitions = function() {\n        var _this = this;\n        var afterConfig = this.config.after;\n        if (!afterConfig) {\n            return [];\n        }\n        var mutateEntryExit = function(delay, i) {\n            var delayRef = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(delay) ? \"\".concat(_this.id, \":delay[\").concat(i, \"]\") : delay;\n            var eventType = (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.after)(delayRef, _this.id);\n            _this.onEntry.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.send)(eventType, {\n                delay: delay\n            }));\n            _this.onExit.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.cancel)(eventType));\n            return eventType;\n        };\n        var delayedTransitions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(afterConfig) ? afterConfig.map(function(transition, i) {\n            var eventType = mutateEntryExit(transition.delay, i);\n            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, transition), {\n                event: eventType\n            });\n        }) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(afterConfig).map(function(delay, i) {\n            var configTransition = afterConfig[delay];\n            var resolvedTransition = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(configTransition) ? {\n                target: configTransition\n            } : configTransition;\n            var resolvedDelay = !isNaN(+delay) ? +delay : delay;\n            var eventType = mutateEntryExit(resolvedDelay, i);\n            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(resolvedTransition).map(function(transition) {\n                return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, transition), {\n                    event: eventType,\n                    delay: resolvedDelay\n                });\n            });\n        }));\n        return delayedTransitions.map(function(delayedTransition) {\n            var delay = delayedTransition.delay;\n            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, _this.formatTransition(delayedTransition)), {\n                delay: delay\n            });\n        });\n    };\n    /**\r\n   * Returns the state nodes represented by the current state value.\r\n   *\r\n   * @param state The state value or State instance\r\n   */ StateNode.prototype.getStateNodes = function(state) {\n        var _a;\n        var _this = this;\n        if (!state) {\n            return [];\n        }\n        var stateValue = state instanceof _State_js__WEBPACK_IMPORTED_MODULE_7__.State ? state.value : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStateValue)(state, this.delimiter);\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)) {\n            var initialStateValue = this.getStateNode(stateValue).initial;\n            return initialStateValue !== undefined ? this.getStateNodes((_a = {}, _a[stateValue] = initialStateValue, _a)) : [\n                this,\n                this.states[stateValue]\n            ];\n        }\n        var subStateKeys = Object.keys(stateValue);\n        var subStateNodes = [\n            this\n        ];\n        subStateNodes.push.apply(subStateNodes, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(subStateKeys.map(function(subStateKey) {\n            return _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);\n        }))), false));\n        return subStateNodes;\n    };\n    /**\r\n   * Returns `true` if this state node explicitly handles the given event.\r\n   *\r\n   * @param event The event in question\r\n   */ StateNode.prototype.handles = function(event) {\n        var eventType = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getEventType)(event);\n        return this.events.includes(eventType);\n    };\n    /**\r\n   * Resolves the given `state` to a new `State` instance relative to this machine.\r\n   *\r\n   * This ensures that `.events` and `.nextEvents` represent the correct values.\r\n   *\r\n   * @param state The state to resolve\r\n   */ StateNode.prototype.resolveState = function(state) {\n        var stateFromConfig = state instanceof _State_js__WEBPACK_IMPORTED_MODULE_7__.State ? state : _State_js__WEBPACK_IMPORTED_MODULE_7__.State.create(state);\n        var configuration = Array.from((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)([], this.getStateNodes(stateFromConfig.value)));\n        return new _State_js__WEBPACK_IMPORTED_MODULE_7__.State((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, stateFromConfig), {\n            value: this.resolve(stateFromConfig.value),\n            configuration: configuration,\n            done: (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isInFinalState)(configuration, this),\n            tags: (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getTagsFromConfiguration)(configuration),\n            machine: this.machine\n        }));\n    };\n    StateNode.prototype.transitionLeafNode = function(stateValue, state, _event) {\n        var stateNode = this.getStateNode(stateValue);\n        var next = stateNode.next(state, _event);\n        if (!next || !next.transitions.length) {\n            return this.next(state, _event);\n        }\n        return next;\n    };\n    StateNode.prototype.transitionCompoundNode = function(stateValue, state, _event) {\n        var subStateKeys = Object.keys(stateValue);\n        var stateNode = this.getStateNode(subStateKeys[0]);\n        var next = stateNode._transition(stateValue[subStateKeys[0]], state, _event);\n        if (!next || !next.transitions.length) {\n            return this.next(state, _event);\n        }\n        return next;\n    };\n    StateNode.prototype.transitionParallelNode = function(stateValue, state, _event) {\n        var e_2, _a;\n        var transitionMap = {};\n        try {\n            for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(Object.keys(stateValue)), _c = _b.next(); !_c.done; _c = _b.next()){\n                var subStateKey = _c.value;\n                var subStateValue = stateValue[subStateKey];\n                if (!subStateValue) {\n                    continue;\n                }\n                var subStateNode = this.getStateNode(subStateKey);\n                var next = subStateNode._transition(subStateValue, state, _event);\n                if (next) {\n                    transitionMap[subStateKey] = next;\n                }\n            }\n        } catch (e_2_1) {\n            e_2 = {\n                error: e_2_1\n            };\n        } finally{\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally{\n                if (e_2) throw e_2.error;\n            }\n        }\n        var stateTransitions = Object.keys(transitionMap).map(function(key) {\n            return transitionMap[key];\n        });\n        var enabledTransitions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(stateTransitions.map(function(st) {\n            return st.transitions;\n        }));\n        var willTransition = stateTransitions.some(function(st) {\n            return st.transitions.length > 0;\n        });\n        if (!willTransition) {\n            return this.next(state, _event);\n        }\n        var configuration = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(transitionMap).map(function(key) {\n            return transitionMap[key].configuration;\n        }));\n        return {\n            transitions: enabledTransitions,\n            exitSet: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(stateTransitions.map(function(t) {\n                return t.exitSet;\n            })),\n            configuration: configuration,\n            source: state,\n            actions: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(transitionMap).map(function(key) {\n                return transitionMap[key].actions;\n            }))\n        };\n    };\n    StateNode.prototype._transition = function(stateValue, state, _event) {\n        // leaf node\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)) {\n            return this.transitionLeafNode(stateValue, state, _event);\n        } // hierarchical node\n        if (Object.keys(stateValue).length === 1) {\n            return this.transitionCompoundNode(stateValue, state, _event);\n        } // orthogonal node\n        return this.transitionParallelNode(stateValue, state, _event);\n    };\n    StateNode.prototype.getTransitionData = function(state, event) {\n        return this._transition(state.value, state, (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event));\n    };\n    StateNode.prototype.next = function(state, _event) {\n        var e_3, _a;\n        var _this = this;\n        var eventName = _event.name;\n        var actions = [];\n        var nextStateNodes = [];\n        var selectedTransition;\n        try {\n            for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(this.getCandidates(eventName)), _c = _b.next(); !_c.done; _c = _b.next()){\n                var candidate = _c.value;\n                var cond = candidate.cond, stateIn = candidate.in;\n                var resolvedContext = state.context;\n                var isInState = stateIn ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateIn) && isStateId(stateIn) ? state.matches((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStateValue)(this.getStateNodeById(stateIn).path, this.delimiter)) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.matchesState)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStateValue)(stateIn, this.delimiter), (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.path)(this.path.slice(0, -2))(state.value)) : true;\n                var guardPassed = false;\n                try {\n                    guardPassed = !cond || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.evaluateGuard)(this.machine, cond, resolvedContext, _event, state);\n                } catch (err) {\n                    throw new Error(\"Unable to evaluate guard '\".concat(cond.name || cond.type, \"' in transition for event '\").concat(eventName, \"' in state node '\").concat(this.id, \"':\\n\").concat(err.message));\n                }\n                if (guardPassed && isInState) {\n                    if (candidate.target !== undefined) {\n                        nextStateNodes = candidate.target;\n                    }\n                    actions.push.apply(actions, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(candidate.actions), false));\n                    selectedTransition = candidate;\n                    break;\n                }\n            }\n        } catch (e_3_1) {\n            e_3 = {\n                error: e_3_1\n            };\n        } finally{\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally{\n                if (e_3) throw e_3.error;\n            }\n        }\n        if (!selectedTransition) {\n            return undefined;\n        }\n        if (!nextStateNodes.length) {\n            return {\n                transitions: [\n                    selectedTransition\n                ],\n                exitSet: [],\n                configuration: state.value ? [\n                    this\n                ] : [],\n                source: state,\n                actions: actions\n            };\n        }\n        var allNextStateNodes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(nextStateNodes.map(function(stateNode) {\n            return _this.getRelativeStateNodes(stateNode, state.historyValue);\n        }));\n        var isInternal = !!selectedTransition.internal;\n        return {\n            transitions: [\n                selectedTransition\n            ],\n            exitSet: isInternal ? [] : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(nextStateNodes.map(function(targetNode) {\n                return _this.getPotentiallyReenteringNodes(targetNode);\n            })),\n            configuration: allNextStateNodes,\n            source: state,\n            actions: actions\n        };\n    }; // even though the name of this function mentions reentry nodes\n    // we are pushing its result into `exitSet`\n    // that's because what we exit might be reentered (it's an invariant of reentrancy)\n    StateNode.prototype.getPotentiallyReenteringNodes = function(targetNode) {\n        if (this.order < targetNode.order) {\n            return [\n                this\n            ];\n        }\n        var nodes = [];\n        var marker = this;\n        var possibleAncestor = targetNode;\n        while(marker && marker !== possibleAncestor){\n            nodes.push(marker);\n            marker = marker.parent;\n        }\n        if (marker !== possibleAncestor) {\n            // we never got to `possibleAncestor`, therefore the initial `marker` \"escapes\" it\n            // it's in a different part of the tree so no states will be reentered for such an external transition\n            return [];\n        }\n        nodes.push(possibleAncestor);\n        return nodes;\n    };\n    StateNode.prototype.getActions = function(resolvedConfig, isDone, transition, currentContext, _event, prevState, predictableExec) {\n        var e_4, _a, e_5, _b;\n        var _this = this;\n        var prevConfig = prevState ? (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)([], this.getStateNodes(prevState.value)) : [];\n        var entrySet = new Set();\n        try {\n            for(var _c = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(Array.from(resolvedConfig).sort(function(a, b) {\n                return a.order - b.order;\n            })), _d = _c.next(); !_d.done; _d = _c.next()){\n                var sn = _d.value;\n                if (!(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(prevConfig, sn) || (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(transition.exitSet, sn) || sn.parent && entrySet.has(sn.parent)) {\n                    entrySet.add(sn);\n                }\n            }\n        } catch (e_4_1) {\n            e_4 = {\n                error: e_4_1\n            };\n        } finally{\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            } finally{\n                if (e_4) throw e_4.error;\n            }\n        }\n        try {\n            for(var prevConfig_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(prevConfig), prevConfig_1_1 = prevConfig_1.next(); !prevConfig_1_1.done; prevConfig_1_1 = prevConfig_1.next()){\n                var sn = prevConfig_1_1.value;\n                if (!(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(resolvedConfig, sn) || (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(transition.exitSet, sn.parent)) {\n                    transition.exitSet.push(sn);\n                }\n            }\n        } catch (e_5_1) {\n            e_5 = {\n                error: e_5_1\n            };\n        } finally{\n            try {\n                if (prevConfig_1_1 && !prevConfig_1_1.done && (_b = prevConfig_1.return)) _b.call(prevConfig_1);\n            } finally{\n                if (e_5) throw e_5.error;\n            }\n        }\n        transition.exitSet.sort(function(a, b) {\n            return b.order - a.order;\n        });\n        var entryStates = Array.from(entrySet).sort(function(a, b) {\n            return a.order - b.order;\n        });\n        var exitStates = new Set(transition.exitSet);\n        var doneEvents = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(entryStates.map(function(sn) {\n            var events = [];\n            if (sn.type !== \"final\") {\n                return events;\n            }\n            var parent = sn.parent;\n            if (!parent.parent) {\n                return events;\n            }\n            events.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(sn.id, sn.doneData), (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(parent.id, sn.doneData ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(sn.doneData, currentContext, _event) : undefined));\n            var grandparent = parent.parent;\n            if (grandparent.type === \"parallel\") {\n                if ((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getChildren)(grandparent).every(function(parentNode) {\n                    return (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isInFinalState)(transition.configuration, parentNode);\n                })) {\n                    events.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(grandparent.id));\n                }\n            }\n            return events;\n        }));\n        var entryActions = entryStates.map(function(stateNode) {\n            var entryActions = stateNode.onEntry;\n            var invokeActions = stateNode.activities.map(function(activity) {\n                return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.start)(activity);\n            });\n            return {\n                type: \"entry\",\n                actions: (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)(predictableExec ? (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(entryActions), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(invokeActions), false) : (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(invokeActions), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(entryActions), false), _this.machine.options.actions)\n            };\n        }).concat({\n            type: \"state_done\",\n            actions: doneEvents.map(function(event) {\n                return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.raise)(event);\n            })\n        });\n        var exitActions = Array.from(exitStates).map(function(stateNode) {\n            return {\n                type: \"exit\",\n                actions: (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(stateNode.onExit), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(stateNode.activities.map(function(activity) {\n                    return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.stop)(activity);\n                })), false), _this.machine.options.actions)\n            };\n        });\n        var actions = exitActions.concat({\n            type: \"transition\",\n            actions: (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)(transition.actions, this.machine.options.actions)\n        }).concat(entryActions);\n        if (isDone) {\n            var stopActions = (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolvedConfig), false).sort(function(a, b) {\n                return b.order - a.order;\n            }).map(function(stateNode) {\n                return stateNode.onExit;\n            })), this.machine.options.actions).filter(function(action) {\n                return !(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isRaisableAction)(action);\n            });\n            return actions.concat({\n                type: \"stop\",\n                actions: stopActions\n            });\n        }\n        return actions;\n    };\n    /**\r\n   * Determines the next state given the current `state` and sent `event`.\r\n   *\r\n   * @param state The current State instance or state value\r\n   * @param event The event that was sent at the current state\r\n   * @param context The current context (extended state) of the current state\r\n   */ StateNode.prototype.transition = function(state, event, context, exec) {\n        if (state === void 0) {\n            state = this.initialState;\n        }\n        var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event);\n        var currentState;\n        if (state instanceof _State_js__WEBPACK_IMPORTED_MODULE_7__.State) {\n            currentState = context === undefined ? state : this.resolveState(_State_js__WEBPACK_IMPORTED_MODULE_7__.State.from(state, context));\n        } else {\n            var resolvedStateValue = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(state) ? this.resolve((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.pathToStateValue)(this.getResolvedPath(state))) : this.resolve(state);\n            var resolvedContext = context !== null && context !== void 0 ? context : this.machine.context;\n            currentState = this.resolveState(_State_js__WEBPACK_IMPORTED_MODULE_7__.State.from(resolvedStateValue, resolvedContext));\n        }\n        if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION && _event.name === WILDCARD) {\n            throw new Error(\"An event cannot have the wildcard type ('\".concat(WILDCARD, \"')\"));\n        }\n        if (this.strict) {\n            if (!this.events.includes(_event.name) && !(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBuiltInEvent)(_event.name)) {\n                throw new Error(\"Machine '\".concat(this.id, \"' does not accept event '\").concat(_event.name, \"'\"));\n            }\n        }\n        var stateTransition = this._transition(currentState.value, currentState, _event) || {\n            transitions: [],\n            configuration: [],\n            exitSet: [],\n            source: currentState,\n            actions: []\n        };\n        var prevConfig = (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)([], this.getStateNodes(currentState.value));\n        var resolvedConfig = stateTransition.configuration.length ? (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)(prevConfig, stateTransition.configuration) : prevConfig;\n        stateTransition.configuration = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolvedConfig), false);\n        return this.resolveTransition(stateTransition, currentState, currentState.context, exec, _event);\n    };\n    StateNode.prototype.resolveRaisedTransition = function(state, _event, originalEvent, predictableExec) {\n        var _a;\n        var currentActions = state.actions;\n        state = this.transition(state, _event, undefined, predictableExec); // Save original event to state\n        // TODO: this should be the raised event! Delete in V5 (breaking)\n        state._event = originalEvent;\n        state.event = originalEvent.data;\n        (_a = state.actions).unshift.apply(_a, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(currentActions), false));\n        return state;\n    };\n    StateNode.prototype.resolveTransition = function(stateTransition, currentState, context, predictableExec, _event) {\n        var e_6, _a, e_7, _b;\n        var _this = this;\n        if (_event === void 0) {\n            _event = _actions_js__WEBPACK_IMPORTED_MODULE_5__.initEvent;\n        }\n        var configuration = stateTransition.configuration; // Transition will \"apply\" if:\n        // - this is the initial state (there is no current state)\n        // - OR there are transitions\n        var willTransition = !currentState || stateTransition.transitions.length > 0;\n        var resolvedConfiguration = willTransition ? stateTransition.configuration : currentState ? currentState.configuration : [];\n        var isDone = (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isInFinalState)(resolvedConfiguration, this);\n        var resolvedStateValue = willTransition ? (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getValue)(this.machine, configuration) : undefined;\n        var historyValue = currentState ? currentState.historyValue ? currentState.historyValue : stateTransition.source ? this.machine.historyValue(currentState.value) : undefined : undefined;\n        var actionBlocks = this.getActions(new Set(resolvedConfiguration), isDone, stateTransition, context, _event, currentState, predictableExec);\n        var activities = currentState ? (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, currentState.activities) : {};\n        try {\n            for(var actionBlocks_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(actionBlocks), actionBlocks_1_1 = actionBlocks_1.next(); !actionBlocks_1_1.done; actionBlocks_1_1 = actionBlocks_1.next()){\n                var block = actionBlocks_1_1.value;\n                try {\n                    for(var _c = (e_7 = void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(block.actions)), _d = _c.next(); !_d.done; _d = _c.next()){\n                        var action = _d.value;\n                        if (action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.start) {\n                            activities[action.activity.id || action.activity.type] = action;\n                        } else if (action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.stop) {\n                            activities[action.activity.id || action.activity.type] = false;\n                        }\n                    }\n                } catch (e_7_1) {\n                    e_7 = {\n                        error: e_7_1\n                    };\n                } finally{\n                    try {\n                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n                    } finally{\n                        if (e_7) throw e_7.error;\n                    }\n                }\n            }\n        } catch (e_6_1) {\n            e_6 = {\n                error: e_6_1\n            };\n        } finally{\n            try {\n                if (actionBlocks_1_1 && !actionBlocks_1_1.done && (_a = actionBlocks_1.return)) _a.call(actionBlocks_1);\n            } finally{\n                if (e_6) throw e_6.error;\n            }\n        }\n        var _e = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.resolveActions)(this, currentState, context, _event, actionBlocks, predictableExec, this.machine.config.predictableActionArguments || this.machine.config.preserveActionOrder), 2), resolvedActions = _e[0], updatedContext = _e[1];\n        var _f = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.partition)(resolvedActions, _utils_js__WEBPACK_IMPORTED_MODULE_0__.isRaisableAction), 2), raisedEvents = _f[0], nonRaisedActions = _f[1];\n        var invokeActions = resolvedActions.filter(function(action) {\n            var _a;\n            return action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.start && ((_a = action.activity) === null || _a === void 0 ? void 0 : _a.type) === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.invoke;\n        });\n        var children = invokeActions.reduce(function(acc, action) {\n            acc[action.activity.id] = (0,_Actor_js__WEBPACK_IMPORTED_MODULE_9__.createInvocableActor)(action.activity, _this.machine, updatedContext, _event);\n            return acc;\n        }, currentState ? (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, currentState.children) : {});\n        var nextState = new _State_js__WEBPACK_IMPORTED_MODULE_7__.State({\n            value: resolvedStateValue || currentState.value,\n            context: updatedContext,\n            _event: _event,\n            // Persist _sessionid between states\n            _sessionid: currentState ? currentState._sessionid : null,\n            historyValue: resolvedStateValue ? historyValue ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.updateHistoryValue)(historyValue, resolvedStateValue) : undefined : currentState ? currentState.historyValue : undefined,\n            history: !resolvedStateValue || stateTransition.source ? currentState : undefined,\n            actions: resolvedStateValue ? nonRaisedActions : [],\n            activities: resolvedStateValue ? activities : currentState ? currentState.activities : {},\n            events: [],\n            configuration: resolvedConfiguration,\n            transitions: stateTransition.transitions,\n            children: children,\n            done: isDone,\n            tags: (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getTagsFromConfiguration)(resolvedConfiguration),\n            machine: this\n        });\n        var didUpdateContext = context !== updatedContext;\n        nextState.changed = _event.name === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.update || didUpdateContext; // Dispose of penultimate histories to prevent memory leaks\n        var history = nextState.history;\n        if (history) {\n            delete history.history;\n        } // There are transient transitions if the machine is not in a final state\n        // and if some of the state nodes have transient (\"always\") transitions.\n        var hasAlwaysTransitions = !isDone && (this._transient || configuration.some(function(stateNode) {\n            return stateNode._transient;\n        })); // If there are no enabled transitions, check if there are transient transitions.\n        // If there are transient transitions, continue checking for more transitions\n        // because an transient transition should be triggered even if there are no\n        // enabled transitions.\n        //\n        // If we're already working on an transient transition then stop to prevent an infinite loop.\n        //\n        // Otherwise, if there are no enabled nor transient transitions, we are done.\n        if (!willTransition && (!hasAlwaysTransitions || _event.name === NULL_EVENT)) {\n            return nextState;\n        }\n        var maybeNextState = nextState;\n        if (!isDone) {\n            if (hasAlwaysTransitions) {\n                maybeNextState = this.resolveRaisedTransition(maybeNextState, {\n                    type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.nullEvent\n                }, _event, predictableExec);\n            }\n            while(raisedEvents.length){\n                var raisedEvent = raisedEvents.shift();\n                maybeNextState = this.resolveRaisedTransition(maybeNextState, raisedEvent._event, _event, predictableExec);\n            }\n        } // Detect if state changed\n        var changed = maybeNextState.changed || (history ? !!maybeNextState.actions.length || didUpdateContext || typeof history.value !== typeof maybeNextState.value || !(0,_State_js__WEBPACK_IMPORTED_MODULE_7__.stateValuesEqual)(maybeNextState.value, history.value) : undefined);\n        maybeNextState.changed = changed; // Preserve original history after raised events\n        maybeNextState.history = history;\n        return maybeNextState;\n    };\n    /**\r\n   * Returns the child state node from its relative `stateKey`, or throws.\r\n   */ StateNode.prototype.getStateNode = function(stateKey) {\n        if (isStateId(stateKey)) {\n            return this.machine.getStateNodeById(stateKey);\n        }\n        if (!this.states) {\n            throw new Error(\"Unable to retrieve child state '\".concat(stateKey, \"' from '\").concat(this.id, \"'; no child states exist.\"));\n        }\n        var result = this.states[stateKey];\n        if (!result) {\n            throw new Error(\"Child state '\".concat(stateKey, \"' does not exist on '\").concat(this.id, \"'\"));\n        }\n        return result;\n    };\n    /**\r\n   * Returns the state node with the given `stateId`, or throws.\r\n   *\r\n   * @param stateId The state ID. The prefix \"#\" is removed.\r\n   */ StateNode.prototype.getStateNodeById = function(stateId) {\n        var resolvedStateId = isStateId(stateId) ? stateId.slice(STATE_IDENTIFIER.length) : stateId;\n        if (resolvedStateId === this.id) {\n            return this;\n        }\n        var stateNode = this.machine.idMap[resolvedStateId];\n        if (!stateNode) {\n            throw new Error(\"Child state node '#\".concat(resolvedStateId, \"' does not exist on machine '\").concat(this.id, \"'\"));\n        }\n        return stateNode;\n    };\n    /**\r\n   * Returns the relative state node from the given `statePath`, or throws.\r\n   *\r\n   * @param statePath The string or string array relative path to the state node.\r\n   */ StateNode.prototype.getStateNodeByPath = function(statePath) {\n        if (typeof statePath === \"string\" && isStateId(statePath)) {\n            try {\n                return this.getStateNodeById(statePath.slice(1));\n            } catch (e) {\n            // throw e;\n            }\n        }\n        var arrayStatePath = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePath)(statePath, this.delimiter).slice();\n        var currentStateNode = this;\n        while(arrayStatePath.length){\n            var key = arrayStatePath.shift();\n            if (!key.length) {\n                break;\n            }\n            currentStateNode = currentStateNode.getStateNode(key);\n        }\n        return currentStateNode;\n    };\n    /**\r\n   * Resolves a partial state value with its full representation in this machine.\r\n   *\r\n   * @param stateValue The partial state value to resolve.\r\n   */ StateNode.prototype.resolve = function(stateValue) {\n        var _a;\n        var _this = this;\n        if (!stateValue) {\n            return this.initialStateValue || EMPTY_OBJECT; // TODO: type-specific properties\n        }\n        switch(this.type){\n            case \"parallel\":\n                return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(this.initialStateValue, function(subStateValue, subStateKey) {\n                    return subStateValue ? _this.getStateNode(subStateKey).resolve(stateValue[subStateKey] || subStateValue) : EMPTY_OBJECT;\n                });\n            case \"compound\":\n                if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)) {\n                    var subStateNode = this.getStateNode(stateValue);\n                    if (subStateNode.type === \"parallel\" || subStateNode.type === \"compound\") {\n                        return _a = {}, _a[stateValue] = subStateNode.initialStateValue, _a;\n                    }\n                    return stateValue;\n                }\n                if (!Object.keys(stateValue).length) {\n                    return this.initialStateValue || {};\n                }\n                return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(stateValue, function(subStateValue, subStateKey) {\n                    return subStateValue ? _this.getStateNode(subStateKey).resolve(subStateValue) : EMPTY_OBJECT;\n                });\n            default:\n                return stateValue || EMPTY_OBJECT;\n        }\n    };\n    StateNode.prototype.getResolvedPath = function(stateIdentifier) {\n        if (isStateId(stateIdentifier)) {\n            var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];\n            if (!stateNode) {\n                throw new Error(\"Unable to find state node '\".concat(stateIdentifier, \"'\"));\n            }\n            return stateNode.path;\n        }\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePath)(stateIdentifier, this.delimiter);\n    };\n    Object.defineProperty(StateNode.prototype, \"initialStateValue\", {\n        get: function() {\n            var _a;\n            if (this.__cache.initialStateValue) {\n                return this.__cache.initialStateValue;\n            }\n            var initialStateValue;\n            if (this.type === \"parallel\") {\n                initialStateValue = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapFilterValues)(this.states, function(state) {\n                    return state.initialStateValue || EMPTY_OBJECT;\n                }, function(stateNode) {\n                    return !(stateNode.type === \"history\");\n                });\n            } else if (this.initial !== undefined) {\n                if (!this.states[this.initial]) {\n                    throw new Error(\"Initial state '\".concat(this.initial, \"' not found on '\").concat(this.key, \"'\"));\n                }\n                initialStateValue = (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isLeafNode)(this.states[this.initial]) ? this.initial : (_a = {}, _a[this.initial] = this.states[this.initial].initialStateValue, _a);\n            } else {\n                // The finite state value of a machine without child states is just an empty object\n                initialStateValue = {};\n            }\n            this.__cache.initialStateValue = initialStateValue;\n            return this.__cache.initialStateValue;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    StateNode.prototype.getInitialState = function(stateValue, context) {\n        this._init(); // TODO: this should be in the constructor (see note in constructor)\n        var configuration = this.getStateNodes(stateValue);\n        return this.resolveTransition({\n            configuration: configuration,\n            exitSet: [],\n            transitions: [],\n            source: undefined,\n            actions: []\n        }, undefined, context !== null && context !== void 0 ? context : this.machine.context, undefined);\n    };\n    Object.defineProperty(StateNode.prototype, \"initialState\", {\n        /**\r\n     * The initial State instance, which includes all actions to be executed from\r\n     * entering the initial state.\r\n     */ get: function() {\n            var initialStateValue = this.initialStateValue;\n            if (!initialStateValue) {\n                throw new Error(\"Cannot retrieve initial state from simple state '\".concat(this.id, \"'.\"));\n            }\n            return this.getInitialState(initialStateValue);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateNode.prototype, \"target\", {\n        /**\r\n     * The target state value of the history state node, if it exists. This represents the\r\n     * default state value to transition to if no history value exists yet.\r\n     */ get: function() {\n            var target;\n            if (this.type === \"history\") {\n                var historyConfig = this.config;\n                if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(historyConfig.target)) {\n                    target = isStateId(historyConfig.target) ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.pathToStateValue)(this.machine.getStateNodeById(historyConfig.target).path.slice(this.path.length - 1)) : historyConfig.target;\n                } else {\n                    target = historyConfig.target;\n                }\n            }\n            return target;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\r\n   * Returns the leaf nodes from a state path relative to this state node.\r\n   *\r\n   * @param relativeStateId The relative state path to retrieve the state nodes\r\n   * @param history The previous state to retrieve history\r\n   * @param resolve Whether state nodes should resolve to initial child state nodes\r\n   */ StateNode.prototype.getRelativeStateNodes = function(relativeStateId, historyValue, resolve) {\n        if (resolve === void 0) {\n            resolve = true;\n        }\n        return resolve ? relativeStateId.type === \"history\" ? relativeStateId.resolveHistory(historyValue) : relativeStateId.initialStateNodes : [\n            relativeStateId\n        ];\n    };\n    Object.defineProperty(StateNode.prototype, \"initialStateNodes\", {\n        get: function() {\n            var _this = this;\n            if ((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isLeafNode)(this)) {\n                return [\n                    this\n                ];\n            } // Case when state node is compound but no initial state is defined\n            if (this.type === \"compound\" && !this.initial) {\n                if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION) {\n                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, \"Compound state node '\".concat(this.id, \"' has no initial state.\"));\n                }\n                return [\n                    this\n                ];\n            }\n            var initialStateNodePaths = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePaths)(this.initialStateValue);\n            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(initialStateNodePaths.map(function(initialPath) {\n                return _this.getFromRelativePath(initialPath);\n            }));\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\r\n   * Retrieves state nodes from a relative path to this state node.\r\n   *\r\n   * @param relativePath The relative path from this state node\r\n   * @param historyValue\r\n   */ StateNode.prototype.getFromRelativePath = function(relativePath) {\n        if (!relativePath.length) {\n            return [\n                this\n            ];\n        }\n        var _a = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(relativePath), stateKey = _a[0], childStatePath = _a.slice(1);\n        if (!this.states) {\n            throw new Error(\"Cannot retrieve subPath '\".concat(stateKey, \"' from node with no states\"));\n        }\n        var childStateNode = this.getStateNode(stateKey);\n        if (childStateNode.type === \"history\") {\n            return childStateNode.resolveHistory();\n        }\n        if (!this.states[stateKey]) {\n            throw new Error(\"Child state '\".concat(stateKey, \"' does not exist on '\").concat(this.id, \"'\"));\n        }\n        return this.states[stateKey].getFromRelativePath(childStatePath);\n    };\n    StateNode.prototype.historyValue = function(relativeStateValue) {\n        if (!Object.keys(this.states).length) {\n            return undefined;\n        }\n        return {\n            current: relativeStateValue || this.initialStateValue,\n            states: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapFilterValues)(this.states, function(stateNode, key) {\n                if (!relativeStateValue) {\n                    return stateNode.historyValue();\n                }\n                var subStateValue = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(relativeStateValue) ? undefined : relativeStateValue[key];\n                return stateNode.historyValue(subStateValue || stateNode.initialStateValue);\n            }, function(stateNode) {\n                return !stateNode.history;\n            })\n        };\n    };\n    /**\r\n   * Resolves to the historical value(s) of the parent state node,\r\n   * represented by state nodes.\r\n   *\r\n   * @param historyValue\r\n   */ StateNode.prototype.resolveHistory = function(historyValue) {\n        var _this = this;\n        if (this.type !== \"history\") {\n            return [\n                this\n            ];\n        }\n        var parent = this.parent;\n        if (!historyValue) {\n            var historyTarget = this.target;\n            return historyTarget ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePaths)(historyTarget).map(function(relativeChildPath) {\n                return parent.getFromRelativePath(relativeChildPath);\n            })) : parent.initialStateNodes;\n        }\n        var subHistoryValue = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.nestedPath)(parent.path, \"states\")(historyValue).current;\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(subHistoryValue)) {\n            return [\n                parent.getStateNode(subHistoryValue)\n            ];\n        }\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePaths)(subHistoryValue).map(function(subStatePath) {\n            return _this.history === \"deep\" ? parent.getFromRelativePath(subStatePath) : [\n                parent.states[subStatePath[0]]\n            ];\n        }));\n    };\n    Object.defineProperty(StateNode.prototype, \"stateIds\", {\n        /**\r\n     * All the state node IDs of this state node and its descendant state nodes.\r\n     */ get: function() {\n            var _this = this;\n            var childStateIds = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(this.states).map(function(stateKey) {\n                return _this.states[stateKey].stateIds;\n            }));\n            return [\n                this.id\n            ].concat(childStateIds);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateNode.prototype, \"events\", {\n        /**\r\n     * All the event types accepted by this state node and its descendants.\r\n     */ get: function() {\n            var e_8, _a, e_9, _b;\n            if (this.__cache.events) {\n                return this.__cache.events;\n            }\n            var states = this.states;\n            var events = new Set(this.ownEvents);\n            if (states) {\n                try {\n                    for(var _c = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(Object.keys(states)), _d = _c.next(); !_d.done; _d = _c.next()){\n                        var stateId = _d.value;\n                        var state = states[stateId];\n                        if (state.states) {\n                            try {\n                                for(var _e = (e_9 = void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(state.events)), _f = _e.next(); !_f.done; _f = _e.next()){\n                                    var event_1 = _f.value;\n                                    events.add(\"\".concat(event_1));\n                                }\n                            } catch (e_9_1) {\n                                e_9 = {\n                                    error: e_9_1\n                                };\n                            } finally{\n                                try {\n                                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                                } finally{\n                                    if (e_9) throw e_9.error;\n                                }\n                            }\n                        }\n                    }\n                } catch (e_8_1) {\n                    e_8 = {\n                        error: e_8_1\n                    };\n                } finally{\n                    try {\n                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                    } finally{\n                        if (e_8) throw e_8.error;\n                    }\n                }\n            }\n            return this.__cache.events = Array.from(events);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateNode.prototype, \"ownEvents\", {\n        /**\r\n     * All the events that have transitions directly from this state node.\r\n     *\r\n     * Excludes any inert events.\r\n     */ get: function() {\n            var events = new Set(this.transitions.filter(function(transition) {\n                return !(!transition.target && !transition.actions.length && transition.internal);\n            }).map(function(transition) {\n                return transition.eventType;\n            }));\n            return Array.from(events);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    StateNode.prototype.resolveTarget = function(_target) {\n        var _this = this;\n        if (_target === undefined) {\n            // an undefined target signals that the state node should not transition from that state when receiving that event\n            return undefined;\n        }\n        return _target.map(function(target) {\n            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(target)) {\n                return target;\n            }\n            var isInternalTarget = target[0] === _this.delimiter; // If internal target is defined on machine,\n            // do not include machine key on target\n            if (isInternalTarget && !_this.parent) {\n                return _this.getStateNodeByPath(target.slice(1));\n            }\n            var resolvedTarget = isInternalTarget ? _this.key + target : target;\n            if (_this.parent) {\n                try {\n                    var targetStateNode = _this.parent.getStateNodeByPath(resolvedTarget);\n                    return targetStateNode;\n                } catch (err) {\n                    throw new Error(\"Invalid transition definition for state node '\".concat(_this.id, \"':\\n\").concat(err.message));\n                }\n            } else {\n                return _this.getStateNodeByPath(resolvedTarget);\n            }\n        });\n    };\n    StateNode.prototype.formatTransition = function(transitionConfig) {\n        var _this = this;\n        var normalizedTarget = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.normalizeTarget)(transitionConfig.target);\n        var internal = \"internal\" in transitionConfig ? transitionConfig.internal : normalizedTarget ? normalizedTarget.some(function(_target) {\n            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(_target) && _target[0] === _this.delimiter;\n        }) : true;\n        var guards = this.machine.options.guards;\n        var target = this.resolveTarget(normalizedTarget);\n        var transition = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, transitionConfig), {\n            actions: (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(transitionConfig.actions)),\n            cond: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toGuard)(transitionConfig.cond, guards),\n            target: target,\n            source: this,\n            internal: internal,\n            eventType: transitionConfig.event,\n            toJSON: function() {\n                return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, transition), {\n                    target: transition.target ? transition.target.map(function(t) {\n                        return \"#\".concat(t.id);\n                    }) : undefined,\n                    source: \"#\".concat(_this.id)\n                });\n            }\n        });\n        return transition;\n    };\n    StateNode.prototype.formatTransitions = function() {\n        var e_10, _a;\n        var _this = this;\n        var onConfig;\n        if (!this.config.on) {\n            onConfig = [];\n        } else if (Array.isArray(this.config.on)) {\n            onConfig = this.config.on;\n        } else {\n            var _b = this.config.on, _c = WILDCARD, _d = _b[_c], wildcardConfigs = _d === void 0 ? [] : _d, strictTransitionConfigs_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__rest)(_b, [\n                typeof _c === \"symbol\" ? _c : _c + \"\"\n            ]);\n            onConfig = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(strictTransitionConfigs_1).map(function(key) {\n                if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION && key === NULL_EVENT) {\n                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, \"Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. \" + 'Please check the `on` configuration for \"#'.concat(_this.id, '\".'));\n                }\n                var transitionConfigArray = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(key, strictTransitionConfigs_1[key]);\n                if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION) {\n                    validateArrayifiedTransitions(_this, key, transitionConfigArray);\n                }\n                return transitionConfigArray;\n            }).concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(WILDCARD, wildcardConfigs)));\n        }\n        var eventlessConfig = this.config.always ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(\"\", this.config.always) : [];\n        var doneConfig = this.config.onDone ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(String((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(this.id)), this.config.onDone) : [];\n        if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION) {\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!(this.config.onDone && !this.parent), 'Root nodes cannot have an \".onDone\" transition. Please check the config of \"'.concat(this.id, '\".'));\n        }\n        var invokeConfig = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(this.invoke.map(function(invokeDef) {\n            var settleTransitions = [];\n            if (invokeDef.onDone) {\n                settleTransitions.push.apply(settleTransitions, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(String((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.doneInvoke)(invokeDef.id)), invokeDef.onDone)), false));\n            }\n            if (invokeDef.onError) {\n                settleTransitions.push.apply(settleTransitions, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(String((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.error)(invokeDef.id)), invokeDef.onError)), false));\n            }\n            return settleTransitions;\n        }));\n        var delayedTransitions = this.after;\n        var formattedTransitions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(doneConfig), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(invokeConfig), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(onConfig), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(eventlessConfig), false).map(function(transitionConfig) {\n            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(transitionConfig).map(function(transition) {\n                return _this.formatTransition(transition);\n            });\n        }));\n        try {\n            for(var delayedTransitions_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(delayedTransitions), delayedTransitions_1_1 = delayedTransitions_1.next(); !delayedTransitions_1_1.done; delayedTransitions_1_1 = delayedTransitions_1.next()){\n                var delayedTransition = delayedTransitions_1_1.value;\n                formattedTransitions.push(delayedTransition);\n            }\n        } catch (e_10_1) {\n            e_10 = {\n                error: e_10_1\n            };\n        } finally{\n            try {\n                if (delayedTransitions_1_1 && !delayedTransitions_1_1.done && (_a = delayedTransitions_1.return)) _a.call(delayedTransitions_1);\n            } finally{\n                if (e_10) throw e_10.error;\n            }\n        }\n        return formattedTransitions;\n    };\n    return StateNode;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/StateNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/_virtual/_tslib.js":
/*!***************************************************!*\
  !*** ./node_modules/xstate/es/_virtual/_tslib.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __assign: () => (/* binding */ __assign),\n/* harmony export */   __read: () => (/* binding */ __read),\n/* harmony export */   __rest: () => (/* binding */ __rest),\n/* harmony export */   __spreadArray: () => (/* binding */ __spreadArray),\n/* harmony export */   __values: () => (/* binding */ __values)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ var __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\nfunction __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/actionTypes.js":
/*!***********************************************!*\
  !*** ./node_modules/xstate/es/actionTypes.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   after: () => (/* binding */ after),\n/* harmony export */   assign: () => (/* binding */ assign),\n/* harmony export */   cancel: () => (/* binding */ cancel),\n/* harmony export */   choose: () => (/* binding */ choose),\n/* harmony export */   doneState: () => (/* binding */ doneState),\n/* harmony export */   error: () => (/* binding */ error),\n/* harmony export */   errorExecution: () => (/* binding */ errorExecution),\n/* harmony export */   errorPlatform: () => (/* binding */ errorPlatform),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   invoke: () => (/* binding */ invoke),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   nullEvent: () => (/* binding */ nullEvent),\n/* harmony export */   pure: () => (/* binding */ pure),\n/* harmony export */   raise: () => (/* binding */ raise),\n/* harmony export */   send: () => (/* binding */ send),\n/* harmony export */   start: () => (/* binding */ start),\n/* harmony export */   stop: () => (/* binding */ stop),\n/* harmony export */   update: () => (/* binding */ update)\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/xstate/es/types.js\");\n\nvar start = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Start;\nvar stop = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Stop;\nvar raise = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Raise;\nvar send = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Send;\nvar cancel = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Cancel;\nvar nullEvent = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.NullEvent;\nvar assign = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Assign;\nvar after = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.After;\nvar doneState = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.DoneState;\nvar log = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Log;\nvar init = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Init;\nvar invoke = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Invoke;\nvar errorExecution = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.ErrorExecution;\nvar errorPlatform = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.ErrorPlatform;\nvar error = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.ErrorCustom;\nvar update = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Update;\nvar choose = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Choose;\nvar pure = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Pure;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2FjdGlvblR5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBeUM7QUFFekMsSUFBSUMsUUFBUUQsa0RBQVdBLENBQUNFLEtBQUs7QUFDN0IsSUFBSUMsT0FBT0gsa0RBQVdBLENBQUNJLElBQUk7QUFDM0IsSUFBSUMsUUFBUUwsa0RBQVdBLENBQUNNLEtBQUs7QUFDN0IsSUFBSUMsT0FBT1Asa0RBQVdBLENBQUNRLElBQUk7QUFDM0IsSUFBSUMsU0FBU1Qsa0RBQVdBLENBQUNVLE1BQU07QUFDL0IsSUFBSUMsWUFBWVgsa0RBQVdBLENBQUNZLFNBQVM7QUFDckMsSUFBSUMsU0FBU2Isa0RBQVdBLENBQUNjLE1BQU07QUFDL0IsSUFBSUMsUUFBUWYsa0RBQVdBLENBQUNnQixLQUFLO0FBQzdCLElBQUlDLFlBQVlqQixrREFBV0EsQ0FBQ2tCLFNBQVM7QUFDckMsSUFBSUMsTUFBTW5CLGtEQUFXQSxDQUFDb0IsR0FBRztBQUN6QixJQUFJQyxPQUFPckIsa0RBQVdBLENBQUNzQixJQUFJO0FBQzNCLElBQUlDLFNBQVN2QixrREFBV0EsQ0FBQ3dCLE1BQU07QUFDL0IsSUFBSUMsaUJBQWlCekIsa0RBQVdBLENBQUMwQixjQUFjO0FBQy9DLElBQUlDLGdCQUFnQjNCLGtEQUFXQSxDQUFDNEIsYUFBYTtBQUM3QyxJQUFJQyxRQUFRN0Isa0RBQVdBLENBQUM4QixXQUFXO0FBQ25DLElBQUlDLFNBQVMvQixrREFBV0EsQ0FBQ2dDLE1BQU07QUFDL0IsSUFBSUMsU0FBU2pDLGtEQUFXQSxDQUFDa0MsTUFBTTtBQUMvQixJQUFJQyxPQUFPbkMsa0RBQVdBLENBQUNvQyxJQUFJO0FBRXFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnRuZXh0Ly4vbm9kZV9tb2R1bGVzL3hzdGF0ZS9lcy9hY3Rpb25UeXBlcy5qcz84Y2I3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvblR5cGVzIH0gZnJvbSAnLi90eXBlcy5qcyc7XG5cbnZhciBzdGFydCA9IEFjdGlvblR5cGVzLlN0YXJ0O1xudmFyIHN0b3AgPSBBY3Rpb25UeXBlcy5TdG9wO1xudmFyIHJhaXNlID0gQWN0aW9uVHlwZXMuUmFpc2U7XG52YXIgc2VuZCA9IEFjdGlvblR5cGVzLlNlbmQ7XG52YXIgY2FuY2VsID0gQWN0aW9uVHlwZXMuQ2FuY2VsO1xudmFyIG51bGxFdmVudCA9IEFjdGlvblR5cGVzLk51bGxFdmVudDtcbnZhciBhc3NpZ24gPSBBY3Rpb25UeXBlcy5Bc3NpZ247XG52YXIgYWZ0ZXIgPSBBY3Rpb25UeXBlcy5BZnRlcjtcbnZhciBkb25lU3RhdGUgPSBBY3Rpb25UeXBlcy5Eb25lU3RhdGU7XG52YXIgbG9nID0gQWN0aW9uVHlwZXMuTG9nO1xudmFyIGluaXQgPSBBY3Rpb25UeXBlcy5Jbml0O1xudmFyIGludm9rZSA9IEFjdGlvblR5cGVzLkludm9rZTtcbnZhciBlcnJvckV4ZWN1dGlvbiA9IEFjdGlvblR5cGVzLkVycm9yRXhlY3V0aW9uO1xudmFyIGVycm9yUGxhdGZvcm0gPSBBY3Rpb25UeXBlcy5FcnJvclBsYXRmb3JtO1xudmFyIGVycm9yID0gQWN0aW9uVHlwZXMuRXJyb3JDdXN0b207XG52YXIgdXBkYXRlID0gQWN0aW9uVHlwZXMuVXBkYXRlO1xudmFyIGNob29zZSA9IEFjdGlvblR5cGVzLkNob29zZTtcbnZhciBwdXJlID0gQWN0aW9uVHlwZXMuUHVyZTtcblxuZXhwb3J0IHsgYWZ0ZXIsIGFzc2lnbiwgY2FuY2VsLCBjaG9vc2UsIGRvbmVTdGF0ZSwgZXJyb3IsIGVycm9yRXhlY3V0aW9uLCBlcnJvclBsYXRmb3JtLCBpbml0LCBpbnZva2UsIGxvZywgbnVsbEV2ZW50LCBwdXJlLCByYWlzZSwgc2VuZCwgc3RhcnQsIHN0b3AsIHVwZGF0ZSB9O1xuIl0sIm5hbWVzIjpbIkFjdGlvblR5cGVzIiwic3RhcnQiLCJTdGFydCIsInN0b3AiLCJTdG9wIiwicmFpc2UiLCJSYWlzZSIsInNlbmQiLCJTZW5kIiwiY2FuY2VsIiwiQ2FuY2VsIiwibnVsbEV2ZW50IiwiTnVsbEV2ZW50IiwiYXNzaWduIiwiQXNzaWduIiwiYWZ0ZXIiLCJBZnRlciIsImRvbmVTdGF0ZSIsIkRvbmVTdGF0ZSIsImxvZyIsIkxvZyIsImluaXQiLCJJbml0IiwiaW52b2tlIiwiSW52b2tlIiwiZXJyb3JFeGVjdXRpb24iLCJFcnJvckV4ZWN1dGlvbiIsImVycm9yUGxhdGZvcm0iLCJFcnJvclBsYXRmb3JtIiwiZXJyb3IiLCJFcnJvckN1c3RvbSIsInVwZGF0ZSIsIlVwZGF0ZSIsImNob29zZSIsIkNob29zZSIsInB1cmUiLCJQdXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/actionTypes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/actions.js":
/*!*******************************************!*\
  !*** ./node_modules/xstate/es/actions.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   actionTypes: () => (/* reexport module object */ _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   after: () => (/* binding */ after),\n/* harmony export */   assign: () => (/* binding */ assign),\n/* harmony export */   cancel: () => (/* binding */ cancel),\n/* harmony export */   choose: () => (/* binding */ choose),\n/* harmony export */   done: () => (/* binding */ done),\n/* harmony export */   doneInvoke: () => (/* binding */ doneInvoke),\n/* harmony export */   error: () => (/* binding */ error),\n/* harmony export */   escalate: () => (/* binding */ escalate),\n/* harmony export */   forwardTo: () => (/* binding */ forwardTo),\n/* harmony export */   getActionFunction: () => (/* binding */ getActionFunction),\n/* harmony export */   initEvent: () => (/* binding */ initEvent),\n/* harmony export */   isActionObject: () => (/* binding */ isActionObject),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   pure: () => (/* binding */ pure),\n/* harmony export */   raise: () => (/* binding */ raise),\n/* harmony export */   resolveActions: () => (/* binding */ resolveActions),\n/* harmony export */   resolveLog: () => (/* binding */ resolveLog),\n/* harmony export */   resolveRaise: () => (/* binding */ resolveRaise),\n/* harmony export */   resolveSend: () => (/* binding */ resolveSend),\n/* harmony export */   resolveStop: () => (/* binding */ resolveStop),\n/* harmony export */   respond: () => (/* binding */ respond),\n/* harmony export */   send: () => (/* binding */ send),\n/* harmony export */   sendParent: () => (/* binding */ sendParent),\n/* harmony export */   sendTo: () => (/* binding */ sendTo),\n/* harmony export */   sendUpdate: () => (/* binding */ sendUpdate),\n/* harmony export */   start: () => (/* binding */ start),\n/* harmony export */   stop: () => (/* binding */ stop),\n/* harmony export */   toActionObject: () => (/* binding */ toActionObject),\n/* harmony export */   toActionObjects: () => (/* binding */ toActionObjects),\n/* harmony export */   toActivityDefinition: () => (/* binding */ toActivityDefinition)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/xstate/es/types.js\");\n/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actionTypes.js */ \"(ssr)/./node_modules/xstate/es/actionTypes.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./environment.js */ \"(ssr)/./node_modules/xstate/es/environment.js\");\n\n\n\n\n\n\n\nvar initEvent = /*#__PURE__*/ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toSCXMLEvent)({\n    type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.init\n});\nfunction getActionFunction(actionType, actionFunctionMap) {\n    return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;\n}\nfunction toActionObject(action, actionFunctionMap) {\n    var actionObject;\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action) || typeof action === \"number\") {\n        var exec = getActionFunction(action, actionFunctionMap);\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(exec)) {\n            actionObject = {\n                type: action,\n                exec: exec\n            };\n        } else if (exec) {\n            actionObject = exec;\n        } else {\n            actionObject = {\n                type: action,\n                exec: undefined\n            };\n        }\n    } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action)) {\n        actionObject = {\n            // Convert action to string if unnamed\n            type: action.name || action.toString(),\n            exec: action\n        };\n    } else {\n        var exec = getActionFunction(action.type, actionFunctionMap);\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(exec)) {\n            actionObject = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, action), {\n                exec: exec\n            });\n        } else if (exec) {\n            var actionType = exec.type || action.type;\n            actionObject = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, exec), action), {\n                type: actionType\n            });\n        } else {\n            actionObject = action;\n        }\n    }\n    return actionObject;\n}\nvar toActionObjects = function(action, actionFunctionMap) {\n    if (!action) {\n        return [];\n    }\n    var actions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(action) ? action : [\n        action\n    ];\n    return actions.map(function(subAction) {\n        return toActionObject(subAction, actionFunctionMap);\n    });\n};\nfunction toActivityDefinition(action) {\n    var actionObject = toActionObject(action);\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n        id: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action) ? action : actionObject.id\n    }, actionObject), {\n        type: actionObject.type\n    });\n}\n/**\r\n * Raises an event. This places the event in the internal event queue, so that\r\n * the event is immediately consumed by the machine in the current step.\r\n *\r\n * @param eventType The event to raise.\r\n */ function raise(event, options) {\n    return {\n        type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.raise,\n        event: typeof event === \"function\" ? event : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toEventObject)(event),\n        delay: options ? options.delay : undefined,\n        id: options === null || options === void 0 ? void 0 : options.id\n    };\n}\nfunction resolveRaise(action, ctx, _event, delaysMap) {\n    var meta = {\n        _event: _event\n    };\n    var resolvedEvent = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toSCXMLEvent)((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n    var resolvedDelay;\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action.delay)) {\n        var configDelay = delaysMap && delaysMap[action.delay];\n        resolvedDelay = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n    } else {\n        resolvedDelay = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n    }\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, action), {\n        type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.raise,\n        _event: resolvedEvent,\n        delay: resolvedDelay\n    });\n}\n/**\r\n * Sends an event. This returns an action that will be read by an interpreter to\r\n * send the event in the next step, after the current step is finished executing.\r\n *\r\n * @deprecated Use the `sendTo(...)` action creator instead.\r\n *\r\n * @param event The event to send.\r\n * @param options Options to pass into the send event:\r\n *  - `id` - The unique send event identifier (used with `cancel()`).\r\n *  - `delay` - The number of milliseconds to delay the sending of the event.\r\n *  - `to` - The target of this event (by default, the machine the event was sent from).\r\n */ function send(event, options) {\n    return {\n        to: options ? options.to : undefined,\n        type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.send,\n        event: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(event) ? event : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toEventObject)(event),\n        delay: options ? options.delay : undefined,\n        // TODO: don't auto-generate IDs here like that\n        // there is too big chance of the ID collision\n        id: options && options.id !== undefined ? options.id : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(event) ? event.name : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getEventType)(event)\n    };\n}\nfunction resolveSend(action, ctx, _event, delaysMap) {\n    var meta = {\n        _event: _event\n    }; // TODO: helper function for resolving Expr\n    var resolvedEvent = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toSCXMLEvent)((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n    var resolvedDelay;\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action.delay)) {\n        var configDelay = delaysMap && delaysMap[action.delay];\n        resolvedDelay = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n    } else {\n        resolvedDelay = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n    }\n    var resolvedTarget = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.to) ? action.to(ctx, _event.data, meta) : action.to;\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, action), {\n        to: resolvedTarget,\n        _event: resolvedEvent,\n        event: resolvedEvent.data,\n        delay: resolvedDelay\n    });\n}\n/**\r\n * Sends an event to this machine's parent.\r\n *\r\n * @param event The event to send to the parent machine.\r\n * @param options Options to pass into the send event.\r\n */ function sendParent(event, options) {\n    return send(event, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {\n        to: _types_js__WEBPACK_IMPORTED_MODULE_3__.SpecialTargets.Parent\n    }));\n}\n/**\r\n * Sends an event to an actor.\r\n *\r\n * @param actor The `ActorRef` to send the event to.\r\n * @param event The event to send, or an expression that evaluates to the event to send\r\n * @param options Send action options\r\n * @returns An XState send action object\r\n */ function sendTo(actor, event, options) {\n    return send(event, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {\n        to: actor\n    }));\n}\n/**\r\n * Sends an update event to this machine's parent.\r\n */ function sendUpdate() {\n    return sendParent(_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.update);\n}\n/**\r\n * Sends an event back to the sender of the original event.\r\n *\r\n * @param event The event to send back to the sender\r\n * @param options Options to pass into the send event\r\n */ function respond(event, options) {\n    return send(event, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {\n        to: function(_, __, _a) {\n            var _event = _a._event;\n            return _event.origin; // TODO: handle when _event.origin is undefined\n        }\n    }));\n}\nvar defaultLogExpr = function(context, event) {\n    return {\n        context: context,\n        event: event\n    };\n};\n/**\r\n *\r\n * @param expr The expression function to evaluate which will be logged.\r\n *  Takes in 2 arguments:\r\n *  - `ctx` - the current state context\r\n *  - `event` - the event that caused this action to be executed.\r\n * @param label The label to give to the logged expression.\r\n */ function log(expr, label) {\n    if (expr === void 0) {\n        expr = defaultLogExpr;\n    }\n    return {\n        type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.log,\n        label: label,\n        expr: expr\n    };\n}\nvar resolveLog = function(action, ctx, _event) {\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, action), {\n        value: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action.expr) ? action.expr : action.expr(ctx, _event.data, {\n            _event: _event\n        })\n    });\n};\n/**\r\n * Cancels an in-flight `send(...)` action. A canceled sent action will not\r\n * be executed, nor will its event be sent, unless it has already been sent\r\n * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).\r\n *\r\n * @param sendId The `id` of the `send(...)` action to cancel.\r\n */ var cancel = function(sendId) {\n    return {\n        type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.cancel,\n        sendId: sendId\n    };\n};\n/**\r\n * Starts an activity.\r\n *\r\n * @param activity The activity to start.\r\n */ function start(activity) {\n    var activityDef = toActivityDefinition(activity);\n    return {\n        type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Start,\n        activity: activityDef,\n        exec: undefined\n    };\n}\n/**\r\n * Stops an activity.\r\n *\r\n * @param actorRef The activity to stop.\r\n */ function stop(actorRef) {\n    var activity = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(actorRef) ? actorRef : toActivityDefinition(actorRef);\n    return {\n        type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Stop,\n        activity: activity,\n        exec: undefined\n    };\n}\nfunction resolveStop(action, context, _event) {\n    var actorRefOrString = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.activity) ? action.activity(context, _event.data) : action.activity;\n    var resolvedActorRef = typeof actorRefOrString === \"string\" ? {\n        id: actorRefOrString\n    } : actorRefOrString;\n    var actionObject = {\n        type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Stop,\n        activity: resolvedActorRef\n    };\n    return actionObject;\n}\n/**\r\n * Updates the current context of the machine.\r\n *\r\n * @param assignment An object that represents the partial context to update.\r\n */ var assign = function(assignment) {\n    return {\n        type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.assign,\n        assignment: assignment\n    };\n};\nfunction isActionObject(action) {\n    return typeof action === \"object\" && \"type\" in action;\n}\n/**\r\n * Returns an event type that represents an implicit event that\r\n * is sent after the specified `delay`.\r\n *\r\n * @param delayRef The delay in milliseconds\r\n * @param id The state node ID where this event is handled\r\n */ function after(delayRef, id) {\n    var idSuffix = id ? \"#\".concat(id) : \"\";\n    return \"\".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.After, \"(\").concat(delayRef, \")\").concat(idSuffix);\n}\n/**\r\n * Returns an event that represents that a final state node\r\n * has been reached in the parent state node.\r\n *\r\n * @param id The final state node's parent state node `id`\r\n * @param data The data to pass into the event\r\n */ function done(id, data) {\n    var type = \"\".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.DoneState, \".\").concat(id);\n    var eventObject = {\n        type: type,\n        data: data\n    };\n    eventObject.toString = function() {\n        return type;\n    };\n    return eventObject;\n}\n/**\r\n * Returns an event that represents that an invoked service has terminated.\r\n *\r\n * An invoked service is terminated when it has reached a top-level final state node,\r\n * but not when it is canceled.\r\n *\r\n * @param id The final state node ID\r\n * @param data The data to pass into the event\r\n */ function doneInvoke(id, data) {\n    var type = \"\".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.DoneInvoke, \".\").concat(id);\n    var eventObject = {\n        type: type,\n        data: data\n    };\n    eventObject.toString = function() {\n        return type;\n    };\n    return eventObject;\n}\nfunction error(id, data) {\n    var type = \"\".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.ErrorPlatform, \".\").concat(id);\n    var eventObject = {\n        type: type,\n        data: data\n    };\n    eventObject.toString = function() {\n        return type;\n    };\n    return eventObject;\n}\nfunction pure(getActions) {\n    return {\n        type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Pure,\n        get: getActions\n    };\n}\n/**\r\n * Forwards (sends) an event to a specified service.\r\n *\r\n * @param target The target service to forward the event to.\r\n * @param options Options to pass into the send action creator.\r\n */ function forwardTo(target, options) {\n    if (!_environment_js__WEBPACK_IMPORTED_MODULE_4__.IS_PRODUCTION && (!target || typeof target === \"function\")) {\n        var originalTarget_1 = target;\n        target = function() {\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            var resolvedTarget = typeof originalTarget_1 === \"function\" ? originalTarget_1.apply(void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(args), false)) : originalTarget_1;\n            if (!resolvedTarget) {\n                throw new Error(\"Attempted to forward event to undefined actor. This risks an infinite loop in the sender.\");\n            }\n            return resolvedTarget;\n        };\n    }\n    return send(function(_, event) {\n        return event;\n    }, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {\n        to: target\n    }));\n}\n/**\r\n * Escalates an error by sending it as an event to this machine's parent.\r\n *\r\n * @param errorData The error data to send, or the expression function that\r\n * takes in the `context`, `event`, and `meta`, and returns the error data to send.\r\n * @param options Options to pass into the send action creator.\r\n */ function escalate(errorData, options) {\n    return sendParent(function(context, event, meta) {\n        return {\n            type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.error,\n            data: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(errorData) ? errorData(context, event, meta) : errorData\n        };\n    }, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {\n        to: _types_js__WEBPACK_IMPORTED_MODULE_3__.SpecialTargets.Parent\n    }));\n}\nfunction choose(conds) {\n    return {\n        type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Choose,\n        conds: conds\n    };\n}\nvar pluckAssigns = function(actionBlocks) {\n    var e_1, _a;\n    var assignActions = [];\n    try {\n        for(var actionBlocks_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(actionBlocks), actionBlocks_1_1 = actionBlocks_1.next(); !actionBlocks_1_1.done; actionBlocks_1_1 = actionBlocks_1.next()){\n            var block = actionBlocks_1_1.value;\n            var i = 0;\n            while(i < block.actions.length){\n                if (block.actions[i].type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.assign) {\n                    assignActions.push(block.actions[i]);\n                    block.actions.splice(i, 1);\n                    continue;\n                }\n                i++;\n            }\n        }\n    } catch (e_1_1) {\n        e_1 = {\n            error: e_1_1\n        };\n    } finally{\n        try {\n            if (actionBlocks_1_1 && !actionBlocks_1_1.done && (_a = actionBlocks_1.return)) _a.call(actionBlocks_1);\n        } finally{\n            if (e_1) throw e_1.error;\n        }\n    }\n    return assignActions;\n};\nfunction resolveActions(machine, currentState, currentContext, _event, actionBlocks, predictableExec, preserveActionOrder) {\n    if (preserveActionOrder === void 0) {\n        preserveActionOrder = false;\n    }\n    var assignActions = preserveActionOrder ? [] : pluckAssigns(actionBlocks);\n    var updatedContext = assignActions.length ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.updateContext)(currentContext, _event, assignActions, currentState) : currentContext;\n    var preservedContexts = preserveActionOrder ? [\n        currentContext\n    ] : undefined;\n    var deferredToBlockEnd = [];\n    function handleAction(blockType, actionObject) {\n        var _a;\n        switch(actionObject.type){\n            case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.raise:\n                {\n                    var raisedAction = resolveRaise(actionObject, updatedContext, _event, machine.options.delays);\n                    if (predictableExec && typeof raisedAction.delay === \"number\") {\n                        predictableExec(raisedAction, updatedContext, _event);\n                    }\n                    return raisedAction;\n                }\n            case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.send:\n                var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init\n                if (!_environment_js__WEBPACK_IMPORTED_MODULE_4__.IS_PRODUCTION) {\n                    var configuredDelay = actionObject.delay; // warn after resolving as we can create better contextual message here\n                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.warn)(!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(configuredDelay) || typeof sendAction.delay === \"number\", \"No delay reference for delay expression '\".concat(configuredDelay, \"' was found on machine '\").concat(machine.id, \"'\"));\n                }\n                if (predictableExec && sendAction.to !== _types_js__WEBPACK_IMPORTED_MODULE_3__.SpecialTargets.Internal) {\n                    if (blockType === \"entry\") {\n                        deferredToBlockEnd.push(sendAction);\n                    } else {\n                        predictableExec(sendAction, updatedContext, _event);\n                    }\n                }\n                return sendAction;\n            case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.log:\n                {\n                    var resolved = resolveLog(actionObject, updatedContext, _event);\n                    predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);\n                    return resolved;\n                }\n            case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.choose:\n                {\n                    var chooseAction = actionObject;\n                    var matchedActions = (_a = chooseAction.conds.find(function(condition) {\n                        var guard = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toGuard)(condition.cond, machine.options.guards);\n                        return !guard || (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.evaluateGuard)(machine, guard, updatedContext, _event, !predictableExec ? currentState : undefined);\n                    })) === null || _a === void 0 ? void 0 : _a.actions;\n                    if (!matchedActions) {\n                        return [];\n                    }\n                    var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolveActions(machine, currentState, updatedContext, _event, [\n                        {\n                            type: blockType,\n                            actions: toActionObjects((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toArray)(matchedActions), machine.options.actions)\n                        }\n                    ], predictableExec, preserveActionOrder), 2), resolvedActionsFromChoose = _b[0], resolvedContextFromChoose = _b[1];\n                    updatedContext = resolvedContextFromChoose;\n                    preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n                    return resolvedActionsFromChoose;\n                }\n            case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.pure:\n                {\n                    var matchedActions = actionObject.get(updatedContext, _event.data);\n                    if (!matchedActions) {\n                        return [];\n                    }\n                    var _c = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolveActions(machine, currentState, updatedContext, _event, [\n                        {\n                            type: blockType,\n                            actions: toActionObjects((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toArray)(matchedActions), machine.options.actions)\n                        }\n                    ], predictableExec, preserveActionOrder), 2), resolvedActionsFromPure = _c[0], resolvedContext = _c[1];\n                    updatedContext = resolvedContext;\n                    preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n                    return resolvedActionsFromPure;\n                }\n            case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.stop:\n                {\n                    var resolved = resolveStop(actionObject, updatedContext, _event);\n                    predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, currentContext, _event);\n                    return resolved;\n                }\n            case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.assign:\n                {\n                    updatedContext = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.updateContext)(updatedContext, _event, [\n                        actionObject\n                    ], !predictableExec ? currentState : undefined);\n                    preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n                    break;\n                }\n            default:\n                var resolvedActionObject = toActionObject(actionObject, machine.options.actions);\n                var exec_1 = resolvedActionObject.exec;\n                if (predictableExec) {\n                    predictableExec(resolvedActionObject, updatedContext, _event);\n                } else if (exec_1 && preservedContexts) {\n                    var contextIndex_1 = preservedContexts.length - 1;\n                    var wrapped = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, resolvedActionObject), {\n                        exec: function(_ctx) {\n                            var args = [];\n                            for(var _i = 1; _i < arguments.length; _i++){\n                                args[_i - 1] = arguments[_i];\n                            }\n                            exec_1.apply(void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n                                preservedContexts[contextIndex_1]\n                            ], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(args), false));\n                        }\n                    });\n                    resolvedActionObject = wrapped;\n                }\n                return resolvedActionObject;\n        }\n    }\n    function processBlock(block) {\n        var e_2, _a;\n        var resolvedActions = [];\n        try {\n            for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(block.actions), _c = _b.next(); !_c.done; _c = _b.next()){\n                var action = _c.value;\n                var resolved = handleAction(block.type, action);\n                if (resolved) {\n                    resolvedActions = resolvedActions.concat(resolved);\n                }\n            }\n        } catch (e_2_1) {\n            e_2 = {\n                error: e_2_1\n            };\n        } finally{\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally{\n                if (e_2) throw e_2.error;\n            }\n        }\n        deferredToBlockEnd.forEach(function(action) {\n            predictableExec(action, updatedContext, _event);\n        });\n        deferredToBlockEnd.length = 0;\n        return resolvedActions;\n    }\n    var resolvedActions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(actionBlocks.map(processBlock));\n    return [\n        resolvedActions,\n        updatedContext\n    ];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2FjdGlvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWlGO0FBQ3hCO0FBQ3FKO0FBQzlKO0FBQ3pCO0FBQzhJO0FBQ3BIO0FBRWpELElBQUl3QyxZQUFZLFdBQVcsR0FBRWIsdURBQVlBLENBQUM7SUFDeENjLE1BQU1uQyxpREFBSUE7QUFDWjtBQUNBLFNBQVNvQyxrQkFBa0JDLFVBQVUsRUFBRUMsaUJBQWlCO0lBQ3RELE9BQU9BLG9CQUFvQkEsaUJBQWlCLENBQUNELFdBQVcsSUFBSUUsWUFBWUE7QUFDMUU7QUFDQSxTQUFTQyxlQUFlQyxNQUFNLEVBQUVILGlCQUFpQjtJQUMvQyxJQUFJSTtJQUVKLElBQUlwQixtREFBUUEsQ0FBQ21CLFdBQVcsT0FBT0EsV0FBVyxVQUFVO1FBQ2xELElBQUlFLE9BQU9QLGtCQUFrQkssUUFBUUg7UUFFckMsSUFBSWYscURBQVVBLENBQUNvQixPQUFPO1lBQ3BCRCxlQUFlO2dCQUNiUCxNQUFNTTtnQkFDTkUsTUFBTUE7WUFDUjtRQUNGLE9BQU8sSUFBSUEsTUFBTTtZQUNmRCxlQUFlQztRQUNqQixPQUFPO1lBQ0xELGVBQWU7Z0JBQ2JQLE1BQU1NO2dCQUNORSxNQUFNSjtZQUNSO1FBQ0Y7SUFDRixPQUFPLElBQUloQixxREFBVUEsQ0FBQ2tCLFNBQVM7UUFDN0JDLGVBQWU7WUFDYixzQ0FBc0M7WUFDdENQLE1BQU1NLE9BQU9HLElBQUksSUFBSUgsT0FBT0ksUUFBUTtZQUNwQ0YsTUFBTUY7UUFDUjtJQUNGLE9BQU87UUFDTCxJQUFJRSxPQUFPUCxrQkFBa0JLLE9BQU9OLElBQUksRUFBRUc7UUFFMUMsSUFBSWYscURBQVVBLENBQUNvQixPQUFPO1lBQ3BCRCxlQUFlaEQsMkRBQVFBLENBQUNBLDJEQUFRQSxDQUFDLENBQUMsR0FBRytDLFNBQVM7Z0JBQzVDRSxNQUFNQTtZQUNSO1FBQ0YsT0FBTyxJQUFJ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QUN6QixJQUFJMkMsS0FBS2pHO1FBRVQsSUFBSWtHLGtCQUFrQixFQUFFO1FBRXhCLElBQUk7WUFDRixJQUFLLElBQUliLEtBQUtuSywyREFBUUEsQ0FBQ29JLE1BQU1sRixPQUFPLEdBQUdvSCxLQUFLSCxHQUFHaEMsSUFBSSxJQUFJLENBQUNtQyxHQUFHL0QsSUFBSSxFQUFFK0QsS0FBS0gsR0FBR2hDLElBQUksR0FBSTtnQkFDL0UsSUFBSXZGLFNBQVMwSCxHQUFHakYsS0FBSztnQkFDckIsSUFBSXNFLFdBQVdQLGFBQWFoQixNQUFNOUYsSUFBSSxFQUFFTTtnQkFFeEMsSUFBSStHLFVBQVU7b0JBQ1pxQixrQkFBa0JBLGdCQUFnQjNFLE1BQU0sQ0FBQ3NEO2dCQUMzQztZQUNGO1FBQ0YsRUFBRSxPQUFPc0IsT0FBTztZQUNkRixNQUFNO2dCQUNKaEssT0FBT2tLO1lBQ1Q7UUFDRixTQUFVO1lBQ1IsSUFBSTtnQkFDRixJQUFJWCxNQUFNLENBQUNBLEdBQUcvRCxJQUFJLElBQUt6QixDQUFBQSxLQUFLcUYsR0FBRzFCLE1BQU0sR0FBRzNELEdBQUc0RCxJQUFJLENBQUN5QjtZQUNsRCxTQUFVO2dCQUNSLElBQUlZLEtBQUssTUFBTUEsSUFBSWhLLEtBQUs7WUFDMUI7UUFDRjtRQUVBb0ksbUJBQW1CK0IsT0FBTyxDQUFDLFNBQVV0SSxNQUFNO1lBQ3pDbUcsZ0JBQWdCbkcsUUFBUXFHLGdCQUFnQnJGO1FBQzFDO1FBQ0F1RixtQkFBbUI3QixNQUFNLEdBQUc7UUFDNUIsT0FBTzBEO0lBQ1Q7SUFFQSxJQUFJQSxrQkFBa0JsSixrREFBT0EsQ0FBQ2dHLGFBQWEzRSxHQUFHLENBQUMySDtJQUMvQyxPQUFPO1FBQUNFO1FBQWlCL0I7S0FBZTtBQUMxQztBQUU4VSIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0bmV4dC8uL25vZGVfbW9kdWxlcy94c3RhdGUvZXMvYWN0aW9ucy5qcz82Yzk3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduLCBfX3NwcmVhZEFycmF5LCBfX3JlYWQsIF9fdmFsdWVzIH0gZnJvbSAnLi9fdmlydHVhbC9fdHNsaWIuanMnO1xuaW1wb3J0IHsgU3BlY2lhbFRhcmdldHMsIEFjdGlvblR5cGVzIH0gZnJvbSAnLi90eXBlcy5qcyc7XG5pbXBvcnQgeyBpbml0LCByYWlzZSBhcyByYWlzZSQxLCBzZW5kIGFzIHNlbmQkMSwgdXBkYXRlLCBsb2cgYXMgbG9nJDEsIGNhbmNlbCBhcyBjYW5jZWwkMSwgYXNzaWduIGFzIGFzc2lnbiQxLCBlcnJvciBhcyBlcnJvciQxLCBzdG9wIGFzIHN0b3AkMSwgcHVyZSBhcyBwdXJlJDEsIGNob29zZSBhcyBjaG9vc2UkMSB9IGZyb20gJy4vYWN0aW9uVHlwZXMuanMnO1xuaW1wb3J0ICogYXMgYWN0aW9uVHlwZXMgZnJvbSAnLi9hY3Rpb25UeXBlcy5qcyc7XG5leHBvcnQgeyBhY3Rpb25UeXBlcyB9O1xuaW1wb3J0IHsgdG9TQ1hNTEV2ZW50LCBpc1N0cmluZywgaXNGdW5jdGlvbiwgdG9FdmVudE9iamVjdCwgZ2V0RXZlbnRUeXBlLCB1cGRhdGVDb250ZXh0LCBmbGF0dGVuLCBpc0FycmF5LCB0b0FycmF5LCB0b0d1YXJkLCBldmFsdWF0ZUd1YXJkLCB3YXJuIH0gZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQgeyBJU19QUk9EVUNUSU9OIH0gZnJvbSAnLi9lbnZpcm9ubWVudC5qcyc7XG5cbnZhciBpbml0RXZlbnQgPSAvKiNfX1BVUkVfXyovdG9TQ1hNTEV2ZW50KHtcbiAgdHlwZTogaW5pdFxufSk7XG5mdW5jdGlvbiBnZXRBY3Rpb25GdW5jdGlvbihhY3Rpb25UeXBlLCBhY3Rpb25GdW5jdGlvbk1hcCkge1xuICByZXR1cm4gYWN0aW9uRnVuY3Rpb25NYXAgPyBhY3Rpb25GdW5jdGlvbk1hcFthY3Rpb25UeXBlXSB8fCB1bmRlZmluZWQgOiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiB0b0FjdGlvbk9iamVjdChhY3Rpb24sIGFjdGlvbkZ1bmN0aW9uTWFwKSB7XG4gIHZhciBhY3Rpb25PYmplY3Q7XG5cbiAgaWYgKGlzU3RyaW5nKGFjdGlvbikgfHwgdHlwZW9mIGFjdGlvbiA9PT0gJ251bWJlcicpIHtcbiAgICB2YXIgZXhlYyA9IGdldEFjdGlvbkZ1bmN0aW9uKGFjdGlvbiwgYWN0aW9uRnVuY3Rpb25NYXApO1xuXG4gICAgaWYgKGlzRnVuY3Rpb24oZXhlYykpIHtcbiAgICAgIGFjdGlvbk9iamVjdCA9IHtcbiAgICAgICAgdHlwZTogYWN0aW9uLFxuICAgICAgICBleGVjOiBleGVjXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZXhlYykge1xuICAgICAgYWN0aW9uT2JqZWN0ID0gZXhlYztcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aW9uT2JqZWN0ID0ge1xuICAgICAgICB0eXBlOiBhY3Rpb24sXG4gICAgICAgIGV4ZWM6IHVuZGVmaW5lZFxuICAgICAgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihhY3Rpb24pKSB7XG4gICAgYWN0aW9uT2JqZWN0ID0ge1xuICAgICAgLy8gQ29udmVydCBhY3Rpb24gdG8gc3RyaW5nIGlmIHVubmFtZWRcbiAgICAgIHR5cGU6IGFjdGlvbi5uYW1lIHx8IGFjdGlvbi50b1N0cmluZygpLFxuICAgICAgZXhlYzogYWN0aW9uXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZXhlYyA9IGdldEFjdGlvbkZ1bmN0aW9uKGFjdGlvbi50eXBlLCBhY3Rpb25GdW5jdGlvbk1hcCk7XG5cbiAgICBpZiAoaXNGdW5jdGlvbihleGVjKSkge1xuICAgICAgYWN0aW9uT2JqZWN0ID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGFjdGlvbiksIHtcbiAgICAgICAgZXhlYzogZXhlY1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChleGVjKSB7XG4gICAgICB2YXIgYWN0aW9uVHlwZSA9IGV4ZWMudHlwZSB8fCBhY3Rpb24udHlwZTtcbiAgICAgIGFjdGlvbk9iamVjdCA9IF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKHt9LCBleGVjKSwgYWN0aW9uKSwge1xuICAgICAgICB0eXBlOiBhY3Rpb25UeXBlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aW9uT2JqZWN0ID0gYWN0aW9uO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhY3Rpb25PYmplY3Q7XG59XG52YXIgdG9BY3Rpb25PYmplY3RzID0gZnVuY3Rpb24gKGFjdGlvbiwgYWN0aW9uRnVuY3Rpb25NYXApIHtcbiAgaWYgKCFhY3Rpb24pIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICB2YXIgYWN0aW9ucyA9IGlzQXJyYXkoYWN0aW9uKSA/IGFjdGlvbiA6IFthY3Rpb25dO1xuICByZXR1cm4gYWN0aW9ucy5tYXAoZnVuY3Rpb24gKHN1YkFjdGlvbikge1xuICAgIHJldHVybiB0b0FjdGlvbk9iamVjdChzdWJBY3Rpb24sIGFjdGlvbkZ1bmN0aW9uTWFwKTtcbiAgfSk7XG59O1xuZnVuY3Rpb24gdG9BY3Rpdml0eURlZmluaXRpb24oYWN0aW9uKSB7XG4gIHZhciBhY3Rpb25PYmplY3QgPSB0b0FjdGlvbk9iamVjdChhY3Rpb24pO1xuICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe1xuICAgIGlkOiBpc1N0cmluZyhhY3Rpb24pID8gYWN0aW9uIDogYWN0aW9uT2JqZWN0LmlkXG4gIH0sIGFjdGlvbk9iamVjdCksIHtcbiAgICB0eXBlOiBhY3Rpb25PYmplY3QudHlwZVxuICB9KTtcbn1cbi8qKlxyXG4gKiBSYWlzZXMgYW4gZXZlbnQuIFRoaXMgcGxhY2VzIHRoZSBldmVudCBpbiB0aGUgaW50ZXJuYWwgZXZlbnQgcXVldWUsIHNvIHRoYXRcclxuICogdGhlIGV2ZW50IGlzIGltbWVkaWF0ZWx5IGNvbnN1bWVkIGJ5IHRoZSBtYWNoaW5lIGluIHRoZSBjdXJyZW50IHN0ZXAuXHJcbiAqXHJcbiAqIEBwYXJhbSBldmVudFR5cGUgVGhlIGV2ZW50IHRvIHJhaXNlLlxyXG4gKi9cblxuZnVuY3Rpb24gcmFpc2UoZXZlbnQsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiByYWlzZSQxLFxuICAgIGV2ZW50OiB0eXBlb2YgZXZlbnQgPT09ICdmdW5jdGlvbicgPyBldmVudCA6IHRvRXZlbnRPYmplY3QoZXZlbnQpLFxuICAgIGRlbGF5OiBvcHRpb25zID8gb3B0aW9ucy5kZWxheSA6IHVuZGVmaW5lZCxcbiAgICBpZDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmlkXG4gIH07XG59XG5mdW5jdGlvbiByZXNvbHZlUmFpc2UoYWN0aW9uLCBjdHgsIF9ldmVudCwgZGVsYXlzTWFwKSB7XG4gIHZhciBtZXRhID0ge1xuICAgIF9ldmVudDogX2V2ZW50XG4gIH07XG4gIHZhciByZXNvbHZlZEV2ZW50ID0gdG9TQ1hNTEV2ZW50KGlzRnVuY3Rpb24oYWN0aW9uLmV2ZW50KSA/IGFjdGlvbi5ldmVudChjdHgsIF9ldmVudC5kYXRhLCBtZXRhKSA6IGFjdGlvbi5ldmVudCk7XG4gIHZhciByZXNvbHZlZERlbGF5O1xuXG4gIGlmIChpc1N0cmluZyhhY3Rpb24uZGVsYXkpKSB7XG4gICAgdmFyIGNvbmZpZ0RlbGF5ID0gZGVsYXlzTWFwICYmIGRlbGF5c01hcFthY3Rpb24uZGVsYXldO1xuICAgIHJlc29sdmVkRGVsYXkgPSBpc0Z1bmN0aW9uKGNvbmZpZ0RlbGF5KSA/IGNvbmZpZ0RlbGF5KGN0eCwgX2V2ZW50LmRhdGEsIG1ldGEpIDogY29uZmlnRGVsYXk7XG4gIH0gZWxzZSB7XG4gICAgcmVzb2x2ZWREZWxheSA9IGlzRnVuY3Rpb24oYWN0aW9uLmRlbGF5KSA/IGFjdGlvbi5kZWxheShjdHgsIF9ldmVudC5kYXRhLCBtZXRhKSA6IGFjdGlvbi5kZWxheTtcbiAgfVxuXG4gIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgYWN0aW9uKSwge1xuICAgIHR5cGU6IHJhaXNlJDEsXG4gICAgX2V2ZW50OiByZXNvbHZlZEV2ZW50LFxuICAgIGRlbGF5OiByZXNvbHZlZERlbGF5XG4gIH0pO1xufVxuLyoqXHJcbiAqIFNlbmRzIGFuIGV2ZW50LiBUaGlzIHJldHVybnMgYW4gYWN0aW9uIHRoYXQgd2lsbCBiZSByZWFkIGJ5IGFuIGludGVycHJldGVyIHRvXHJcbiAqIHNlbmQgdGhlIGV2ZW50IGluIHRoZSBuZXh0IHN0ZXAsIGFmdGVyIHRoZSBjdXJyZW50IHN0ZXAgaXMgZmluaXNoZWQgZXhlY3V0aW5nLlxyXG4gKlxyXG4gKiBAZGVwcmVjYXRlZCBVc2UgdGhlIGBzZW5kVG8oLi4uKWAgYWN0aW9uIGNyZWF0b3IgaW5zdGVhZC5cclxuICpcclxuICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0byBzZW5kLlxyXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIHRvIHBhc3MgaW50byB0aGUgc2VuZCBldmVudDpcclxuICogIC0gYGlkYCAtIFRoZSB1bmlxdWUgc2VuZCBldmVudCBpZGVudGlmaWVyICh1c2VkIHdpdGggYGNhbmNlbCgpYCkuXHJcbiAqICAtIGBkZWxheWAgLSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSB0aGUgc2VuZGluZyBvZiB0aGUgZXZlbnQuXHJcbiAqICAtIGB0b2AgLSBUaGUgdGFyZ2V0IG9mIHRoaXMgZXZlbnQgKGJ5IGRlZmF1bHQsIHRoZSBtYWNoaW5lIHRoZSBldmVudCB3YXMgc2VudCBmcm9tKS5cclxuICovXG5cbmZ1bmN0aW9uIHNlbmQoZXZlbnQsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHtcbiAgICB0bzogb3B0aW9ucyA/IG9wdGlvbnMudG8gOiB1bmRlZmluZWQsXG4gICAgdHlwZTogc2VuZCQxLFxuICAgIGV2ZW50OiBpc0Z1bmN0aW9uKGV2ZW50KSA/IGV2ZW50IDogdG9FdmVudE9iamVjdChldmVudCksXG4gICAgZGVsYXk6IG9wdGlvbnMgPyBvcHRpb25zLmRlbGF5IDogdW5kZWZpbmVkLFxuICAgIC8vIFRPRE86IGRvbid0IGF1dG8tZ2VuZXJhdGUgSURzIGhlcmUgbGlrZSB0aGF0XG4gICAgLy8gdGhlcmUgaXMgdG9vIGJpZyBjaGFuY2Ugb2YgdGhlIElEIGNvbGxpc2lvblxuICAgIGlkOiBvcHRpb25zICYmIG9wdGlvbnMuaWQgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuaWQgOiBpc0Z1bmN0aW9uKGV2ZW50KSA/IGV2ZW50Lm5hbWUgOiBnZXRFdmVudFR5cGUoZXZlbnQpXG4gIH07XG59XG5mdW5jdGlvbiByZXNvbHZlU2VuZChhY3Rpb24sIGN0eCwgX2V2ZW50LCBkZWxheXNNYXApIHtcbiAgdmFyIG1ldGEgPSB7XG4gICAgX2V2ZW50OiBfZXZlbnRcbiAgfTsgLy8gVE9ETzogaGVscGVyIGZ1bmN0aW9uIGZvciByZXNvbHZpbmcgRXhwclxuXG4gIHZhciByZXNvbHZlZEV2ZW50ID0gdG9TQ1hNTEV2ZW50KGlzRnVuY3Rpb24oYWN0aW9uLmV2ZW50KSA/IGFjdGlvbi5ldmVudChjdHgsIF9ldmVudC5kYXRhLCBtZXRhKSA6IGFjdGlvbi5ldmVudCk7XG4gIHZhciByZXNvbHZlZERlbGF5O1xuXG4gIGlmIChpc1N0cmluZyhhY3Rpb24uZGVsYXkpKSB7XG4gICAgdmFyIGNvbmZpZ0RlbGF5ID0gZGVsYXlzTWFwICYmIGRlbGF5c01hcFthY3Rpb24uZGVsYXldO1xuICAgIHJlc29sdmVkRGVsYXkgPSBpc0Z1bmN0aW9uKGNvbmZpZ0RlbGF5KSA/IGNvbmZpZ0RlbGF5KGN0eCwgX2V2ZW50LmRhdGEsIG1ldGEpIDogY29uZmlnRGVsYXk7XG4gIH0gZWxzZSB7XG4gICAgcmVzb2x2ZWREZWxheSA9IGlzRnVuY3Rpb24oYWN0aW9uLmRlbGF5KSA/IGFjdGlvbi5kZWxheShjdHgsIF9ldmVudC5kYXRhLCBtZXRhKSA6IGFjdGlvbi5kZWxheTtcbiAgfVxuXG4gIHZhciByZXNvbHZlZFRhcmdldCA9IGlzRnVuY3Rpb24oYWN0aW9uLnRvKSA/IGFjdGlvbi50byhjdHgsIF9ldmVudC5kYXRhLCBtZXRhKSA6IGFjdGlvbi50bztcbiAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBhY3Rpb24pLCB7XG4gICAgdG86IHJlc29sdmVkVGFyZ2V0LFxuICAgIF9ldmVudDogcmVzb2x2ZWRFdmVudCxcbiAgICBldmVudDogcmVzb2x2ZWRFdmVudC5kYXRhLFxuICAgIGRlbGF5OiByZXNvbHZlZERlbGF5XG4gIH0pO1xufVxuLyoqXHJcbiAqIFNlbmRzIGFuIGV2ZW50IHRvIHRoaXMgbWFjaGluZSdzIHBhcmVudC5cclxuICpcclxuICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0byBzZW5kIHRvIHRoZSBwYXJlbnQgbWFjaGluZS5cclxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyB0byBwYXNzIGludG8gdGhlIHNlbmQgZXZlbnQuXHJcbiAqL1xuXG5mdW5jdGlvbiBzZW5kUGFyZW50KGV2ZW50LCBvcHRpb25zKSB7XG4gIHJldHVybiBzZW5kKGV2ZW50LCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb3B0aW9ucyksIHtcbiAgICB0bzogU3BlY2lhbFRhcmdldHMuUGFyZW50XG4gIH0pKTtcbn1cbi8qKlxyXG4gKiBTZW5kcyBhbiBldmVudCB0byBhbiBhY3Rvci5cclxuICpcclxuICogQHBhcmFtIGFjdG9yIFRoZSBgQWN0b3JSZWZgIHRvIHNlbmQgdGhlIGV2ZW50IHRvLlxyXG4gKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IHRvIHNlbmQsIG9yIGFuIGV4cHJlc3Npb24gdGhhdCBldmFsdWF0ZXMgdG8gdGhlIGV2ZW50IHRvIHNlbmRcclxuICogQHBhcmFtIG9wdGlvbnMgU2VuZCBhY3Rpb24gb3B0aW9uc1xyXG4gKiBAcmV0dXJucyBBbiBYU3RhdGUgc2VuZCBhY3Rpb24gb2JqZWN0XHJcbiAqL1xuXG5mdW5jdGlvbiBzZW5kVG8oYWN0b3IsIGV2ZW50LCBvcHRpb25zKSB7XG4gIHJldHVybiBzZW5kKGV2ZW50LCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb3B0aW9ucyksIHtcbiAgICB0bzogYWN0b3JcbiAgfSkpO1xufVxuLyoqXHJcbiAqIFNlbmRzIGFuIHVwZGF0ZSBldmVudCB0byB0aGlzIG1hY2hpbmUncyBwYXJlbnQuXHJcbiAqL1xuXG5mdW5jdGlvbiBzZW5kVXBkYXRlKCkge1xuICByZXR1cm4gc2VuZFBhcmVudCh1cGRhdGUpO1xufVxuLyoqXHJcbiAqIFNlbmRzIGFuIGV2ZW50IGJhY2sgdG8gdGhlIHNlbmRlciBvZiB0aGUgb3JpZ2luYWwgZXZlbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgdG8gc2VuZCBiYWNrIHRvIHRoZSBzZW5kZXJcclxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyB0byBwYXNzIGludG8gdGhlIHNlbmQgZXZlbnRcclxuICovXG5cbmZ1bmN0aW9uIHJlc3BvbmQoZXZlbnQsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHNlbmQoZXZlbnQsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRpb25zKSwge1xuICAgIHRvOiBmdW5jdGlvbiAoXywgX18sIF9hKSB7XG4gICAgICB2YXIgX2V2ZW50ID0gX2EuX2V2ZW50O1xuICAgICAgcmV0dXJuIF9ldmVudC5vcmlnaW47IC8vIFRPRE86IGhhbmRsZSB3aGVuIF9ldmVudC5vcmlnaW4gaXMgdW5kZWZpbmVkXG4gICAgfVxuICB9KSk7XG59XG5cbnZhciBkZWZhdWx0TG9nRXhwciA9IGZ1bmN0aW9uIChjb250ZXh0LCBldmVudCkge1xuICByZXR1cm4ge1xuICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgZXZlbnQ6IGV2ZW50XG4gIH07XG59O1xuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSBleHByIFRoZSBleHByZXNzaW9uIGZ1bmN0aW9uIHRvIGV2YWx1YXRlIHdoaWNoIHdpbGwgYmUgbG9nZ2VkLlxyXG4gKiAgVGFrZXMgaW4gMiBhcmd1bWVudHM6XHJcbiAqICAtIGBjdHhgIC0gdGhlIGN1cnJlbnQgc3RhdGUgY29udGV4dFxyXG4gKiAgLSBgZXZlbnRgIC0gdGhlIGV2ZW50IHRoYXQgY2F1c2VkIHRoaXMgYWN0aW9uIHRvIGJlIGV4ZWN1dGVkLlxyXG4gKiBAcGFyYW0gbGFiZWwgVGhlIGxhYmVsIHRvIGdpdmUgdG8gdGhlIGxvZ2dlZCBleHByZXNzaW9uLlxyXG4gKi9cblxuXG5mdW5jdGlvbiBsb2coZXhwciwgbGFiZWwpIHtcbiAgaWYgKGV4cHIgPT09IHZvaWQgMCkge1xuICAgIGV4cHIgPSBkZWZhdWx0TG9nRXhwcjtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHlwZTogbG9nJDEsXG4gICAgbGFiZWw6IGxhYmVsLFxuICAgIGV4cHI6IGV4cHJcbiAgfTtcbn1cbnZhciByZXNvbHZlTG9nID0gZnVuY3Rpb24gKGFjdGlvbiwgY3R4LCBfZXZlbnQpIHtcbiAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBhY3Rpb24pLCB7XG4gICAgdmFsdWU6IGlzU3RyaW5nKGFjdGlvbi5leHByKSA/IGFjdGlvbi5leHByIDogYWN0aW9uLmV4cHIoY3R4LCBfZXZlbnQuZGF0YSwge1xuICAgICAgX2V2ZW50OiBfZXZlbnRcbiAgICB9KVxuICB9KTtcbn07XG4vKipcclxuICogQ2FuY2VscyBhbiBpbi1mbGlnaHQgYHNlbmQoLi4uKWAgYWN0aW9uLiBBIGNhbmNlbGVkIHNlbnQgYWN0aW9uIHdpbGwgbm90XHJcbiAqIGJlIGV4ZWN1dGVkLCBub3Igd2lsbCBpdHMgZXZlbnQgYmUgc2VudCwgdW5sZXNzIGl0IGhhcyBhbHJlYWR5IGJlZW4gc2VudFxyXG4gKiAoZS5nLiwgaWYgYGNhbmNlbCguLi4pYCBpcyBjYWxsZWQgYWZ0ZXIgdGhlIGBzZW5kKC4uLilgIGFjdGlvbidzIGBkZWxheWApLlxyXG4gKlxyXG4gKiBAcGFyYW0gc2VuZElkIFRoZSBgaWRgIG9mIHRoZSBgc2VuZCguLi4pYCBhY3Rpb24gdG8gY2FuY2VsLlxyXG4gKi9cblxudmFyIGNhbmNlbCA9IGZ1bmN0aW9uIChzZW5kSWQpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBjYW5jZWwkMSxcbiAgICBzZW5kSWQ6IHNlbmRJZFxuICB9O1xufTtcbi8qKlxyXG4gKiBTdGFydHMgYW4gYWN0aXZpdHkuXHJcbiAqXHJcbiAqIEBwYXJhbSBhY3Rpdml0eSBUaGUgYWN0aXZpdHkgdG8gc3RhcnQuXHJcbiAqL1xuXG5mdW5jdGlvbiBzdGFydChhY3Rpdml0eSkge1xuICB2YXIgYWN0aXZpdHlEZWYgPSB0b0FjdGl2aXR5RGVmaW5pdGlvbihhY3Rpdml0eSk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuU3RhcnQsXG4gICAgYWN0aXZpdHk6IGFjdGl2aXR5RGVmLFxuICAgIGV4ZWM6IHVuZGVmaW5lZFxuICB9O1xufVxuLyoqXHJcbiAqIFN0b3BzIGFuIGFjdGl2aXR5LlxyXG4gKlxyXG4gKiBAcGFyYW0gYWN0b3JSZWYgVGhlIGFjdGl2aXR5IHRvIHN0b3AuXHJcbiAqL1xuXG5mdW5jdGlvbiBzdG9wKGFjdG9yUmVmKSB7XG4gIHZhciBhY3Rpdml0eSA9IGlzRnVuY3Rpb24oYWN0b3JSZWYpID8gYWN0b3JSZWYgOiB0b0FjdGl2aXR5RGVmaW5pdGlvbihhY3RvclJlZik7XG4gIHJldHVybiB7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuU3RvcCxcbiAgICBhY3Rpdml0eTogYWN0aXZpdHksXG4gICAgZXhlYzogdW5kZWZpbmVkXG4gIH07XG59XG5mdW5jdGlvbiByZXNvbHZlU3RvcChhY3Rpb24sIGNvbnRleHQsIF9ldmVudCkge1xuICB2YXIgYWN0b3JSZWZPclN0cmluZyA9IGlzRnVuY3Rpb24oYWN0aW9uLmFjdGl2aXR5KSA/IGFjdGlvbi5hY3Rpdml0eShjb250ZXh0LCBfZXZlbnQuZGF0YSkgOiBhY3Rpb24uYWN0aXZpdHk7XG4gIHZhciByZXNvbHZlZEFjdG9yUmVmID0gdHlwZW9mIGFjdG9yUmVmT3JTdHJpbmcgPT09ICdzdHJpbmcnID8ge1xuICAgIGlkOiBhY3RvclJlZk9yU3RyaW5nXG4gIH0gOiBhY3RvclJlZk9yU3RyaW5nO1xuICB2YXIgYWN0aW9uT2JqZWN0ID0ge1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLlN0b3AsXG4gICAgYWN0aXZpdHk6IHJlc29sdmVkQWN0b3JSZWZcbiAgfTtcbiAgcmV0dXJuIGFjdGlvbk9iamVjdDtcbn1cbi8qKlxyXG4gKiBVcGRhdGVzIHRoZSBjdXJyZW50IGNvbnRleHQgb2YgdGhlIG1hY2hpbmUuXHJcbiAqXHJcbiAqIEBwYXJhbSBhc3NpZ25tZW50IEFuIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHBhcnRpYWwgY29udGV4dCB0byB1cGRhdGUuXHJcbiAqL1xuXG52YXIgYXNzaWduID0gZnVuY3Rpb24gKGFzc2lnbm1lbnQpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBhc3NpZ24kMSxcbiAgICBhc3NpZ25tZW50OiBhc3NpZ25tZW50XG4gIH07XG59O1xuZnVuY3Rpb24gaXNBY3Rpb25PYmplY3QoYWN0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgYWN0aW9uID09PSAnb2JqZWN0JyAmJiAndHlwZScgaW4gYWN0aW9uO1xufVxuLyoqXHJcbiAqIFJldHVybnMgYW4gZXZlbnQgdHlwZSB0aGF0IHJlcHJlc2VudHMgYW4gaW1wbGljaXQgZXZlbnQgdGhhdFxyXG4gKiBpcyBzZW50IGFmdGVyIHRoZSBzcGVjaWZpZWQgYGRlbGF5YC5cclxuICpcclxuICogQHBhcmFtIGRlbGF5UmVmIFRoZSBkZWxheSBpbiBtaWxsaXNlY29uZHNcclxuICogQHBhcmFtIGlkIFRoZSBzdGF0ZSBub2RlIElEIHdoZXJlIHRoaXMgZXZlbnQgaXMgaGFuZGxlZFxyXG4gKi9cblxuZnVuY3Rpb24gYWZ0ZXIoZGVsYXlSZWYsIGlkKSB7XG4gIHZhciBpZFN1ZmZpeCA9IGlkID8gXCIjXCIuY29uY2F0KGlkKSA6ICcnO1xuICByZXR1cm4gXCJcIi5jb25jYXQoQWN0aW9uVHlwZXMuQWZ0ZXIsIFwiKFwiKS5jb25jYXQoZGVsYXlSZWYsIFwiKVwiKS5jb25jYXQoaWRTdWZmaXgpO1xufVxuLyoqXHJcbiAqIFJldHVybnMgYW4gZXZlbnQgdGhhdCByZXByZXNlbnRzIHRoYXQgYSBmaW5hbCBzdGF0ZSBub2RlXHJcbiAqIGhhcyBiZWVuIHJlYWNoZWQgaW4gdGhlIHBhcmVudCBzdGF0ZSBub2RlLlxyXG4gKlxyXG4gKiBAcGFyYW0gaWQgVGhlIGZpbmFsIHN0YXRlIG5vZGUncyBwYXJlbnQgc3RhdGUgbm9kZSBgaWRgXHJcbiAqIEBwYXJhbSBkYXRhIFRoZSBkYXRhIHRvIHBhc3MgaW50byB0aGUgZXZlbnRcclxuICovXG5cbmZ1bmN0aW9uIGRvbmUoaWQsIGRhdGEpIHtcbiAgdmFyIHR5cGUgPSBcIlwiLmNvbmNhdChBY3Rpb25UeXBlcy5Eb25lU3RhdGUsIFwiLlwiKS5jb25jYXQoaWQpO1xuICB2YXIgZXZlbnRPYmplY3QgPSB7XG4gICAgdHlwZTogdHlwZSxcbiAgICBkYXRhOiBkYXRhXG4gIH07XG5cbiAgZXZlbnRPYmplY3QudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHR5cGU7XG4gIH07XG5cbiAgcmV0dXJuIGV2ZW50T2JqZWN0O1xufVxuLyoqXHJcbiAqIFJldHVybnMgYW4gZXZlbnQgdGhhdCByZXByZXNlbnRzIHRoYXQgYW4gaW52b2tlZCBzZXJ2aWNlIGhhcyB0ZXJtaW5hdGVkLlxyXG4gKlxyXG4gKiBBbiBpbnZva2VkIHNlcnZpY2UgaXMgdGVybWluYXRlZCB3aGVuIGl0IGhhcyByZWFjaGVkIGEgdG9wLWxldmVsIGZpbmFsIHN0YXRlIG5vZGUsXHJcbiAqIGJ1dCBub3Qgd2hlbiBpdCBpcyBjYW5jZWxlZC5cclxuICpcclxuICogQHBhcmFtIGlkIFRoZSBmaW5hbCBzdGF0ZSBub2RlIElEXHJcbiAqIEBwYXJhbSBkYXRhIFRoZSBkYXRhIHRvIHBhc3MgaW50byB0aGUgZXZlbnRcclxuICovXG5cbmZ1bmN0aW9uIGRvbmVJbnZva2UoaWQsIGRhdGEpIHtcbiAgdmFyIHR5cGUgPSBcIlwiLmNvbmNhdChBY3Rpb25UeXBlcy5Eb25lSW52b2tlLCBcIi5cIikuY29uY2F0KGlkKTtcbiAgdmFyIGV2ZW50T2JqZWN0ID0ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgZGF0YTogZGF0YVxuICB9O1xuXG4gIGV2ZW50T2JqZWN0LnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0eXBlO1xuICB9O1xuXG4gIHJldHVybiBldmVudE9iamVjdDtcbn1cbmZ1bmN0aW9uIGVycm9yKGlkLCBkYXRhKSB7XG4gIHZhciB0eXBlID0gXCJcIi5jb25jYXQoQWN0aW9uVHlwZXMuRXJyb3JQbGF0Zm9ybSwgXCIuXCIpLmNvbmNhdChpZCk7XG4gIHZhciBldmVudE9iamVjdCA9IHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIGRhdGE6IGRhdGFcbiAgfTtcblxuICBldmVudE9iamVjdC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHlwZTtcbiAgfTtcblxuICByZXR1cm4gZXZlbnRPYmplY3Q7XG59XG5mdW5jdGlvbiBwdXJlKGdldEFjdGlvbnMpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBBY3Rpb25UeXBlcy5QdXJlLFxuICAgIGdldDogZ2V0QWN0aW9uc1xuICB9O1xufVxuLyoqXHJcbiAqIEZvcndhcmRzIChzZW5kcykgYW4gZXZlbnQgdG8gYSBzcGVjaWZpZWQgc2VydmljZS5cclxuICpcclxuICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IHNlcnZpY2UgdG8gZm9yd2FyZCB0aGUgZXZlbnQgdG8uXHJcbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgdG8gcGFzcyBpbnRvIHRoZSBzZW5kIGFjdGlvbiBjcmVhdG9yLlxyXG4gKi9cblxuZnVuY3Rpb24gZm9yd2FyZFRvKHRhcmdldCwgb3B0aW9ucykge1xuICBpZiAoIUlTX1BST0RVQ1RJT04gJiYgKCF0YXJnZXQgfHwgdHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykpIHtcbiAgICB2YXIgb3JpZ2luYWxUYXJnZXRfMSA9IHRhcmdldDtcblxuICAgIHRhcmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBhcmdzID0gW107XG5cbiAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc29sdmVkVGFyZ2V0ID0gdHlwZW9mIG9yaWdpbmFsVGFyZ2V0XzEgPT09ICdmdW5jdGlvbicgPyBvcmlnaW5hbFRhcmdldF8xLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGFyZ3MpLCBmYWxzZSkpIDogb3JpZ2luYWxUYXJnZXRfMTtcblxuICAgICAgaWYgKCFyZXNvbHZlZFRhcmdldCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdHRlbXB0ZWQgdG8gZm9yd2FyZCBldmVudCB0byB1bmRlZmluZWQgYWN0b3IuIFRoaXMgcmlza3MgYW4gaW5maW5pdGUgbG9vcCBpbiB0aGUgc2VuZGVyLlwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc29sdmVkVGFyZ2V0O1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gc2VuZChmdW5jdGlvbiAoXywgZXZlbnQpIHtcbiAgICByZXR1cm4gZXZlbnQ7XG4gIH0sIF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRpb25zKSwge1xuICAgIHRvOiB0YXJnZXRcbiAgfSkpO1xufVxuLyoqXHJcbiAqIEVzY2FsYXRlcyBhbiBlcnJvciBieSBzZW5kaW5nIGl0IGFzIGFuIGV2ZW50IHRvIHRoaXMgbWFjaGluZSdzIHBhcmVudC5cclxuICpcclxuICogQHBhcmFtIGVycm9yRGF0YSBUaGUgZXJyb3IgZGF0YSB0byBzZW5kLCBvciB0aGUgZXhwcmVzc2lvbiBmdW5jdGlvbiB0aGF0XHJcbiAqIHRha2VzIGluIHRoZSBgY29udGV4dGAsIGBldmVudGAsIGFuZCBgbWV0YWAsIGFuZCByZXR1cm5zIHRoZSBlcnJvciBkYXRhIHRvIHNlbmQuXHJcbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgdG8gcGFzcyBpbnRvIHRoZSBzZW5kIGFjdGlvbiBjcmVhdG9yLlxyXG4gKi9cblxuZnVuY3Rpb24gZXNjYWxhdGUoZXJyb3JEYXRhLCBvcHRpb25zKSB7XG4gIHJldHVybiBzZW5kUGFyZW50KGZ1bmN0aW9uIChjb250ZXh0LCBldmVudCwgbWV0YSkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBlcnJvciQxLFxuICAgICAgZGF0YTogaXNGdW5jdGlvbihlcnJvckRhdGEpID8gZXJyb3JEYXRhKGNvbnRleHQsIGV2ZW50LCBtZXRhKSA6IGVycm9yRGF0YVxuICAgIH07XG4gIH0sIF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRpb25zKSwge1xuICAgIHRvOiBTcGVjaWFsVGFyZ2V0cy5QYXJlbnRcbiAgfSkpO1xufVxuZnVuY3Rpb24gY2hvb3NlKGNvbmRzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuQ2hvb3NlLFxuICAgIGNvbmRzOiBjb25kc1xuICB9O1xufVxuXG52YXIgcGx1Y2tBc3NpZ25zID0gZnVuY3Rpb24gKGFjdGlvbkJsb2Nrcykge1xuICB2YXIgZV8xLCBfYTtcblxuICB2YXIgYXNzaWduQWN0aW9ucyA9IFtdO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgYWN0aW9uQmxvY2tzXzEgPSBfX3ZhbHVlcyhhY3Rpb25CbG9ja3MpLCBhY3Rpb25CbG9ja3NfMV8xID0gYWN0aW9uQmxvY2tzXzEubmV4dCgpOyAhYWN0aW9uQmxvY2tzXzFfMS5kb25lOyBhY3Rpb25CbG9ja3NfMV8xID0gYWN0aW9uQmxvY2tzXzEubmV4dCgpKSB7XG4gICAgICB2YXIgYmxvY2sgPSBhY3Rpb25CbG9ja3NfMV8xLnZhbHVlO1xuICAgICAgdmFyIGkgPSAwO1xuXG4gICAgICB3aGlsZSAoaSA8IGJsb2NrLmFjdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgIGlmIChibG9jay5hY3Rpb25zW2ldLnR5cGUgPT09IGFzc2lnbiQxKSB7XG4gICAgICAgICAgYXNzaWduQWN0aW9ucy5wdXNoKGJsb2NrLmFjdGlvbnNbaV0pO1xuICAgICAgICAgIGJsb2NrLmFjdGlvbnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZV8xXzEpIHtcbiAgICBlXzEgPSB7XG4gICAgICBlcnJvcjogZV8xXzFcbiAgICB9O1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoYWN0aW9uQmxvY2tzXzFfMSAmJiAhYWN0aW9uQmxvY2tzXzFfMS5kb25lICYmIChfYSA9IGFjdGlvbkJsb2Nrc18xLnJldHVybikpIF9hLmNhbGwoYWN0aW9uQmxvY2tzXzEpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFzc2lnbkFjdGlvbnM7XG59O1xuXG5mdW5jdGlvbiByZXNvbHZlQWN0aW9ucyhtYWNoaW5lLCBjdXJyZW50U3RhdGUsIGN1cnJlbnRDb250ZXh0LCBfZXZlbnQsIGFjdGlvbkJsb2NrcywgcHJlZGljdGFibGVFeGVjLCBwcmVzZXJ2ZUFjdGlvbk9yZGVyKSB7XG4gIGlmIChwcmVzZXJ2ZUFjdGlvbk9yZGVyID09PSB2b2lkIDApIHtcbiAgICBwcmVzZXJ2ZUFjdGlvbk9yZGVyID0gZmFsc2U7XG4gIH1cblxuICB2YXIgYXNzaWduQWN0aW9ucyA9IHByZXNlcnZlQWN0aW9uT3JkZXIgPyBbXSA6IHBsdWNrQXNzaWducyhhY3Rpb25CbG9ja3MpO1xuICB2YXIgdXBkYXRlZENvbnRleHQgPSBhc3NpZ25BY3Rpb25zLmxlbmd0aCA/IHVwZGF0ZUNvbnRleHQoY3VycmVudENvbnRleHQsIF9ldmVudCwgYXNzaWduQWN0aW9ucywgY3VycmVudFN0YXRlKSA6IGN1cnJlbnRDb250ZXh0O1xuICB2YXIgcHJlc2VydmVkQ29udGV4dHMgPSBwcmVzZXJ2ZUFjdGlvbk9yZGVyID8gW2N1cnJlbnRDb250ZXh0XSA6IHVuZGVmaW5lZDtcbiAgdmFyIGRlZmVycmVkVG9CbG9ja0VuZCA9IFtdO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUFjdGlvbihibG9ja1R5cGUsIGFjdGlvbk9iamVjdCkge1xuICAgIHZhciBfYTtcblxuICAgIHN3aXRjaCAoYWN0aW9uT2JqZWN0LnR5cGUpIHtcbiAgICAgIGNhc2UgcmFpc2UkMTpcbiAgICAgICAge1xuICAgICAgICAgIHZhciByYWlzZWRBY3Rpb24gPSByZXNvbHZlUmFpc2UoYWN0aW9uT2JqZWN0LCB1cGRhdGVkQ29udGV4dCwgX2V2ZW50LCBtYWNoaW5lLm9wdGlvbnMuZGVsYXlzKTtcblxuICAgICAgICAgIGlmIChwcmVkaWN0YWJsZUV4ZWMgJiYgdHlwZW9mIHJhaXNlZEFjdGlvbi5kZWxheSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHByZWRpY3RhYmxlRXhlYyhyYWlzZWRBY3Rpb24sIHVwZGF0ZWRDb250ZXh0LCBfZXZlbnQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiByYWlzZWRBY3Rpb247XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBzZW5kJDE6XG4gICAgICAgIHZhciBzZW5kQWN0aW9uID0gcmVzb2x2ZVNlbmQoYWN0aW9uT2JqZWN0LCB1cGRhdGVkQ29udGV4dCwgX2V2ZW50LCBtYWNoaW5lLm9wdGlvbnMuZGVsYXlzKTsgLy8gVE9ETzogZml4IEFjdGlvblR5cGVzLkluaXRcblxuICAgICAgICBpZiAoIUlTX1BST0RVQ1RJT04pIHtcbiAgICAgICAgICB2YXIgY29uZmlndXJlZERlbGF5ID0gYWN0aW9uT2JqZWN0LmRlbGF5OyAvLyB3YXJuIGFmdGVyIHJlc29sdmluZyBhcyB3ZSBjYW4gY3JlYXRlIGJldHRlciBjb250ZXh0dWFsIG1lc3NhZ2UgaGVyZVxuXG4gICAgICAgICAgd2FybighaXNTdHJpbmcoY29uZmlndXJlZERlbGF5KSB8fCB0eXBlb2Ygc2VuZEFjdGlvbi5kZWxheSA9PT0gJ251bWJlcicsIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcbiAgICAgICAgICBcIk5vIGRlbGF5IHJlZmVyZW5jZSBmb3IgZGVsYXkgZXhwcmVzc2lvbiAnXCIuY29uY2F0KGNvbmZpZ3VyZWREZWxheSwgXCInIHdhcyBmb3VuZCBvbiBtYWNoaW5lICdcIikuY29uY2F0KG1hY2hpbmUuaWQsIFwiJ1wiKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJlZGljdGFibGVFeGVjICYmIHNlbmRBY3Rpb24udG8gIT09IFNwZWNpYWxUYXJnZXRzLkludGVybmFsKSB7XG4gICAgICAgICAgaWYgKGJsb2NrVHlwZSA9PT0gJ2VudHJ5Jykge1xuICAgICAgICAgICAgZGVmZXJyZWRUb0Jsb2NrRW5kLnB1c2goc2VuZEFjdGlvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByZWRpY3RhYmxlRXhlYyhzZW5kQWN0aW9uLCB1cGRhdGVkQ29udGV4dCwgX2V2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VuZEFjdGlvbjtcblxuICAgICAgY2FzZSBsb2ckMTpcbiAgICAgICAge1xuICAgICAgICAgIHZhciByZXNvbHZlZCA9IHJlc29sdmVMb2coYWN0aW9uT2JqZWN0LCB1cGRhdGVkQ29udGV4dCwgX2V2ZW50KTtcbiAgICAgICAgICBwcmVkaWN0YWJsZUV4ZWMgPT09IG51bGwgfHwgcHJlZGljdGFibGVFeGVjID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwcmVkaWN0YWJsZUV4ZWMocmVzb2x2ZWQsIHVwZGF0ZWRDb250ZXh0LCBfZXZlbnQpO1xuICAgICAgICAgIHJldHVybiByZXNvbHZlZDtcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIGNob29zZSQxOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIGNob29zZUFjdGlvbiA9IGFjdGlvbk9iamVjdDtcbiAgICAgICAgICB2YXIgbWF0Y2hlZEFjdGlvbnMgPSAoX2EgPSBjaG9vc2VBY3Rpb24uY29uZHMuZmluZChmdW5jdGlvbiAoY29uZGl0aW9uKSB7XG4gICAgICAgICAgICB2YXIgZ3VhcmQgPSB0b0d1YXJkKGNvbmRpdGlvbi5jb25kLCBtYWNoaW5lLm9wdGlvbnMuZ3VhcmRzKTtcbiAgICAgICAgICAgIHJldHVybiAhZ3VhcmQgfHwgZXZhbHVhdGVHdWFyZChtYWNoaW5lLCBndWFyZCwgdXBkYXRlZENvbnRleHQsIF9ldmVudCwgIXByZWRpY3RhYmxlRXhlYyA/IGN1cnJlbnRTdGF0ZSA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgfSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hY3Rpb25zO1xuXG4gICAgICAgICAgaWYgKCFtYXRjaGVkQWN0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBfYiA9IF9fcmVhZChyZXNvbHZlQWN0aW9ucyhtYWNoaW5lLCBjdXJyZW50U3RhdGUsIHVwZGF0ZWRDb250ZXh0LCBfZXZlbnQsIFt7XG4gICAgICAgICAgICB0eXBlOiBibG9ja1R5cGUsXG4gICAgICAgICAgICBhY3Rpb25zOiB0b0FjdGlvbk9iamVjdHModG9BcnJheShtYXRjaGVkQWN0aW9ucyksIG1hY2hpbmUub3B0aW9ucy5hY3Rpb25zKVxuICAgICAgICAgIH1dLCBwcmVkaWN0YWJsZUV4ZWMsIHByZXNlcnZlQWN0aW9uT3JkZXIpLCAyKSxcbiAgICAgICAgICAgICAgcmVzb2x2ZWRBY3Rpb25zRnJvbUNob29zZSA9IF9iWzBdLFxuICAgICAgICAgICAgICByZXNvbHZlZENvbnRleHRGcm9tQ2hvb3NlID0gX2JbMV07XG5cbiAgICAgICAgICB1cGRhdGVkQ29udGV4dCA9IHJlc29sdmVkQ29udGV4dEZyb21DaG9vc2U7XG4gICAgICAgICAgcHJlc2VydmVkQ29udGV4dHMgPT09IG51bGwgfHwgcHJlc2VydmVkQ29udGV4dHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByZXNlcnZlZENvbnRleHRzLnB1c2godXBkYXRlZENvbnRleHQpO1xuICAgICAgICAgIHJldHVybiByZXNvbHZlZEFjdGlvbnNGcm9tQ2hvb3NlO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgcHVyZSQxOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIG1hdGNoZWRBY3Rpb25zID0gYWN0aW9uT2JqZWN0LmdldCh1cGRhdGVkQ29udGV4dCwgX2V2ZW50LmRhdGEpO1xuXG4gICAgICAgICAgaWYgKCFtYXRjaGVkQWN0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBfYyA9IF9fcmVhZChyZXNvbHZlQWN0aW9ucyhtYWNoaW5lLCBjdXJyZW50U3RhdGUsIHVwZGF0ZWRDb250ZXh0LCBfZXZlbnQsIFt7XG4gICAgICAgICAgICB0eXBlOiBibG9ja1R5cGUsXG4gICAgICAgICAgICBhY3Rpb25zOiB0b0FjdGlvbk9iamVjdHModG9BcnJheShtYXRjaGVkQWN0aW9ucyksIG1hY2hpbmUub3B0aW9ucy5hY3Rpb25zKVxuICAgICAgICAgIH1dLCBwcmVkaWN0YWJsZUV4ZWMsIHByZXNlcnZlQWN0aW9uT3JkZXIpLCAyKSxcbiAgICAgICAgICAgICAgcmVzb2x2ZWRBY3Rpb25zRnJvbVB1cmUgPSBfY1swXSxcbiAgICAgICAgICAgICAgcmVzb2x2ZWRDb250ZXh0ID0gX2NbMV07XG5cbiAgICAgICAgICB1cGRhdGVkQ29udGV4dCA9IHJlc29sdmVkQ29udGV4dDtcbiAgICAgICAgICBwcmVzZXJ2ZWRDb250ZXh0cyA9PT0gbnVsbCB8fCBwcmVzZXJ2ZWRDb250ZXh0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJlc2VydmVkQ29udGV4dHMucHVzaCh1cGRhdGVkQ29udGV4dCk7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmVkQWN0aW9uc0Zyb21QdXJlO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2Ugc3RvcCQxOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIHJlc29sdmVkID0gcmVzb2x2ZVN0b3AoYWN0aW9uT2JqZWN0LCB1cGRhdGVkQ29udGV4dCwgX2V2ZW50KTtcbiAgICAgICAgICBwcmVkaWN0YWJsZUV4ZWMgPT09IG51bGwgfHwgcHJlZGljdGFibGVFeGVjID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwcmVkaWN0YWJsZUV4ZWMocmVzb2x2ZWQsIGN1cnJlbnRDb250ZXh0LCBfZXZlbnQpO1xuICAgICAgICAgIHJldHVybiByZXNvbHZlZDtcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIGFzc2lnbiQxOlxuICAgICAgICB7XG4gICAgICAgICAgdXBkYXRlZENvbnRleHQgPSB1cGRhdGVDb250ZXh0KHVwZGF0ZWRDb250ZXh0LCBfZXZlbnQsIFthY3Rpb25PYmplY3RdLCAhcHJlZGljdGFibGVFeGVjID8gY3VycmVudFN0YXRlIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICBwcmVzZXJ2ZWRDb250ZXh0cyA9PT0gbnVsbCB8fCBwcmVzZXJ2ZWRDb250ZXh0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJlc2VydmVkQ29udGV4dHMucHVzaCh1cGRhdGVkQ29udGV4dCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFyIHJlc29sdmVkQWN0aW9uT2JqZWN0ID0gdG9BY3Rpb25PYmplY3QoYWN0aW9uT2JqZWN0LCBtYWNoaW5lLm9wdGlvbnMuYWN0aW9ucyk7XG4gICAgICAgIHZhciBleGVjXzEgPSByZXNvbHZlZEFjdGlvbk9iamVjdC5leGVjO1xuXG4gICAgICAgIGlmIChwcmVkaWN0YWJsZUV4ZWMpIHtcbiAgICAgICAgICBwcmVkaWN0YWJsZUV4ZWMocmVzb2x2ZWRBY3Rpb25PYmplY3QsIHVwZGF0ZWRDb250ZXh0LCBfZXZlbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKGV4ZWNfMSAmJiBwcmVzZXJ2ZWRDb250ZXh0cykge1xuICAgICAgICAgIHZhciBjb250ZXh0SW5kZXhfMSA9IHByZXNlcnZlZENvbnRleHRzLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgICB2YXIgd3JhcHBlZCA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCByZXNvbHZlZEFjdGlvbk9iamVjdCksIHtcbiAgICAgICAgICAgIGV4ZWM6IGZ1bmN0aW9uIChfY3R4KSB7XG4gICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG5cbiAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZXhlY18xLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbcHJlc2VydmVkQ29udGV4dHNbY29udGV4dEluZGV4XzFdXSwgX19yZWFkKGFyZ3MpLCBmYWxzZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmVzb2x2ZWRBY3Rpb25PYmplY3QgPSB3cmFwcGVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc29sdmVkQWN0aW9uT2JqZWN0O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2Nlc3NCbG9jayhibG9jaykge1xuICAgIHZhciBlXzIsIF9hO1xuXG4gICAgdmFyIHJlc29sdmVkQWN0aW9ucyA9IFtdO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAodmFyIF9iID0gX192YWx1ZXMoYmxvY2suYWN0aW9ucyksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IF9jLnZhbHVlO1xuICAgICAgICB2YXIgcmVzb2x2ZWQgPSBoYW5kbGVBY3Rpb24oYmxvY2sudHlwZSwgYWN0aW9uKTtcblxuICAgICAgICBpZiAocmVzb2x2ZWQpIHtcbiAgICAgICAgICByZXNvbHZlZEFjdGlvbnMgPSByZXNvbHZlZEFjdGlvbnMuY29uY2F0KHJlc29sdmVkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVfMl8xKSB7XG4gICAgICBlXzIgPSB7XG4gICAgICAgIGVycm9yOiBlXzJfMVxuICAgICAgfTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yO1xuICAgICAgfVxuICAgIH1cblxuICAgIGRlZmVycmVkVG9CbG9ja0VuZC5mb3JFYWNoKGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIHByZWRpY3RhYmxlRXhlYyhhY3Rpb24sIHVwZGF0ZWRDb250ZXh0LCBfZXZlbnQpO1xuICAgIH0pO1xuICAgIGRlZmVycmVkVG9CbG9ja0VuZC5sZW5ndGggPSAwO1xuICAgIHJldHVybiByZXNvbHZlZEFjdGlvbnM7XG4gIH1cblxuICB2YXIgcmVzb2x2ZWRBY3Rpb25zID0gZmxhdHRlbihhY3Rpb25CbG9ja3MubWFwKHByb2Nlc3NCbG9jaykpO1xuICByZXR1cm4gW3Jlc29sdmVkQWN0aW9ucywgdXBkYXRlZENvbnRleHRdO1xufVxuXG5leHBvcnQgeyBhZnRlciwgYXNzaWduLCBjYW5jZWwsIGNob29zZSwgZG9uZSwgZG9uZUludm9rZSwgZXJyb3IsIGVzY2FsYXRlLCBmb3J3YXJkVG8sIGdldEFjdGlvbkZ1bmN0aW9uLCBpbml0RXZlbnQsIGlzQWN0aW9uT2JqZWN0LCBsb2csIHB1cmUsIHJhaXNlLCByZXNvbHZlQWN0aW9ucywgcmVzb2x2ZUxvZywgcmVzb2x2ZVJhaXNlLCByZXNvbHZlU2VuZCwgcmVzb2x2ZVN0b3AsIHJlc3BvbmQsIHNlbmQsIHNlbmRQYXJlbnQsIHNlbmRUbywgc2VuZFVwZGF0ZSwgc3RhcnQsIHN0b3AsIHRvQWN0aW9uT2JqZWN0LCB0b0FjdGlvbk9iamVjdHMsIHRvQWN0aXZpdHlEZWZpbml0aW9uIH07XG4iXSwibmFtZXMiOlsiX19hc3NpZ24iLCJfX3NwcmVhZEFycmF5IiwiX19yZWFkIiwiX192YWx1ZXMiLCJTcGVjaWFsVGFyZ2V0cyIsIkFjdGlvblR5cGVzIiwiaW5pdCIsInJhaXNlIiwicmFpc2UkMSIsInNlbmQiLCJzZW5kJDEiLCJ1cGRhdGUiLCJsb2ciLCJsb2ckMSIsImNhbmNlbCIsImNhbmNlbCQxIiwiYXNzaWduIiwiYXNzaWduJDEiLCJlcnJvciIsImVycm9yJDEiLCJzdG9wIiwic3RvcCQxIiwicHVyZSIsInB1cmUkMSIsImNob29zZSIsImNob29zZSQxIiwiYWN0aW9uVHlwZXMiLCJ0b1NDWE1MRXZlbnQiLCJpc1N0cmluZyIsImlzRnVuY3Rpb24iLCJ0b0V2ZW50T2JqZWN0IiwiZ2V0RXZlbnRUeXBlIiwidXBkYXRlQ29udGV4dCIsImZsYXR0ZW4iLCJpc0FycmF5IiwidG9BcnJheSIsInRvR3VhcmQiLCJldmFsdWF0ZUd1YXJkIiwid2FybiIsIklTX1BST0RVQ1RJT04iLCJpbml0RXZlbnQiLCJ0eXBlIiwiZ2V0QWN0aW9uRnVuY3Rpb24iLCJhY3Rpb25UeXBlIiwiYWN0aW9uRnVuY3Rpb25NYXAiLCJ1bmRlZmluZWQiLCJ0b0FjdGlvbk9iamVjdCIsImFjdGlvbiIsImFjdGlvbk9iamVjdCIsImV4ZWMiLCJuYW1lIiwidG9TdHJpbmciLCJ0b0FjdGlvbk9iamVjdHMiLCJhY3Rpb25zIiwibWFwIiwic3ViQWN0aW9uIiwidG9BY3Rpdml0eURlZmluaXRpb24iLCJpZCIsImV2ZW50Iiwib3B0aW9ucyIsImRlbGF5IiwicmVzb2x2ZVJhaXNlIiwiY3R4IiwiX2V2ZW50IiwiZGVsYXlzTWFwIiwibWV0YSIsInJlc29sdmVkRXZlbnQiLCJkYXRhIiwicmVzb2x2ZWREZWxheSIsImNvbmZpZ0RlbGF5IiwidG8iLCJyZXNvbHZlU2VuZCIsInJlc29sdmVkVGFyZ2V0Iiwic2VuZFBhcmVudCIsIlBhcmVudCIsInNlbmRUbyIsImFjdG9yIiwic2VuZFVwZGF0ZSIsInJlc3BvbmQiLCJfIiwiX18iLCJfYSIsIm9yaWdpbiIsImRlZmF1bHRMb2dFeHByIiwiY29udGV4dCIsImV4cHIiLCJsYWJlbCIsInJlc29sdmVMb2ciLCJ2YWx1ZSIsInNlbmRJZCIsInN0YXJ0IiwiYWN0aXZpdHkiLCJhY3Rpdml0eURlZiIsIlN0YXJ0IiwiYWN0b3JSZWYiLCJTdG9wIiwicmVzb2x2ZVN0b3AiLCJhY3RvclJlZk9yU3RyaW5nIiwicmVzb2x2ZWRBY3RvclJlZiIsImFzc2lnbm1lbnQiLCJpc0FjdGlvbk9iamVjdCIsImFmdGVyIiwiZGVsYXlSZWYiLCJpZFN1ZmZpeCIsImNvbmNhdCIsIkFmdGVyIiwiZG9uZSIsIkRvbmVTdGF0ZSIsImV2ZW50T2JqZWN0IiwiZG9uZUludm9rZSIsIkRvbmVJbnZva2UiLCJFcnJvclBsYXRmb3JtIiwiZ2V0QWN0aW9ucyIsIlB1cmUiLCJnZXQiLCJmb3J3YXJkVG8iLCJ0YXJnZXQiLCJvcmlnaW5hbFRhcmdldF8xIiwiYXJncyIsIl9pIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXBwbHkiLCJFcnJvciIsImVzY2FsYXRlIiwiZXJyb3JEYXRhIiwiY29uZHMiLCJDaG9vc2UiLCJwbHVja0Fzc2lnbnMiLCJhY3Rpb25CbG9ja3MiLCJlXzEiLCJhc3NpZ25BY3Rpb25zIiwiYWN0aW9uQmxvY2tzXzEiLCJhY3Rpb25CbG9ja3NfMV8xIiwibmV4dCIsImJsb2NrIiwiaSIsInB1c2giLCJzcGxpY2UiLCJlXzFfMSIsInJldHVybiIsImNhbGwiLCJyZXNvbHZlQWN0aW9ucyIsIm1hY2hpbmUiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50Q29udGV4dCIsInByZWRpY3RhYmxlRXhlYyIsInByZXNlcnZlQWN0aW9uT3JkZXIiLCJ1cGRhdGVkQ29udGV4dCIsInByZXNlcnZlZENvbnRleHRzIiwiZGVmZXJyZWRUb0Jsb2NrRW5kIiwiaGFuZGxlQWN0aW9uIiwiYmxvY2tUeXBlIiwicmFpc2VkQWN0aW9uIiwiZGVsYXlzIiwic2VuZEFjdGlvbiIsImNvbmZpZ3VyZWREZWxheSIsIkludGVybmFsIiwicmVzb2x2ZWQiLCJjaG9vc2VBY3Rpb24iLCJtYXRjaGVkQWN0aW9ucyIsImZpbmQiLCJjb25kaXRpb24iLCJndWFyZCIsImNvbmQiLCJndWFyZHMiLCJfYiIsInJlc29sdmVkQWN0aW9uc0Zyb21DaG9vc2UiLCJyZXNvbHZlZENvbnRleHRGcm9tQ2hvb3NlIiwiX2MiLCJyZXNvbHZlZEFjdGlvbnNGcm9tUHVyZSIsInJlc29sdmVkQ29udGV4dCIsInJlc29sdmVkQWN0aW9uT2JqZWN0IiwiZXhlY18xIiwiY29udGV4dEluZGV4XzEiLCJ3cmFwcGVkIiwiX2N0eCIsInByb2Nlc3NCbG9jayIsImVfMiIsInJlc29sdmVkQWN0aW9ucyIsImVfMl8xIiwiZm9yRWFjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/actions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/behaviors.js":
/*!*********************************************!*\
  !*** ./node_modules/xstate/es/behaviors.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromPromise: () => (/* binding */ fromPromise),\n/* harmony export */   fromReducer: () => (/* binding */ fromReducer),\n/* harmony export */   spawnBehavior: () => (/* binding */ spawnBehavior)\n/* harmony export */ });\n/* harmony import */ var _actions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actions.js */ \"(ssr)/./node_modules/xstate/es/actions.js\");\n/* harmony import */ var _Actor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Actor.js */ \"(ssr)/./node_modules/xstate/es/Actor.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n\n\n\n/**\r\n * Returns an actor behavior from a reducer and its initial state.\r\n *\r\n * @param transition The pure reducer that returns the next state given the current state and event.\r\n * @param initialState The initial state of the reducer.\r\n * @returns An actor behavior\r\n */ function fromReducer(transition, initialState) {\n    return {\n        transition: transition,\n        initialState: initialState\n    };\n}\nfunction fromPromise(promiseFn) {\n    var initialState = {\n        error: undefined,\n        data: undefined,\n        status: \"pending\"\n    };\n    return {\n        transition: function(state, event, _a) {\n            var parent = _a.parent, id = _a.id, observers = _a.observers;\n            switch(event.type){\n                case \"fulfill\":\n                    parent === null || parent === void 0 ? void 0 : parent.send((0,_actions_js__WEBPACK_IMPORTED_MODULE_0__.doneInvoke)(id, event.data));\n                    return {\n                        error: undefined,\n                        data: event.data,\n                        status: \"fulfilled\"\n                    };\n                case \"reject\":\n                    parent === null || parent === void 0 ? void 0 : parent.send((0,_actions_js__WEBPACK_IMPORTED_MODULE_0__.error)(id, event.error));\n                    observers.forEach(function(observer) {\n                        observer.error(event.error);\n                    });\n                    return {\n                        error: event.error,\n                        data: undefined,\n                        status: \"rejected\"\n                    };\n                default:\n                    return state;\n            }\n        },\n        initialState: initialState,\n        start: function(_a) {\n            var self = _a.self;\n            promiseFn().then(function(data) {\n                self.send({\n                    type: \"fulfill\",\n                    data: data\n                });\n            }, function(reason) {\n                self.send({\n                    type: \"reject\",\n                    error: reason\n                });\n            });\n            return initialState;\n        }\n    };\n}\nfunction spawnBehavior(behavior, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var state = behavior.initialState;\n    var observers = new Set();\n    var mailbox = [];\n    var flushing = false;\n    var flush = function() {\n        if (flushing) {\n            return;\n        }\n        flushing = true;\n        while(mailbox.length > 0){\n            var event_1 = mailbox.shift();\n            state = behavior.transition(state, event_1, actorCtx);\n            observers.forEach(function(observer) {\n                return observer.next(state);\n            });\n        }\n        flushing = false;\n    };\n    var actor = (0,_Actor_js__WEBPACK_IMPORTED_MODULE_1__.toActorRef)({\n        id: options.id,\n        send: function(event) {\n            mailbox.push(event);\n            flush();\n        },\n        getSnapshot: function() {\n            return state;\n        },\n        subscribe: function(next, handleError, complete) {\n            var observer = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.toObserver)(next, handleError, complete);\n            observers.add(observer);\n            observer.next(state);\n            return {\n                unsubscribe: function() {\n                    observers.delete(observer);\n                }\n            };\n        }\n    });\n    var actorCtx = {\n        parent: options.parent,\n        self: actor,\n        id: options.id || \"anonymous\",\n        observers: observers\n    };\n    state = behavior.start ? behavior.start(actorCtx) : state;\n    return actor;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2JlaGF2aW9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBaUQ7QUFDVDtBQUNBO0FBRXhDOzs7Ozs7Q0FNQyxHQUVELFNBQVNJLFlBQVlDLFVBQVUsRUFBRUMsWUFBWTtJQUMzQyxPQUFPO1FBQ0xELFlBQVlBO1FBQ1pDLGNBQWNBO0lBQ2hCO0FBQ0Y7QUFDQSxTQUFTQyxZQUFZQyxTQUFTO0lBQzVCLElBQUlGLGVBQWU7UUFDakJOLE9BQU9TO1FBQ1BDLE1BQU1EO1FBQ05FLFFBQVE7SUFDVjtJQUNBLE9BQU87UUFDTE4sWUFBWSxTQUFVTyxLQUFLLEVBQUVDLEtBQUssRUFBRUMsRUFBRTtZQUNwQyxJQUFJQyxTQUFTRCxHQUFHQyxNQUFNLEVBQ2xCQyxLQUFLRixHQUFHRSxFQUFFLEVBQ1ZDLFlBQVlILEdBQUdHLFNBQVM7WUFFNUIsT0FBUUosTUFBTUssSUFBSTtnQkFDaEIsS0FBSztvQkFDSEgsV0FBVyxRQUFRQSxXQUFXLEtBQUssSUFBSSxLQUFLLElBQUlBLE9BQU9JLElBQUksQ0FBQ2xCLHVEQUFVQSxDQUFDZSxJQUFJSCxNQUFNSCxJQUFJO29CQUNyRixPQUFPO3dCQUNMVixPQUFPUzt3QkFDUEMsTUFBTUcsTUFBTUgsSUFBSTt3QkFDaEJDLFFBQVE7b0JBQ1Y7Z0JBRUYsS0FBSztvQkFDSEksV0FBVyxRQUFRQSxXQUFXLEtBQUssSUFBSSxLQUFLLElBQUlBLE9BQU9JLElBQUksQ0FBQ25CLGtEQUFLQSxDQUFDZ0IsSUFBSUgsTUFBTWIsS0FBSztvQkFDakZpQixVQUFVRyxPQUFPLENBQUMsU0FBVUMsUUFBUTt3QkFDbENBLFNBQVNyQixLQUFLLENBQUNhLE1BQU1iLEtBQUs7b0JBQzVCO29CQUNBLE9BQU87d0JBQ0xBLE9BQU9hLE1BQU1iLEtBQUs7d0JBQ2xCVSxNQUFNRDt3QkFDTkUsUUFBUTtvQkFDVjtnQkFFRjtvQkFDRSxPQUFPQztZQUNYO1FBQ0Y7UUFDQU4sY0FBY0E7UUFDZGdCLE9BQU8sU0FBVVIsRUFBRTtZQUNqQixJQUFJUyxPQUFPVCxHQUFHUyxJQUFJO1lBQ2xCZixZQUFZZ0IsSUFBSSxDQUFDLFNBQVVkLElBQUk7Z0JBQzdCYSxLQUFLSixJQUFJLENBQUM7b0JBQ1JELE1BQU07b0JBQ05SLE1BQU1BO2dCQUNSO1lBQ0YsR0FBRyxTQUFVZSxNQUFNO2dCQUNqQkYsS0FBS0osSUFBSSxDQUFDO29CQUNSRCxNQUFNO29CQUNObEIsT0FBT3lCO2dCQUNUO1lBQ0Y7WUFDQSxPQUFPbkI7UUFDVDtJQUNGO0FBQ0Y7QUFDQSxTQUFTb0IsY0FBY0MsUUFBUSxFQUFFQyxPQUFPO0lBQ3RDLElBQUlBLFlBQVksS0FBSyxHQUFHO1FBQ3RCQSxVQUFVLENBQUM7SUFDYjtJQUVBLElBQUloQixRQUFRZSxTQUFTckIsWUFBWTtJQUNqQyxJQUFJVyxZQUFZLElBQUlZO0lBQ3BCLElBQUlDLFVBQVUsRUFBRTtJQUNoQixJQUFJQyxXQUFXO0lBRWYsSUFBSUMsUUFBUTtRQUNWLElBQUlELFVBQVU7WUFDWjtRQUNGO1FBRUFBLFdBQVc7UUFFWCxNQUFPRCxRQUFRRyxNQUFNLEdBQUcsRUFBRztZQUN6QixJQUFJQyxVQUFVSixRQUFRSyxLQUFLO1lBQzNCdkIsUUFBUWUsU0FBU3RCLFVBQVUsQ0FBQ08sT0FBT3NCLFNBQVNFO1lBQzVDbkIsVUFBVUcsT0FBTyxDQUFDLFNBQVVDLFFBQVE7Z0JBQ2xDLE9BQU9BLFNBQVNnQixJQUFJLENBQUN6QjtZQUN2QjtRQUNGO1FBRUFtQixXQUFXO0lBQ2I7SUFFQSxJQUFJTyxRQUFRcEMscURBQVVBLENBQUM7UUFDckJjLElBQUlZLFFBQVFaLEVBQUU7UUFDZEcsTUFBTSxTQUFVTixLQUFLO1lBQ25CaUIsUUFBUVMsSUFBSSxDQUFDMUI7WUFDYm1CO1FBQ0Y7UUFDQVEsYUFBYTtZQUNYLE9BQU81QjtRQUNUO1FBQ0E2QixXQUFXLFNBQVVKLElBQUksRUFBRUssV0FBVyxFQUFFQyxRQUFRO1lBQzlDLElBQUl0QixXQUFXbEIscURBQVVBLENBQUNrQyxNQUFNSyxhQUFhQztZQUM3QzFCLFVBQVUyQixHQUFHLENBQUN2QjtZQUNkQSxTQUFTZ0IsSUFBSSxDQUFDekI7WUFDZCxPQUFPO2dCQUNMaUMsYUFBYTtvQkFDWDVCLFVBQVU2QixNQUFNLENBQUN6QjtnQkFDbkI7WUFDRjtRQUNGO0lBQ0Y7SUFDQSxJQUFJZSxXQUFXO1FBQ2JyQixRQUFRYSxRQUFRYixNQUFNO1FBQ3RCUSxNQUFNZTtRQUNOdEIsSUFBSVksUUFBUVosRUFBRSxJQUFJO1FBQ2xCQyxXQUFXQTtJQUNiO0lBQ0FMLFFBQVFlLFNBQVNMLEtBQUssR0FBR0ssU0FBU0wsS0FBSyxDQUFDYyxZQUFZeEI7SUFDcEQsT0FBTzBCO0FBQ1Q7QUFFbUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydG5leHQvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2JlaGF2aW9ycy5qcz83M2ViIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVycm9yLCBkb25lSW52b2tlIH0gZnJvbSAnLi9hY3Rpb25zLmpzJztcbmltcG9ydCB7IHRvQWN0b3JSZWYgfSBmcm9tICcuL0FjdG9yLmpzJztcbmltcG9ydCB7IHRvT2JzZXJ2ZXIgfSBmcm9tICcuL3V0aWxzLmpzJztcblxuLyoqXHJcbiAqIFJldHVybnMgYW4gYWN0b3IgYmVoYXZpb3IgZnJvbSBhIHJlZHVjZXIgYW5kIGl0cyBpbml0aWFsIHN0YXRlLlxyXG4gKlxyXG4gKiBAcGFyYW0gdHJhbnNpdGlvbiBUaGUgcHVyZSByZWR1Y2VyIHRoYXQgcmV0dXJucyB0aGUgbmV4dCBzdGF0ZSBnaXZlbiB0aGUgY3VycmVudCBzdGF0ZSBhbmQgZXZlbnQuXHJcbiAqIEBwYXJhbSBpbml0aWFsU3RhdGUgVGhlIGluaXRpYWwgc3RhdGUgb2YgdGhlIHJlZHVjZXIuXHJcbiAqIEByZXR1cm5zIEFuIGFjdG9yIGJlaGF2aW9yXHJcbiAqL1xuXG5mdW5jdGlvbiBmcm9tUmVkdWNlcih0cmFuc2l0aW9uLCBpbml0aWFsU3RhdGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLFxuICAgIGluaXRpYWxTdGF0ZTogaW5pdGlhbFN0YXRlXG4gIH07XG59XG5mdW5jdGlvbiBmcm9tUHJvbWlzZShwcm9taXNlRm4pIHtcbiAgdmFyIGluaXRpYWxTdGF0ZSA9IHtcbiAgICBlcnJvcjogdW5kZWZpbmVkLFxuICAgIGRhdGE6IHVuZGVmaW5lZCxcbiAgICBzdGF0dXM6ICdwZW5kaW5nJ1xuICB9O1xuICByZXR1cm4ge1xuICAgIHRyYW5zaXRpb246IGZ1bmN0aW9uIChzdGF0ZSwgZXZlbnQsIF9hKSB7XG4gICAgICB2YXIgcGFyZW50ID0gX2EucGFyZW50LFxuICAgICAgICAgIGlkID0gX2EuaWQsXG4gICAgICAgICAgb2JzZXJ2ZXJzID0gX2Eub2JzZXJ2ZXJzO1xuXG4gICAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgY2FzZSAnZnVsZmlsbCc6XG4gICAgICAgICAgcGFyZW50ID09PSBudWxsIHx8IHBhcmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyZW50LnNlbmQoZG9uZUludm9rZShpZCwgZXZlbnQuZGF0YSkpO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlcnJvcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZGF0YTogZXZlbnQuZGF0YSxcbiAgICAgICAgICAgIHN0YXR1czogJ2Z1bGZpbGxlZCdcbiAgICAgICAgICB9O1xuXG4gICAgICAgIGNhc2UgJ3JlamVjdCc6XG4gICAgICAgICAgcGFyZW50ID09PSBudWxsIHx8IHBhcmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyZW50LnNlbmQoZXJyb3IoaWQsIGV2ZW50LmVycm9yKSk7XG4gICAgICAgICAgb2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihldmVudC5lcnJvcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVycm9yOiBldmVudC5lcnJvcixcbiAgICAgICAgICAgIGRhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHN0YXR1czogJ3JlamVjdGVkJ1xuICAgICAgICAgIH07XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICB9XG4gICAgfSxcbiAgICBpbml0aWFsU3RhdGU6IGluaXRpYWxTdGF0ZSxcbiAgICBzdGFydDogZnVuY3Rpb24gKF9hKSB7XG4gICAgICB2YXIgc2VsZiA9IF9hLnNlbGY7XG4gICAgICBwcm9taXNlRm4oKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHNlbGYuc2VuZCh7XG4gICAgICAgICAgdHlwZTogJ2Z1bGZpbGwnLFxuICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgfSk7XG4gICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIHNlbGYuc2VuZCh7XG4gICAgICAgICAgdHlwZTogJ3JlamVjdCcsXG4gICAgICAgICAgZXJyb3I6IHJlYXNvblxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGluaXRpYWxTdGF0ZTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBzcGF3bkJlaGF2aW9yKGJlaGF2aW9yLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgc3RhdGUgPSBiZWhhdmlvci5pbml0aWFsU3RhdGU7XG4gIHZhciBvYnNlcnZlcnMgPSBuZXcgU2V0KCk7XG4gIHZhciBtYWlsYm94ID0gW107XG4gIHZhciBmbHVzaGluZyA9IGZhbHNlO1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZmx1c2hpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmbHVzaGluZyA9IHRydWU7XG5cbiAgICB3aGlsZSAobWFpbGJveC5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgZXZlbnRfMSA9IG1haWxib3guc2hpZnQoKTtcbiAgICAgIHN0YXRlID0gYmVoYXZpb3IudHJhbnNpdGlvbihzdGF0ZSwgZXZlbnRfMSwgYWN0b3JDdHgpO1xuICAgICAgb2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZlci5uZXh0KHN0YXRlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZsdXNoaW5nID0gZmFsc2U7XG4gIH07XG5cbiAgdmFyIGFjdG9yID0gdG9BY3RvclJlZih7XG4gICAgaWQ6IG9wdGlvbnMuaWQsXG4gICAgc2VuZDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBtYWlsYm94LnB1c2goZXZlbnQpO1xuICAgICAgZmx1c2goKTtcbiAgICB9LFxuICAgIGdldFNuYXBzaG90OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIChuZXh0LCBoYW5kbGVFcnJvciwgY29tcGxldGUpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHRvT2JzZXJ2ZXIobmV4dCwgaGFuZGxlRXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgIG9ic2VydmVycy5hZGQob2JzZXJ2ZXIpO1xuICAgICAgb2JzZXJ2ZXIubmV4dChzdGF0ZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIG9ic2VydmVycy5kZWxldGUob2JzZXJ2ZXIpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG4gIHZhciBhY3RvckN0eCA9IHtcbiAgICBwYXJlbnQ6IG9wdGlvbnMucGFyZW50LFxuICAgIHNlbGY6IGFjdG9yLFxuICAgIGlkOiBvcHRpb25zLmlkIHx8ICdhbm9ueW1vdXMnLFxuICAgIG9ic2VydmVyczogb2JzZXJ2ZXJzXG4gIH07XG4gIHN0YXRlID0gYmVoYXZpb3Iuc3RhcnQgPyBiZWhhdmlvci5zdGFydChhY3RvckN0eCkgOiBzdGF0ZTtcbiAgcmV0dXJuIGFjdG9yO1xufVxuXG5leHBvcnQgeyBmcm9tUHJvbWlzZSwgZnJvbVJlZHVjZXIsIHNwYXduQmVoYXZpb3IgfTtcbiJdLCJuYW1lcyI6WyJlcnJvciIsImRvbmVJbnZva2UiLCJ0b0FjdG9yUmVmIiwidG9PYnNlcnZlciIsImZyb21SZWR1Y2VyIiwidHJhbnNpdGlvbiIsImluaXRpYWxTdGF0ZSIsImZyb21Qcm9taXNlIiwicHJvbWlzZUZuIiwidW5kZWZpbmVkIiwiZGF0YSIsInN0YXR1cyIsInN0YXRlIiwiZXZlbnQiLCJfYSIsInBhcmVudCIsImlkIiwib2JzZXJ2ZXJzIiwidHlwZSIsInNlbmQiLCJmb3JFYWNoIiwib2JzZXJ2ZXIiLCJzdGFydCIsInNlbGYiLCJ0aGVuIiwicmVhc29uIiwic3Bhd25CZWhhdmlvciIsImJlaGF2aW9yIiwib3B0aW9ucyIsIlNldCIsIm1haWxib3giLCJmbHVzaGluZyIsImZsdXNoIiwibGVuZ3RoIiwiZXZlbnRfMSIsInNoaWZ0IiwiYWN0b3JDdHgiLCJuZXh0IiwiYWN0b3IiLCJwdXNoIiwiZ2V0U25hcHNob3QiLCJzdWJzY3JpYmUiLCJoYW5kbGVFcnJvciIsImNvbXBsZXRlIiwiYWRkIiwidW5zdWJzY3JpYmUiLCJkZWxldGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/behaviors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/constants.js":
/*!*********************************************!*\
  !*** ./node_modules/xstate/es/constants.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_GUARD_TYPE: () => (/* binding */ DEFAULT_GUARD_TYPE),\n/* harmony export */   EMPTY_ACTIVITY_MAP: () => (/* binding */ EMPTY_ACTIVITY_MAP),\n/* harmony export */   STATE_DELIMITER: () => (/* binding */ STATE_DELIMITER),\n/* harmony export */   TARGETLESS_KEY: () => (/* binding */ TARGETLESS_KEY)\n/* harmony export */ });\nvar STATE_DELIMITER = \".\";\nvar EMPTY_ACTIVITY_MAP = {};\nvar DEFAULT_GUARD_TYPE = \"xstate.guard\";\nvar TARGETLESS_KEY = \"\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBSUEsa0JBQWtCO0FBQ3RCLElBQUlDLHFCQUFxQixDQUFDO0FBQzFCLElBQUlDLHFCQUFxQjtBQUN6QixJQUFJQyxpQkFBaUI7QUFFOEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydG5leHQvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2NvbnN0YW50cy5qcz9lMjk0Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBTVEFURV9ERUxJTUlURVIgPSAnLic7XG52YXIgRU1QVFlfQUNUSVZJVFlfTUFQID0ge307XG52YXIgREVGQVVMVF9HVUFSRF9UWVBFID0gJ3hzdGF0ZS5ndWFyZCc7XG52YXIgVEFSR0VUTEVTU19LRVkgPSAnJztcblxuZXhwb3J0IHsgREVGQVVMVF9HVUFSRF9UWVBFLCBFTVBUWV9BQ1RJVklUWV9NQVAsIFNUQVRFX0RFTElNSVRFUiwgVEFSR0VUTEVTU19LRVkgfTtcbiJdLCJuYW1lcyI6WyJTVEFURV9ERUxJTUlURVIiLCJFTVBUWV9BQ1RJVklUWV9NQVAiLCJERUZBVUxUX0dVQVJEX1RZUEUiLCJUQVJHRVRMRVNTX0tFWSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/devTools.js":
/*!********************************************!*\
  !*** ./node_modules/xstate/es/devTools.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getGlobal: () => (/* binding */ getGlobal),\n/* harmony export */   registerService: () => (/* binding */ registerService)\n/* harmony export */ });\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./environment.js */ \"(ssr)/./node_modules/xstate/es/environment.js\");\n\nfunction getGlobal() {\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (false) {}\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    if (!_environment_js__WEBPACK_IMPORTED_MODULE_0__.IS_PRODUCTION) {\n        console.warn(\"XState could not find a global object in this environment. Please let the maintainers know and raise an issue here: https://github.com/statelyai/xstate/issues\");\n    }\n}\nfunction getDevTools() {\n    var global1 = getGlobal();\n    if (global1 && \"__xstate__\" in global1) {\n        return global1.__xstate__;\n    }\n    return undefined;\n}\nfunction registerService(service) {\n    if (!getGlobal()) {\n        return;\n    }\n    var devTools = getDevTools();\n    if (devTools) {\n        devTools.register(service);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2RldlRvb2xzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpRDtBQUVqRCxTQUFTQztJQUNQLElBQUksT0FBT0MsZUFBZSxhQUFhO1FBQ3JDLE9BQU9BO0lBQ1Q7SUFFQSxJQUFJLE9BQU9DLFNBQVMsYUFBYTtRQUMvQixPQUFPQTtJQUNUO0lBRUEsSUFBSSxLQUFrQixFQUFhLEVBRWxDO0lBRUQsSUFBSSxPQUFPRSxXQUFXLGFBQWE7UUFDakMsT0FBT0E7SUFDVDtJQUVBLElBQUksQ0FBQ0wsMERBQWFBLEVBQUU7UUFDbEJNLFFBQVFDLElBQUksQ0FBQztJQUNmO0FBQ0Y7QUFFQSxTQUFTQztJQUNQLElBQUlILFVBQVNKO0lBRWIsSUFBSUksV0FBVSxnQkFBZ0JBLFNBQVE7UUFDcEMsT0FBT0EsUUFBT0ksVUFBVTtJQUMxQjtJQUVBLE9BQU9DO0FBQ1Q7QUFFQSxTQUFTQyxnQkFBZ0JDLE9BQU87SUFDOUIsSUFBSSxDQUFDWCxhQUFhO1FBQ2hCO0lBQ0Y7SUFFQSxJQUFJWSxXQUFXTDtJQUVmLElBQUlLLFVBQVU7UUFDWkEsU0FBU0MsUUFBUSxDQUFDRjtJQUNwQjtBQUNGO0FBRXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnRuZXh0Ly4vbm9kZV9tb2R1bGVzL3hzdGF0ZS9lcy9kZXZUb29scy5qcz83YmJjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElTX1BST0RVQ1RJT04gfSBmcm9tICcuL2Vudmlyb25tZW50LmpzJztcblxuZnVuY3Rpb24gZ2V0R2xvYmFsKCkge1xuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGdsb2JhbFRoaXM7XG4gIH1cblxuICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cblxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGdsb2JhbDtcbiAgfVxuXG4gIGlmICghSVNfUFJPRFVDVElPTikge1xuICAgIGNvbnNvbGUud2FybignWFN0YXRlIGNvdWxkIG5vdCBmaW5kIGEgZ2xvYmFsIG9iamVjdCBpbiB0aGlzIGVudmlyb25tZW50LiBQbGVhc2UgbGV0IHRoZSBtYWludGFpbmVycyBrbm93IGFuZCByYWlzZSBhbiBpc3N1ZSBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vc3RhdGVseWFpL3hzdGF0ZS9pc3N1ZXMnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZXZUb29scygpIHtcbiAgdmFyIGdsb2JhbCA9IGdldEdsb2JhbCgpO1xuXG4gIGlmIChnbG9iYWwgJiYgJ19feHN0YXRlX18nIGluIGdsb2JhbCkge1xuICAgIHJldHVybiBnbG9iYWwuX194c3RhdGVfXztcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyU2VydmljZShzZXJ2aWNlKSB7XG4gIGlmICghZ2V0R2xvYmFsKCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZGV2VG9vbHMgPSBnZXREZXZUb29scygpO1xuXG4gIGlmIChkZXZUb29scykge1xuICAgIGRldlRvb2xzLnJlZ2lzdGVyKHNlcnZpY2UpO1xuICB9XG59XG5cbmV4cG9ydCB7IGdldEdsb2JhbCwgcmVnaXN0ZXJTZXJ2aWNlIH07XG4iXSwibmFtZXMiOlsiSVNfUFJPRFVDVElPTiIsImdldEdsb2JhbCIsImdsb2JhbFRoaXMiLCJzZWxmIiwid2luZG93IiwiZ2xvYmFsIiwiY29uc29sZSIsIndhcm4iLCJnZXREZXZUb29scyIsIl9feHN0YXRlX18iLCJ1bmRlZmluZWQiLCJyZWdpc3RlclNlcnZpY2UiLCJzZXJ2aWNlIiwiZGV2VG9vbHMiLCJyZWdpc3RlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/devTools.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/environment.js":
/*!***********************************************!*\
  !*** ./node_modules/xstate/es/environment.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IS_PRODUCTION: () => (/* binding */ IS_PRODUCTION)\n/* harmony export */ });\nvar IS_PRODUCTION = \"development\" === \"production\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2Vudmlyb25tZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFJQSxnQkFBZ0JDLGtCQUF5QjtBQUVwQiIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0bmV4dC8uL25vZGVfbW9kdWxlcy94c3RhdGUvZXMvZW52aXJvbm1lbnQuanM/MTU4MSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgSVNfUFJPRFVDVElPTiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG5cbmV4cG9ydCB7IElTX1BST0RVQ1RJT04gfTtcbiJdLCJuYW1lcyI6WyJJU19QUk9EVUNUSU9OIiwicHJvY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/environment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/index.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionTypes: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_10__.ActionTypes),\n/* harmony export */   Interpreter: () => (/* reexport safe */ _interpreter_js__WEBPACK_IMPORTED_MODULE_2__.Interpreter),\n/* harmony export */   InterpreterStatus: () => (/* reexport safe */ _interpreter_js__WEBPACK_IMPORTED_MODULE_2__.InterpreterStatus),\n/* harmony export */   Machine: () => (/* reexport safe */ _Machine_js__WEBPACK_IMPORTED_MODULE_3__.Machine),\n/* harmony export */   SpecialTargets: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_10__.SpecialTargets),\n/* harmony export */   State: () => (/* reexport safe */ _State_js__WEBPACK_IMPORTED_MODULE_7__.State),\n/* harmony export */   StateNode: () => (/* reexport safe */ _StateNode_js__WEBPACK_IMPORTED_MODULE_8__.StateNode),\n/* harmony export */   actions: () => (/* reexport module object */ _actions_js__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   assign: () => (/* binding */ assign),\n/* harmony export */   cancel: () => (/* binding */ cancel),\n/* harmony export */   choose: () => (/* binding */ choose),\n/* harmony export */   createMachine: () => (/* reexport safe */ _Machine_js__WEBPACK_IMPORTED_MODULE_3__.createMachine),\n/* harmony export */   createSchema: () => (/* reexport safe */ _schema_js__WEBPACK_IMPORTED_MODULE_6__.createSchema),\n/* harmony export */   doneInvoke: () => (/* binding */ doneInvoke),\n/* harmony export */   forwardTo: () => (/* binding */ forwardTo),\n/* harmony export */   interpret: () => (/* reexport safe */ _interpreter_js__WEBPACK_IMPORTED_MODULE_2__.interpret),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   mapState: () => (/* reexport safe */ _mapState_js__WEBPACK_IMPORTED_MODULE_4__.mapState),\n/* harmony export */   matchState: () => (/* reexport safe */ _match_js__WEBPACK_IMPORTED_MODULE_5__.matchState),\n/* harmony export */   matchesState: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_11__.matchesState),\n/* harmony export */   pure: () => (/* binding */ pure),\n/* harmony export */   raise: () => (/* binding */ raise),\n/* harmony export */   send: () => (/* binding */ send),\n/* harmony export */   sendParent: () => (/* binding */ sendParent),\n/* harmony export */   sendTo: () => (/* binding */ sendTo),\n/* harmony export */   sendUpdate: () => (/* binding */ sendUpdate),\n/* harmony export */   spawn: () => (/* reexport safe */ _interpreter_js__WEBPACK_IMPORTED_MODULE_2__.spawn),\n/* harmony export */   spawnBehavior: () => (/* reexport safe */ _behaviors_js__WEBPACK_IMPORTED_MODULE_9__.spawnBehavior),\n/* harmony export */   stop: () => (/* binding */ stop),\n/* harmony export */   t: () => (/* reexport safe */ _schema_js__WEBPACK_IMPORTED_MODULE_6__.t),\n/* harmony export */   toActorRef: () => (/* reexport safe */ _Actor_js__WEBPACK_IMPORTED_MODULE_1__.toActorRef),\n/* harmony export */   toEventObject: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_11__.toEventObject),\n/* harmony export */   toObserver: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_11__.toObserver),\n/* harmony export */   toSCXMLEvent: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_11__.toSCXMLEvent)\n/* harmony export */ });\n/* harmony import */ var _actions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actions.js */ \"(ssr)/./node_modules/xstate/es/actions.js\");\n/* harmony import */ var _Actor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Actor.js */ \"(ssr)/./node_modules/xstate/es/Actor.js\");\n/* harmony import */ var _interpreter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./interpreter.js */ \"(ssr)/./node_modules/xstate/es/interpreter.js\");\n/* harmony import */ var _Machine_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Machine.js */ \"(ssr)/./node_modules/xstate/es/Machine.js\");\n/* harmony import */ var _mapState_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mapState.js */ \"(ssr)/./node_modules/xstate/es/mapState.js\");\n/* harmony import */ var _match_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./match.js */ \"(ssr)/./node_modules/xstate/es/match.js\");\n/* harmony import */ var _schema_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./schema.js */ \"(ssr)/./node_modules/xstate/es/schema.js\");\n/* harmony import */ var _State_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./State.js */ \"(ssr)/./node_modules/xstate/es/State.js\");\n/* harmony import */ var _StateNode_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./StateNode.js */ \"(ssr)/./node_modules/xstate/es/StateNode.js\");\n/* harmony import */ var _behaviors_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./behaviors.js */ \"(ssr)/./node_modules/xstate/es/behaviors.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/xstate/es/types.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar assign = _actions_js__WEBPACK_IMPORTED_MODULE_0__.assign, cancel = _actions_js__WEBPACK_IMPORTED_MODULE_0__.cancel, send = _actions_js__WEBPACK_IMPORTED_MODULE_0__.send, sendTo = _actions_js__WEBPACK_IMPORTED_MODULE_0__.sendTo, sendParent = _actions_js__WEBPACK_IMPORTED_MODULE_0__.sendParent, sendUpdate = _actions_js__WEBPACK_IMPORTED_MODULE_0__.sendUpdate, forwardTo = _actions_js__WEBPACK_IMPORTED_MODULE_0__.forwardTo, doneInvoke = _actions_js__WEBPACK_IMPORTED_MODULE_0__.doneInvoke, raise = _actions_js__WEBPACK_IMPORTED_MODULE_0__.raise, log = _actions_js__WEBPACK_IMPORTED_MODULE_0__.log, pure = _actions_js__WEBPACK_IMPORTED_MODULE_0__.pure, choose = _actions_js__WEBPACK_IMPORTED_MODULE_0__.choose, stop = _actions_js__WEBPACK_IMPORTED_MODULE_0__.stop;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNFM7QUFDcFE7QUFDckI7QUFDcUI7QUFDNEM7QUFDOUI7QUFDYjtBQUNEO0FBQ007QUFDWDtBQUNRO0FBQ0k7QUFDVTtBQUMwQjtBQUVuRixJQUFJQSxTQUFTQywrQ0FBUUEsRUFDakJDLFNBQVNDLCtDQUFRQSxFQUNqQkMsT0FBT0MsNkNBQU1BLEVBQ2JDLFNBQVNDLCtDQUFRQSxFQUNqQkMsYUFBYUMsbURBQVlBLEVBQ3pCQyxhQUFhQyxtREFBWUEsRUFDekJDLFlBQVlDLGtEQUFXQSxFQUN2QkMsYUFBYUMsbURBQVlBLEVBQ3pCQyxRQUFRQyw4Q0FBT0EsRUFDZkMsTUFBTUMsNENBQUtBLEVBQ1hDLE9BQU9DLDZDQUFNQSxFQUNiQyxTQUFTQywrQ0FBUUEsRUFDakJDLE9BQU9DLDZDQUFNQTtBQUVzRyIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0bmV4dC8uL25vZGVfbW9kdWxlcy94c3RhdGUvZXMvaW5kZXguanM/ODg3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NpZ24gYXMgYXNzaWduJDEsIGNhbmNlbCBhcyBjYW5jZWwkMSwgc2VuZCBhcyBzZW5kJDEsIHNlbmRUbyBhcyBzZW5kVG8kMSwgc2VuZFBhcmVudCBhcyBzZW5kUGFyZW50JDEsIHNlbmRVcGRhdGUgYXMgc2VuZFVwZGF0ZSQxLCBmb3J3YXJkVG8gYXMgZm9yd2FyZFRvJDEsIGRvbmVJbnZva2UgYXMgZG9uZUludm9rZSQxLCByYWlzZSBhcyByYWlzZSQxLCBsb2cgYXMgbG9nJDEsIHB1cmUgYXMgcHVyZSQxLCBjaG9vc2UgYXMgY2hvb3NlJDEsIHN0b3AgYXMgc3RvcCQxIH0gZnJvbSAnLi9hY3Rpb25zLmpzJztcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi9hY3Rpb25zLmpzJztcbmV4cG9ydCB7IGFjdGlvbnMgfTtcbmV4cG9ydCB7IHRvQWN0b3JSZWYgfSBmcm9tICcuL0FjdG9yLmpzJztcbmV4cG9ydCB7IEludGVycHJldGVyLCBJbnRlcnByZXRlclN0YXR1cywgaW50ZXJwcmV0LCBzcGF3biB9IGZyb20gJy4vaW50ZXJwcmV0ZXIuanMnO1xuZXhwb3J0IHsgTWFjaGluZSwgY3JlYXRlTWFjaGluZSB9IGZyb20gJy4vTWFjaGluZS5qcyc7XG5leHBvcnQgeyBtYXBTdGF0ZSB9IGZyb20gJy4vbWFwU3RhdGUuanMnO1xuZXhwb3J0IHsgbWF0Y2hTdGF0ZSB9IGZyb20gJy4vbWF0Y2guanMnO1xuZXhwb3J0IHsgY3JlYXRlU2NoZW1hLCB0IH0gZnJvbSAnLi9zY2hlbWEuanMnO1xuZXhwb3J0IHsgU3RhdGUgfSBmcm9tICcuL1N0YXRlLmpzJztcbmV4cG9ydCB7IFN0YXRlTm9kZSB9IGZyb20gJy4vU3RhdGVOb2RlLmpzJztcbmV4cG9ydCB7IHNwYXduQmVoYXZpb3IgfSBmcm9tICcuL2JlaGF2aW9ycy5qcyc7XG5leHBvcnQgeyBBY3Rpb25UeXBlcywgU3BlY2lhbFRhcmdldHMgfSBmcm9tICcuL3R5cGVzLmpzJztcbmV4cG9ydCB7IG1hdGNoZXNTdGF0ZSwgdG9FdmVudE9iamVjdCwgdG9PYnNlcnZlciwgdG9TQ1hNTEV2ZW50IH0gZnJvbSAnLi91dGlscy5qcyc7XG5cbnZhciBhc3NpZ24gPSBhc3NpZ24kMSxcbiAgICBjYW5jZWwgPSBjYW5jZWwkMSxcbiAgICBzZW5kID0gc2VuZCQxLFxuICAgIHNlbmRUbyA9IHNlbmRUbyQxLFxuICAgIHNlbmRQYXJlbnQgPSBzZW5kUGFyZW50JDEsXG4gICAgc2VuZFVwZGF0ZSA9IHNlbmRVcGRhdGUkMSxcbiAgICBmb3J3YXJkVG8gPSBmb3J3YXJkVG8kMSxcbiAgICBkb25lSW52b2tlID0gZG9uZUludm9rZSQxLFxuICAgIHJhaXNlID0gcmFpc2UkMSxcbiAgICBsb2cgPSBsb2ckMSxcbiAgICBwdXJlID0gcHVyZSQxLFxuICAgIGNob29zZSA9IGNob29zZSQxLFxuICAgIHN0b3AgPSBzdG9wJDE7XG5cbmV4cG9ydCB7IGFzc2lnbiwgY2FuY2VsLCBjaG9vc2UsIGRvbmVJbnZva2UsIGZvcndhcmRUbywgbG9nLCBwdXJlLCByYWlzZSwgc2VuZCwgc2VuZFBhcmVudCwgc2VuZFRvLCBzZW5kVXBkYXRlLCBzdG9wIH07XG4iXSwibmFtZXMiOlsiYXNzaWduIiwiYXNzaWduJDEiLCJjYW5jZWwiLCJjYW5jZWwkMSIsInNlbmQiLCJzZW5kJDEiLCJzZW5kVG8iLCJzZW5kVG8kMSIsInNlbmRQYXJlbnQiLCJzZW5kUGFyZW50JDEiLCJzZW5kVXBkYXRlIiwic2VuZFVwZGF0ZSQxIiwiZm9yd2FyZFRvIiwiZm9yd2FyZFRvJDEiLCJkb25lSW52b2tlIiwiZG9uZUludm9rZSQxIiwicmFpc2UiLCJyYWlzZSQxIiwibG9nIiwibG9nJDEiLCJwdXJlIiwicHVyZSQxIiwiY2hvb3NlIiwiY2hvb3NlJDEiLCJzdG9wIiwic3RvcCQxIiwiYWN0aW9ucyIsInRvQWN0b3JSZWYiLCJJbnRlcnByZXRlciIsIkludGVycHJldGVyU3RhdHVzIiwiaW50ZXJwcmV0Iiwic3Bhd24iLCJNYWNoaW5lIiwiY3JlYXRlTWFjaGluZSIsIm1hcFN0YXRlIiwibWF0Y2hTdGF0ZSIsImNyZWF0ZVNjaGVtYSIsInQiLCJTdGF0ZSIsIlN0YXRlTm9kZSIsInNwYXduQmVoYXZpb3IiLCJBY3Rpb25UeXBlcyIsIlNwZWNpYWxUYXJnZXRzIiwibWF0Y2hlc1N0YXRlIiwidG9FdmVudE9iamVjdCIsInRvT2JzZXJ2ZXIiLCJ0b1NDWE1MRXZlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/interpreter.js":
/*!***********************************************!*\
  !*** ./node_modules/xstate/es/interpreter.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Interpreter: () => (/* binding */ Interpreter),\n/* harmony export */   InterpreterStatus: () => (/* binding */ InterpreterStatus),\n/* harmony export */   interpret: () => (/* binding */ interpret),\n/* harmony export */   spawn: () => (/* binding */ spawn)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/xstate/es/types.js\");\n/* harmony import */ var _State_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./State.js */ \"(ssr)/./node_modules/xstate/es/State.js\");\n/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./actionTypes.js */ \"(ssr)/./node_modules/xstate/es/actionTypes.js\");\n/* harmony import */ var _actions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./actions.js */ \"(ssr)/./node_modules/xstate/es/actions.js\");\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environment.js */ \"(ssr)/./node_modules/xstate/es/environment.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n/* harmony import */ var _scheduler_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./scheduler.js */ \"(ssr)/./node_modules/xstate/es/scheduler.js\");\n/* harmony import */ var _Actor_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Actor.js */ \"(ssr)/./node_modules/xstate/es/Actor.js\");\n/* harmony import */ var _registry_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./registry.js */ \"(ssr)/./node_modules/xstate/es/registry.js\");\n/* harmony import */ var _devTools_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./devTools.js */ \"(ssr)/./node_modules/xstate/es/devTools.js\");\n/* harmony import */ var _serviceScope_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./serviceScope.js */ \"(ssr)/./node_modules/xstate/es/serviceScope.js\");\n/* harmony import */ var _behaviors_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./behaviors.js */ \"(ssr)/./node_modules/xstate/es/behaviors.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar DEFAULT_SPAWN_OPTIONS = {\n    sync: false,\n    autoForward: false\n};\nvar InterpreterStatus;\n(function(InterpreterStatus) {\n    InterpreterStatus[InterpreterStatus[\"NotStarted\"] = 0] = \"NotStarted\";\n    InterpreterStatus[InterpreterStatus[\"Running\"] = 1] = \"Running\";\n    InterpreterStatus[InterpreterStatus[\"Stopped\"] = 2] = \"Stopped\";\n})(InterpreterStatus || (InterpreterStatus = {}));\nvar Interpreter = /*#__PURE__*/ /** @class */ function() {\n    /**\r\n   * Creates a new Interpreter instance (i.e., service) for the given machine with the provided options, if any.\r\n   *\r\n   * @param machine The machine to be interpreted\r\n   * @param options Interpreter options\r\n   */ function Interpreter(machine, options) {\n        if (options === void 0) {\n            options = Interpreter.defaultOptions;\n        }\n        var _this = this;\n        this.machine = machine;\n        this.delayedEventsMap = {};\n        this.listeners = new Set();\n        this.contextListeners = new Set();\n        this.stopListeners = new Set();\n        this.doneListeners = new Set();\n        this.eventListeners = new Set();\n        this.sendListeners = new Set();\n        /**\r\n     * Whether the service is started.\r\n     */ this.initialized = false;\n        this.status = InterpreterStatus.NotStarted;\n        this.children = new Map();\n        this.forwardTo = new Set();\n        this._outgoingQueue = [];\n        /**\r\n     * Alias for Interpreter.prototype.start\r\n     */ this.init = this.start;\n        /**\r\n     * Sends an event to the running interpreter to trigger a transition.\r\n     *\r\n     * An array of events (batched) can be sent as well, which will send all\r\n     * batched events to the running interpreter. The listeners will be\r\n     * notified only **once** when all events are processed.\r\n     *\r\n     * @param event The event(s) to send\r\n     */ this.send = function(event1, payload) {\n            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(event1)) {\n                _this.batch(event1);\n                return _this.state;\n            }\n            var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toEventObject)(event1, payload));\n            if (_this.status === InterpreterStatus.Stopped) {\n                // do nothing\n                if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, 'Event \"'.concat(_event.name, '\" was sent to stopped service \"').concat(_this.machine.id, '\". This service has already reached its final state, and will not transition.\\nEvent: ').concat(JSON.stringify(_event.data)));\n                }\n                return _this.state;\n            }\n            if (_this.status !== InterpreterStatus.Running && !_this.options.deferEvents) {\n                throw new Error('Event \"'.concat(_event.name, '\" was sent to uninitialized service \"').concat(_this.machine.id // tslint:disable-next-line:max-line-length\n                , '\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.\\nEvent: ').concat(JSON.stringify(_event.data)));\n            }\n            _this.scheduler.schedule(function() {\n                // Forward copy of event to child actors\n                _this.forward(_event);\n                var nextState = _this._nextState(_event);\n                _this.update(nextState, _event);\n            });\n            return _this._state; // TODO: deprecate (should return void)\n        // tslint:disable-next-line:semicolon\n        };\n        this.sendTo = function(event1, to, immediate) {\n            var isParent = _this.parent && (to === _types_js__WEBPACK_IMPORTED_MODULE_2__.SpecialTargets.Parent || _this.parent.id === to);\n            var target = isParent ? _this.parent : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(to) ? to === _types_js__WEBPACK_IMPORTED_MODULE_2__.SpecialTargets.Internal ? _this : _this.children.get(to) || _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.get(to) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isActor)(to) ? to : undefined;\n            if (!target) {\n                if (!isParent) {\n                    throw new Error(\"Unable to send event to child '\".concat(to, \"' from service '\").concat(_this.id, \"'.\"));\n                } // tslint:disable-next-line:no-console\n                if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, \"Service '\".concat(_this.id, \"' has no parent: unable to send event \").concat(event1.type));\n                }\n                return;\n            }\n            if (\"machine\" in target) {\n                // perhaps those events should be rejected in the parent\n                // but atm it doesn't have easy access to all of the information that is required to do it reliably\n                if (_this.status !== InterpreterStatus.Stopped || _this.parent !== target || // we need to send events to the parent from exit handlers of a machine that reached its final state\n                _this.state.done) {\n                    // Send SCXML events to machines\n                    var scxmlEvent = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, event1), {\n                        name: event1.name === _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.error ? \"\".concat((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(_this.id)) : event1.name,\n                        origin: _this.sessionId\n                    });\n                    if (!immediate && _this.machine.config.predictableActionArguments) {\n                        _this._outgoingQueue.push([\n                            target,\n                            scxmlEvent\n                        ]);\n                    } else {\n                        target.send(scxmlEvent);\n                    }\n                }\n            } else {\n                // Send normal events to other targets\n                if (!immediate && _this.machine.config.predictableActionArguments) {\n                    _this._outgoingQueue.push([\n                        target,\n                        event1.data\n                    ]);\n                } else {\n                    target.send(event1.data);\n                }\n            }\n        };\n        this._exec = function(action, context, _event, actionFunctionMap) {\n            if (actionFunctionMap === void 0) {\n                actionFunctionMap = _this.machine.options.actions;\n            }\n            var actionOrExec = action.exec || (0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.getActionFunction)(action.type, actionFunctionMap);\n            var exec = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(actionOrExec) ? actionOrExec : actionOrExec ? actionOrExec.exec : action.exec;\n            if (exec) {\n                try {\n                    return exec(context, _event.data, !_this.machine.config.predictableActionArguments ? {\n                        action: action,\n                        state: _this.state,\n                        _event: _event\n                    } : {\n                        action: action,\n                        _event: _event\n                    });\n                } catch (err) {\n                    if (_this.parent) {\n                        _this.parent.send({\n                            type: \"xstate.error\",\n                            data: err\n                        });\n                    }\n                    throw err;\n                }\n            }\n            switch(action.type){\n                case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.raise:\n                    {\n                        // if raise action reached the interpreter then it's a delayed one\n                        var sendAction_1 = action;\n                        _this.defer(sendAction_1);\n                        break;\n                    }\n                case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.send:\n                    var sendAction = action;\n                    if (typeof sendAction.delay === \"number\") {\n                        _this.defer(sendAction);\n                        return;\n                    } else {\n                        if (sendAction.to) {\n                            _this.sendTo(sendAction._event, sendAction.to, _event === _actions_js__WEBPACK_IMPORTED_MODULE_6__.initEvent);\n                        } else {\n                            _this.send(sendAction._event);\n                        }\n                    }\n                    break;\n                case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.cancel:\n                    _this.cancel(action.sendId);\n                    break;\n                case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.start:\n                    {\n                        if (_this.status !== InterpreterStatus.Running) {\n                            return;\n                        }\n                        var activity = action.activity; // If the activity will be stopped right after it's started\n                        // (such as in transient states)\n                        // don't bother starting the activity.\n                        if (!_this.machine.config.predictableActionArguments && !_this.state.activities[activity.id || activity.type]) {\n                            break;\n                        } // Invoked services\n                        if (activity.type === _types_js__WEBPACK_IMPORTED_MODULE_2__.ActionTypes.Invoke) {\n                            var invokeSource = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toInvokeSource)(activity.src);\n                            var serviceCreator = _this.machine.options.services ? _this.machine.options.services[invokeSource.type] : undefined;\n                            var id = activity.id, data = activity.data;\n                            if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!(\"forward\" in activity), \"`forward` property is deprecated (found in invocation of '\".concat(activity.src, \"' in in machine '\").concat(_this.machine.id, \"'). \") + \"Please use `autoForward` instead.\");\n                            }\n                            var autoForward = \"autoForward\" in activity ? activity.autoForward : !!activity.forward;\n                            if (!serviceCreator) {\n                                // tslint:disable-next-line:no-console\n                                if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, \"No service found for invocation '\".concat(activity.src, \"' in machine '\").concat(_this.machine.id, \"'.\"));\n                                }\n                                return;\n                            }\n                            var resolvedData = data ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(data, context, _event) : undefined;\n                            if (typeof serviceCreator === \"string\") {\n                                // TODO: warn\n                                return;\n                            }\n                            var source = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(serviceCreator) ? serviceCreator(context, _event.data, {\n                                data: resolvedData,\n                                src: invokeSource,\n                                meta: activity.meta\n                            }) : serviceCreator;\n                            if (!source) {\n                                // TODO: warn?\n                                return;\n                            }\n                            var options = void 0;\n                            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(source)) {\n                                source = resolvedData ? source.withContext(resolvedData) : source;\n                                options = {\n                                    autoForward: autoForward\n                                };\n                            }\n                            _this.spawn(source, id, options);\n                        } else {\n                            _this.spawnActivity(activity);\n                        }\n                        break;\n                    }\n                case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.stop:\n                    {\n                        _this.stopChild(action.activity.id);\n                        break;\n                    }\n                case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.log:\n                    var _a = action, label = _a.label, value = _a.value;\n                    if (label) {\n                        _this.logger(label, value);\n                    } else {\n                        _this.logger(value);\n                    }\n                    break;\n                default:\n                    if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, \"No implementation found for action type '\".concat(action.type, \"'\"));\n                    }\n                    break;\n            }\n        };\n        var resolvedOptions = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, Interpreter.defaultOptions), options);\n        var clock = resolvedOptions.clock, logger = resolvedOptions.logger, parent = resolvedOptions.parent, id = resolvedOptions.id;\n        var resolvedId = id !== undefined ? id : machine.id;\n        this.id = resolvedId;\n        this.logger = logger;\n        this.clock = clock;\n        this.parent = parent;\n        this.options = resolvedOptions;\n        this.scheduler = new _scheduler_js__WEBPACK_IMPORTED_MODULE_7__.Scheduler({\n            deferEvents: this.options.deferEvents\n        });\n        this.sessionId = _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.bookId();\n    }\n    Object.defineProperty(Interpreter.prototype, \"initialState\", {\n        get: function() {\n            var _this = this;\n            if (this._initialState) {\n                return this._initialState;\n            }\n            return (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(this, function() {\n                _this._initialState = _this.machine.initialState;\n                return _this._initialState;\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Interpreter.prototype, \"state\", {\n        /**\r\n     * @deprecated Use `.getSnapshot()` instead.\r\n     */ get: function() {\n            if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(this.status !== InterpreterStatus.NotStarted, \"Attempted to read state from uninitialized service '\".concat(this.id, \"'. Make sure the service is started first.\"));\n            }\n            return this._state;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\r\n   * Executes the actions of the given state, with that state's `context` and `event`.\r\n   *\r\n   * @param state The state whose actions will be executed\r\n   * @param actionsConfig The action implementations to use\r\n   */ Interpreter.prototype.execute = function(state, actionsConfig) {\n        var e_1, _a;\n        try {\n            for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(state.actions), _c = _b.next(); !_c.done; _c = _b.next()){\n                var action = _c.value;\n                this.exec(action, state, actionsConfig);\n            }\n        } catch (e_1_1) {\n            e_1 = {\n                error: e_1_1\n            };\n        } finally{\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally{\n                if (e_1) throw e_1.error;\n            }\n        }\n    };\n    Interpreter.prototype.update = function(state, _event) {\n        var e_2, _a, e_3, _b, e_4, _c, e_5, _d;\n        var _this = this; // Attach session ID to state\n        state._sessionid = this.sessionId; // Update state\n        this._state = state; // Execute actions\n        if ((!this.machine.config.predictableActionArguments || // this is currently required to execute initial actions as the `initialState` gets cached\n        // we can't just recompute it (and execute actions while doing so) because we try to preserve identity of actors created within initial assigns\n        _event === _actions_js__WEBPACK_IMPORTED_MODULE_6__.initEvent) && this.options.execute) {\n            this.execute(this.state);\n        } else {\n            var item = void 0;\n            while(item = this._outgoingQueue.shift()){\n                item[0].send(item[1]);\n            }\n        } // Update children\n        this.children.forEach(function(child) {\n            _this.state.children[child.id] = child;\n        }); // Dev tools\n        if (this.devTools) {\n            this.devTools.send(_event.data, state);\n        } // Execute listeners\n        if (state.event) {\n            try {\n                for(var _e = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.eventListeners), _f = _e.next(); !_f.done; _f = _e.next()){\n                    var listener = _f.value;\n                    listener(state.event);\n                }\n            } catch (e_2_1) {\n                e_2 = {\n                    error: e_2_1\n                };\n            } finally{\n                try {\n                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);\n                } finally{\n                    if (e_2) throw e_2.error;\n                }\n            }\n        }\n        try {\n            for(var _g = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.listeners), _h = _g.next(); !_h.done; _h = _g.next()){\n                var listener = _h.value;\n                listener(state, state.event);\n            }\n        } catch (e_3_1) {\n            e_3 = {\n                error: e_3_1\n            };\n        } finally{\n            try {\n                if (_h && !_h.done && (_b = _g.return)) _b.call(_g);\n            } finally{\n                if (e_3) throw e_3.error;\n            }\n        }\n        try {\n            for(var _j = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.contextListeners), _k = _j.next(); !_k.done; _k = _j.next()){\n                var contextListener = _k.value;\n                contextListener(this.state.context, this.state.history ? this.state.history.context : undefined);\n            }\n        } catch (e_4_1) {\n            e_4 = {\n                error: e_4_1\n            };\n        } finally{\n            try {\n                if (_k && !_k.done && (_c = _j.return)) _c.call(_j);\n            } finally{\n                if (e_4) throw e_4.error;\n            }\n        }\n        if (this.state.done) {\n            // get final child state node\n            var finalChildStateNode = state.configuration.find(function(sn) {\n                return sn.type === \"final\" && sn.parent === _this.machine;\n            });\n            var doneData = finalChildStateNode && finalChildStateNode.doneData ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(finalChildStateNode.doneData, state.context, _event) : undefined;\n            this._doneEvent = (0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.doneInvoke)(this.id, doneData);\n            try {\n                for(var _l = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.doneListeners), _m = _l.next(); !_m.done; _m = _l.next()){\n                    var listener = _m.value;\n                    listener(this._doneEvent);\n                }\n            } catch (e_5_1) {\n                e_5 = {\n                    error: e_5_1\n                };\n            } finally{\n                try {\n                    if (_m && !_m.done && (_d = _l.return)) _d.call(_l);\n                } finally{\n                    if (e_5) throw e_5.error;\n                }\n            }\n            this._stop();\n            this._stopChildren();\n            _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.free(this.sessionId);\n        }\n    };\n    /*\r\n   * Adds a listener that is notified whenever a state transition happens. The listener is called with\r\n   * the next state and the event object that caused the state transition.\r\n   *\r\n   * @param listener The state listener\r\n   */ Interpreter.prototype.onTransition = function(listener) {\n        this.listeners.add(listener); // Send current state to listener\n        if (this.status === InterpreterStatus.Running) {\n            listener(this.state, this.state.event);\n        }\n        return this;\n    };\n    Interpreter.prototype.subscribe = function(nextListenerOrObserver, _, completeListener) {\n        var _this = this;\n        var observer = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toObserver)(nextListenerOrObserver, _, completeListener);\n        this.listeners.add(observer.next); // Send current state to listener\n        if (this.status !== InterpreterStatus.NotStarted) {\n            observer.next(this.state);\n        }\n        var completeOnce = function() {\n            _this.doneListeners.delete(completeOnce);\n            _this.stopListeners.delete(completeOnce);\n            observer.complete();\n        };\n        if (this.status === InterpreterStatus.Stopped) {\n            observer.complete();\n        } else {\n            this.onDone(completeOnce);\n            this.onStop(completeOnce);\n        }\n        return {\n            unsubscribe: function() {\n                _this.listeners.delete(observer.next);\n                _this.doneListeners.delete(completeOnce);\n                _this.stopListeners.delete(completeOnce);\n            }\n        };\n    };\n    /**\r\n   * Adds an event listener that is notified whenever an event is sent to the running interpreter.\r\n   * @param listener The event listener\r\n   */ Interpreter.prototype.onEvent = function(listener) {\n        this.eventListeners.add(listener);\n        return this;\n    };\n    /**\r\n   * Adds an event listener that is notified whenever a `send` event occurs.\r\n   * @param listener The event listener\r\n   */ Interpreter.prototype.onSend = function(listener) {\n        this.sendListeners.add(listener);\n        return this;\n    };\n    /**\r\n   * Adds a context listener that is notified whenever the state context changes.\r\n   * @param listener The context listener\r\n   */ Interpreter.prototype.onChange = function(listener) {\n        this.contextListeners.add(listener);\n        return this;\n    };\n    /**\r\n   * Adds a listener that is notified when the machine is stopped.\r\n   * @param listener The listener\r\n   */ Interpreter.prototype.onStop = function(listener) {\n        this.stopListeners.add(listener);\n        return this;\n    };\n    /**\r\n   * Adds a state listener that is notified when the statechart has reached its final state.\r\n   * @param listener The state listener\r\n   */ Interpreter.prototype.onDone = function(listener) {\n        if (this.status === InterpreterStatus.Stopped && this._doneEvent) {\n            listener(this._doneEvent);\n        } else {\n            this.doneListeners.add(listener);\n        }\n        return this;\n    };\n    /**\r\n   * Removes a listener.\r\n   * @param listener The listener to remove\r\n   */ Interpreter.prototype.off = function(listener) {\n        this.listeners.delete(listener);\n        this.eventListeners.delete(listener);\n        this.sendListeners.delete(listener);\n        this.stopListeners.delete(listener);\n        this.doneListeners.delete(listener);\n        this.contextListeners.delete(listener);\n        return this;\n    };\n    /**\r\n   * Starts the interpreter from the given state, or the initial state.\r\n   * @param initialState The state to start the statechart from\r\n   */ Interpreter.prototype.start = function(initialState) {\n        var _this = this;\n        if (this.status === InterpreterStatus.Running) {\n            // Do not restart the service if it is already started\n            return this;\n        } // yes, it's a hack but we need the related cache to be populated for some things to work (like delayed transitions)\n        // this is usually called by `machine.getInitialState` but if we rehydrate from a state we might bypass this call\n        // we also don't want to call this method here as it resolves the full initial state which might involve calling assign actions\n        // and that could potentially lead to some unwanted side-effects (even such as creating some rogue actors)\n        this.machine._init();\n        _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.register(this.sessionId, this);\n        this.initialized = true;\n        this.status = InterpreterStatus.Running;\n        var resolvedState = initialState === undefined ? this.initialState : (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(this, function() {\n            return (0,_State_js__WEBPACK_IMPORTED_MODULE_9__.isStateConfig)(initialState) ? _this.machine.resolveState(initialState) : _this.machine.resolveState(_State_js__WEBPACK_IMPORTED_MODULE_9__.State.from(initialState, _this.machine.context));\n        });\n        if (this.options.devTools) {\n            this.attachDev();\n        }\n        this.scheduler.initialize(function() {\n            _this.update(resolvedState, _actions_js__WEBPACK_IMPORTED_MODULE_6__.initEvent);\n        });\n        return this;\n    };\n    Interpreter.prototype._stopChildren = function() {\n        // TODO: think about converting those to actions\n        this.children.forEach(function(child) {\n            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(child.stop)) {\n                child.stop();\n            }\n        });\n        this.children.clear();\n    };\n    Interpreter.prototype._stop = function() {\n        var e_6, _a, e_7, _b, e_8, _c, e_9, _d, e_10, _e;\n        try {\n            for(var _f = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.listeners), _g = _f.next(); !_g.done; _g = _f.next()){\n                var listener = _g.value;\n                this.listeners.delete(listener);\n            }\n        } catch (e_6_1) {\n            e_6 = {\n                error: e_6_1\n            };\n        } finally{\n            try {\n                if (_g && !_g.done && (_a = _f.return)) _a.call(_f);\n            } finally{\n                if (e_6) throw e_6.error;\n            }\n        }\n        try {\n            for(var _h = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.stopListeners), _j = _h.next(); !_j.done; _j = _h.next()){\n                var listener = _j.value; // call listener, then remove\n                listener();\n                this.stopListeners.delete(listener);\n            }\n        } catch (e_7_1) {\n            e_7 = {\n                error: e_7_1\n            };\n        } finally{\n            try {\n                if (_j && !_j.done && (_b = _h.return)) _b.call(_h);\n            } finally{\n                if (e_7) throw e_7.error;\n            }\n        }\n        try {\n            for(var _k = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.contextListeners), _l = _k.next(); !_l.done; _l = _k.next()){\n                var listener = _l.value;\n                this.contextListeners.delete(listener);\n            }\n        } catch (e_8_1) {\n            e_8 = {\n                error: e_8_1\n            };\n        } finally{\n            try {\n                if (_l && !_l.done && (_c = _k.return)) _c.call(_k);\n            } finally{\n                if (e_8) throw e_8.error;\n            }\n        }\n        try {\n            for(var _m = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.doneListeners), _o = _m.next(); !_o.done; _o = _m.next()){\n                var listener = _o.value;\n                this.doneListeners.delete(listener);\n            }\n        } catch (e_9_1) {\n            e_9 = {\n                error: e_9_1\n            };\n        } finally{\n            try {\n                if (_o && !_o.done && (_d = _m.return)) _d.call(_m);\n            } finally{\n                if (e_9) throw e_9.error;\n            }\n        }\n        if (!this.initialized) {\n            // Interpreter already stopped; do nothing\n            return this;\n        }\n        this.initialized = false;\n        this.status = InterpreterStatus.Stopped;\n        this._initialState = undefined;\n        try {\n            // we are going to stop within the current sync frame\n            // so we can safely just cancel this here as nothing async should be fired anyway\n            for(var _p = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(Object.keys(this.delayedEventsMap)), _q = _p.next(); !_q.done; _q = _p.next()){\n                var key = _q.value;\n                this.clock.clearTimeout(this.delayedEventsMap[key]);\n            }\n        } catch (e_10_1) {\n            e_10 = {\n                error: e_10_1\n            };\n        } finally{\n            try {\n                if (_q && !_q.done && (_e = _p.return)) _e.call(_p);\n            } finally{\n                if (e_10) throw e_10.error;\n            }\n        } // clear everything that might be enqueued\n        this.scheduler.clear();\n        this.scheduler = new _scheduler_js__WEBPACK_IMPORTED_MODULE_7__.Scheduler({\n            deferEvents: this.options.deferEvents\n        });\n    };\n    /**\r\n   * Stops the interpreter and unsubscribe all listeners.\r\n   *\r\n   * This will also notify the `onStop` listeners.\r\n   */ Interpreter.prototype.stop = function() {\n        // TODO: add warning for stopping non-root interpreters\n        var _this = this; // grab the current scheduler as it will be replaced in _stop\n        var scheduler = this.scheduler;\n        this._stop(); // let what is currently processed to be finished\n        scheduler.schedule(function() {\n            var _a;\n            if ((_a = _this._state) === null || _a === void 0 ? void 0 : _a.done) {\n                return;\n            } // it feels weird to handle this here but we need to handle this even slightly \"out of band\"\n            var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)({\n                type: \"xstate.stop\"\n            });\n            var nextState = (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(_this, function() {\n                var exitActions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__read)(_this.state.configuration), false).sort(function(a, b) {\n                    return b.order - a.order;\n                }).map(function(stateNode) {\n                    return (0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.toActionObjects)(stateNode.onExit, _this.machine.options.actions);\n                }));\n                var _a = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__read)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.resolveActions)(_this.machine, _this.state, _this.state.context, _event, [\n                    {\n                        type: \"exit\",\n                        actions: exitActions\n                    }\n                ], _this.machine.config.predictableActionArguments ? _this._exec : undefined, _this.machine.config.predictableActionArguments || _this.machine.config.preserveActionOrder), 2), resolvedActions = _a[0], updatedContext = _a[1];\n                var newState = new _State_js__WEBPACK_IMPORTED_MODULE_9__.State({\n                    value: _this.state.value,\n                    context: updatedContext,\n                    _event: _event,\n                    _sessionid: _this.sessionId,\n                    historyValue: undefined,\n                    history: _this.state,\n                    actions: resolvedActions.filter(function(action) {\n                        return !(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isRaisableAction)(action);\n                    }),\n                    activities: {},\n                    events: [],\n                    configuration: [],\n                    transitions: [],\n                    children: {},\n                    done: _this.state.done,\n                    tags: _this.state.tags,\n                    machine: _this.machine\n                });\n                newState.changed = true;\n                return newState;\n            });\n            _this.update(nextState, _event);\n            _this._stopChildren();\n            _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.free(_this.sessionId);\n        });\n        return this;\n    };\n    Interpreter.prototype.batch = function(events) {\n        var _this = this;\n        if (this.status === InterpreterStatus.NotStarted && this.options.deferEvents) {\n            // tslint:disable-next-line:no-console\n            if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, \"\".concat(events.length, ' event(s) were sent to uninitialized service \"').concat(this.machine.id, '\" and are deferred. Make sure .start() is called for this service.\\nEvent: ').concat(JSON.stringify(event)));\n            }\n        } else if (this.status !== InterpreterStatus.Running) {\n            throw new Error(\"\".concat(events.length, ' event(s) were sent to uninitialized service \"').concat(this.machine.id, '\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.'));\n        }\n        if (!events.length) {\n            return;\n        }\n        var exec = !!this.machine.config.predictableActionArguments && this._exec;\n        this.scheduler.schedule(function() {\n            var e_11, _a;\n            var nextState = _this.state;\n            var batchChanged = false;\n            var batchedActions = [];\n            var _loop_1 = function(event_1) {\n                var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event_1);\n                _this.forward(_event);\n                nextState = (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(_this, function() {\n                    return _this.machine.transition(nextState, _event, undefined, exec || undefined);\n                });\n                batchedActions.push.apply(batchedActions, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__read)(_this.machine.config.predictableActionArguments ? nextState.actions : nextState.actions.map(function(a) {\n                    return (0,_State_js__WEBPACK_IMPORTED_MODULE_9__.bindActionToState)(a, nextState);\n                })), false));\n                batchChanged = batchChanged || !!nextState.changed;\n            };\n            try {\n                for(var events_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(events), events_1_1 = events_1.next(); !events_1_1.done; events_1_1 = events_1.next()){\n                    var event_1 = events_1_1.value;\n                    _loop_1(event_1);\n                }\n            } catch (e_11_1) {\n                e_11 = {\n                    error: e_11_1\n                };\n            } finally{\n                try {\n                    if (events_1_1 && !events_1_1.done && (_a = events_1.return)) _a.call(events_1);\n                } finally{\n                    if (e_11) throw e_11.error;\n                }\n            }\n            nextState.changed = batchChanged;\n            nextState.actions = batchedActions;\n            _this.update(nextState, (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(events[events.length - 1]));\n        });\n    };\n    /**\r\n   * Returns a send function bound to this interpreter instance.\r\n   *\r\n   * @param event The event to be sent by the sender.\r\n   */ Interpreter.prototype.sender = function(event1) {\n        return this.send.bind(this, event1);\n    };\n    Interpreter.prototype._nextState = function(event1, exec) {\n        var _this = this;\n        if (exec === void 0) {\n            exec = !!this.machine.config.predictableActionArguments && this._exec;\n        }\n        var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event1);\n        if (_event.name.indexOf(_actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.errorPlatform) === 0 && !this.state.nextEvents.some(function(nextEvent) {\n            return nextEvent.indexOf(_actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.errorPlatform) === 0;\n        })) {\n            throw _event.data.data;\n        }\n        var nextState = (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(this, function() {\n            return _this.machine.transition(_this.state, _event, undefined, exec || undefined);\n        });\n        return nextState;\n    };\n    /**\r\n   * Returns the next state given the interpreter's current state and the event.\r\n   *\r\n   * This is a pure method that does _not_ update the interpreter's state.\r\n   *\r\n   * @param event The event to determine the next state\r\n   */ Interpreter.prototype.nextState = function(event1) {\n        return this._nextState(event1, false);\n    };\n    Interpreter.prototype.forward = function(event1) {\n        var e_12, _a;\n        try {\n            for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.forwardTo), _c = _b.next(); !_c.done; _c = _b.next()){\n                var id = _c.value;\n                var child = this.children.get(id);\n                if (!child) {\n                    throw new Error(\"Unable to forward event '\".concat(event1, \"' from interpreter '\").concat(this.id, \"' to nonexistant child '\").concat(id, \"'.\"));\n                }\n                child.send(event1);\n            }\n        } catch (e_12_1) {\n            e_12 = {\n                error: e_12_1\n            };\n        } finally{\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally{\n                if (e_12) throw e_12.error;\n            }\n        }\n    };\n    Interpreter.prototype.defer = function(sendAction) {\n        var _this = this;\n        var timerId = this.clock.setTimeout(function() {\n            if (\"to\" in sendAction && sendAction.to) {\n                _this.sendTo(sendAction._event, sendAction.to, true);\n            } else {\n                _this.send(sendAction._event);\n            }\n        }, sendAction.delay);\n        if (sendAction.id) {\n            this.delayedEventsMap[sendAction.id] = timerId;\n        }\n    };\n    Interpreter.prototype.cancel = function(sendId) {\n        this.clock.clearTimeout(this.delayedEventsMap[sendId]);\n        delete this.delayedEventsMap[sendId];\n    };\n    Interpreter.prototype.exec = function(action, state, actionFunctionMap) {\n        if (actionFunctionMap === void 0) {\n            actionFunctionMap = this.machine.options.actions;\n        }\n        this._exec(action, state.context, state._event, actionFunctionMap);\n    };\n    Interpreter.prototype.removeChild = function(childId) {\n        var _a;\n        this.children.delete(childId);\n        this.forwardTo.delete(childId); // this.state might not exist at the time this is called,\n        // such as when a child is added then removed while initializing the state\n        (_a = this.state) === null || _a === void 0 ? true : delete _a.children[childId];\n    };\n    Interpreter.prototype.stopChild = function(childId) {\n        var child = this.children.get(childId);\n        if (!child) {\n            return;\n        }\n        this.removeChild(childId);\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(child.stop)) {\n            child.stop();\n        }\n    };\n    Interpreter.prototype.spawn = function(entity, name, options) {\n        if (this.status !== InterpreterStatus.Running) {\n            return (0,_Actor_js__WEBPACK_IMPORTED_MODULE_10__.createDeferredActor)(entity, name);\n        }\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isPromiseLike)(entity)) {\n            return this.spawnPromise(Promise.resolve(entity), name);\n        } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(entity)) {\n            return this.spawnCallback(entity, name);\n        } else if ((0,_Actor_js__WEBPACK_IMPORTED_MODULE_10__.isSpawnedActor)(entity)) {\n            return this.spawnActor(entity, name);\n        } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isObservable)(entity)) {\n            return this.spawnObservable(entity, name);\n        } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity)) {\n            return this.spawnMachine(entity, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), {\n                id: name\n            }));\n        } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBehavior)(entity)) {\n            return this.spawnBehavior(entity, name);\n        } else {\n            throw new Error('Unable to spawn entity \"'.concat(name, '\" of type \"').concat(typeof entity, '\".'));\n        }\n    };\n    Interpreter.prototype.spawnMachine = function(machine, options) {\n        var _this = this;\n        if (options === void 0) {\n            options = {};\n        }\n        var childService = new Interpreter(machine, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, this.options), {\n            parent: this,\n            id: options.id || machine.id\n        }));\n        var resolvedOptions = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, DEFAULT_SPAWN_OPTIONS), options);\n        if (resolvedOptions.sync) {\n            childService.onTransition(function(state) {\n                _this.send(_actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.update, {\n                    state: state,\n                    id: childService.id\n                });\n            });\n        }\n        var actor = childService;\n        this.children.set(childService.id, actor);\n        if (resolvedOptions.autoForward) {\n            this.forwardTo.add(childService.id);\n        }\n        childService.onDone(function(doneEvent) {\n            _this.removeChild(childService.id);\n            _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(doneEvent, {\n                origin: childService.id\n            }));\n        }).start();\n        return actor;\n    };\n    Interpreter.prototype.spawnBehavior = function(behavior, id) {\n        var actorRef = (0,_behaviors_js__WEBPACK_IMPORTED_MODULE_11__.spawnBehavior)(behavior, {\n            id: id,\n            parent: this\n        });\n        this.children.set(id, actorRef);\n        return actorRef;\n    };\n    Interpreter.prototype.spawnPromise = function(promise, id) {\n        var _a;\n        var _this = this;\n        var canceled = false;\n        var resolvedData;\n        promise.then(function(response) {\n            if (!canceled) {\n                resolvedData = response;\n                _this.removeChild(id);\n                _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.doneInvoke)(id, response), {\n                    origin: id\n                }));\n            }\n        }, function(errorData) {\n            if (!canceled) {\n                _this.removeChild(id);\n                var errorEvent = (0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(id, errorData);\n                try {\n                    // Send \"error.platform.id\" to this (parent).\n                    _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(errorEvent, {\n                        origin: id\n                    }));\n                } catch (error) {\n                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.reportUnhandledExceptionOnInvocation)(errorData, error, id);\n                    if (_this.devTools) {\n                        _this.devTools.send(errorEvent, _this.state);\n                    }\n                    if (_this.machine.strict) {\n                        // it would be better to always stop the state machine if unhandled\n                        // exception/promise rejection happens but because we don't want to\n                        // break existing code so enforce it on strict mode only especially so\n                        // because documentation says that onError is optional\n                        _this.stop();\n                    }\n                }\n            }\n        });\n        var actor = (_a = {\n            id: id,\n            send: function() {\n                return void 0;\n            },\n            subscribe: function(next, handleError, complete) {\n                var observer = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toObserver)(next, handleError, complete);\n                var unsubscribed = false;\n                promise.then(function(response) {\n                    if (unsubscribed) {\n                        return;\n                    }\n                    observer.next(response);\n                    if (unsubscribed) {\n                        return;\n                    }\n                    observer.complete();\n                }, function(err) {\n                    if (unsubscribed) {\n                        return;\n                    }\n                    observer.error(err);\n                });\n                return {\n                    unsubscribe: function() {\n                        return unsubscribed = true;\n                    }\n                };\n            },\n            stop: function() {\n                canceled = true;\n            },\n            toJSON: function() {\n                return {\n                    id: id\n                };\n            },\n            getSnapshot: function() {\n                return resolvedData;\n            }\n        }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function() {\n            return this;\n        }, _a);\n        this.children.set(id, actor);\n        return actor;\n    };\n    Interpreter.prototype.spawnCallback = function(callback, id) {\n        var _a;\n        var _this = this;\n        var canceled = false;\n        var receivers = new Set();\n        var listeners = new Set();\n        var emitted;\n        var receive = function(e) {\n            emitted = e;\n            listeners.forEach(function(listener) {\n                return listener(e);\n            });\n            if (canceled) {\n                return;\n            }\n            _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(e, {\n                origin: id\n            }));\n        };\n        var callbackStop;\n        try {\n            callbackStop = callback(receive, function(newListener) {\n                receivers.add(newListener);\n            });\n        } catch (err) {\n            this.send((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(id, err));\n        }\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isPromiseLike)(callbackStop)) {\n            // it turned out to be an async function, can't reliably check this before calling `callback`\n            // because transpiled async functions are not recognizable\n            return this.spawnPromise(callbackStop, id);\n        }\n        var actor = (_a = {\n            id: id,\n            send: function(event1) {\n                return receivers.forEach(function(receiver) {\n                    return receiver(event1);\n                });\n            },\n            subscribe: function(next) {\n                var observer = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toObserver)(next);\n                listeners.add(observer.next);\n                return {\n                    unsubscribe: function() {\n                        listeners.delete(observer.next);\n                    }\n                };\n            },\n            stop: function() {\n                canceled = true;\n                if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(callbackStop)) {\n                    callbackStop();\n                }\n            },\n            toJSON: function() {\n                return {\n                    id: id\n                };\n            },\n            getSnapshot: function() {\n                return emitted;\n            }\n        }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function() {\n            return this;\n        }, _a);\n        this.children.set(id, actor);\n        return actor;\n    };\n    Interpreter.prototype.spawnObservable = function(source, id) {\n        var _a;\n        var _this = this;\n        var emitted;\n        var subscription = source.subscribe(function(value) {\n            emitted = value;\n            _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(value, {\n                origin: id\n            }));\n        }, function(err) {\n            _this.removeChild(id);\n            _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(id, err), {\n                origin: id\n            }));\n        }, function() {\n            _this.removeChild(id);\n            _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.doneInvoke)(id), {\n                origin: id\n            }));\n        });\n        var actor = (_a = {\n            id: id,\n            send: function() {\n                return void 0;\n            },\n            subscribe: function(next, handleError, complete) {\n                return source.subscribe(next, handleError, complete);\n            },\n            stop: function() {\n                return subscription.unsubscribe();\n            },\n            getSnapshot: function() {\n                return emitted;\n            },\n            toJSON: function() {\n                return {\n                    id: id\n                };\n            }\n        }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function() {\n            return this;\n        }, _a);\n        this.children.set(id, actor);\n        return actor;\n    };\n    Interpreter.prototype.spawnActor = function(actor, name) {\n        this.children.set(name, actor);\n        return actor;\n    };\n    Interpreter.prototype.spawnActivity = function(activity) {\n        var implementation = this.machine.options && this.machine.options.activities ? this.machine.options.activities[activity.type] : undefined;\n        if (!implementation) {\n            if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, \"No implementation found for activity '\".concat(activity.type, \"'\"));\n            } // tslint:disable-next-line:no-console\n            return;\n        } // Start implementation\n        var dispose = implementation(this.state.context, activity);\n        this.spawnEffect(activity.id, dispose);\n    };\n    Interpreter.prototype.spawnEffect = function(id, dispose) {\n        var _a;\n        this.children.set(id, (_a = {\n            id: id,\n            send: function() {\n                return void 0;\n            },\n            subscribe: function() {\n                return {\n                    unsubscribe: function() {\n                        return void 0;\n                    }\n                };\n            },\n            stop: dispose || undefined,\n            getSnapshot: function() {\n                return undefined;\n            },\n            toJSON: function() {\n                return {\n                    id: id\n                };\n            }\n        }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function() {\n            return this;\n        }, _a));\n    };\n    Interpreter.prototype.attachDev = function() {\n        var global = (0,_devTools_js__WEBPACK_IMPORTED_MODULE_12__.getGlobal)();\n        if (this.options.devTools && global) {\n            if (global.__REDUX_DEVTOOLS_EXTENSION__) {\n                var devToolsOptions = typeof this.options.devTools === \"object\" ? this.options.devTools : undefined;\n                this.devTools = global.__REDUX_DEVTOOLS_EXTENSION__.connect((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({\n                    name: this.id,\n                    autoPause: true,\n                    stateSanitizer: function(state) {\n                        return {\n                            value: state.value,\n                            context: state.context,\n                            actions: state.actions\n                        };\n                    }\n                }, devToolsOptions), {\n                    features: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({\n                        jump: false,\n                        skip: false\n                    }, devToolsOptions ? devToolsOptions.features : undefined)\n                }), this.machine);\n                this.devTools.init(this.state);\n            } // add XState-specific dev tooling hook\n            (0,_devTools_js__WEBPACK_IMPORTED_MODULE_12__.registerService)(this);\n        }\n    };\n    Interpreter.prototype.toJSON = function() {\n        return {\n            id: this.id\n        };\n    };\n    Interpreter.prototype[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function() {\n        return this;\n    };\n    Interpreter.prototype.getSnapshot = function() {\n        if (this.status === InterpreterStatus.NotStarted) {\n            return this.initialState;\n        }\n        return this._state;\n    };\n    /**\r\n   * The default interpreter options:\r\n   *\r\n   * - `clock` uses the global `setTimeout` and `clearTimeout` functions\r\n   * - `logger` uses the global `console.log()` method\r\n   */ Interpreter.defaultOptions = {\n        execute: true,\n        deferEvents: true,\n        clock: {\n            setTimeout: function(fn, ms) {\n                return setTimeout(fn, ms);\n            },\n            clearTimeout: function(id) {\n                return clearTimeout(id);\n            }\n        },\n        logger: /*#__PURE__*/ console.log.bind(console),\n        devTools: false\n    };\n    Interpreter.interpret = interpret;\n    return Interpreter;\n}();\nvar resolveSpawnOptions = function(nameOrOptions) {\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(nameOrOptions)) {\n        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, DEFAULT_SPAWN_OPTIONS), {\n            name: nameOrOptions\n        });\n    }\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, DEFAULT_SPAWN_OPTIONS), {\n        name: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.uniqueId)()\n    }), nameOrOptions);\n};\nfunction spawn(entity, nameOrOptions) {\n    var resolvedOptions = resolveSpawnOptions(nameOrOptions);\n    return (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.consume)(function(service) {\n        if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n            var isLazyEntity = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(entity);\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!!service || isLazyEntity, 'Attempted to spawn an Actor (ID: \"'.concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity) ? entity.id : \"undefined\", '\") outside of a service. This will have no effect.'));\n        }\n        if (service) {\n            return service.spawn(entity, resolvedOptions.name, resolvedOptions);\n        } else {\n            return (0,_Actor_js__WEBPACK_IMPORTED_MODULE_10__.createDeferredActor)(entity, resolvedOptions.name);\n        }\n    });\n}\n/**\r\n * Creates a new Interpreter instance for the given machine with the provided options, if any.\r\n *\r\n * @param machine The machine to interpret\r\n * @param options Interpreter options\r\n */ function interpret(machine, options) {\n    var interpreter = new Interpreter(machine, options);\n    return interpreter;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2ludGVycHJldGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWlGO0FBQ3hCO0FBQ1k7QUFDNkM7QUFDRjtBQUMvRDtBQUMrTztBQUNyUDtBQUNzQjtBQUN4QjtBQUNrQjtBQUNOO0FBQ047QUFFL0MsSUFBSXFELHdCQUF3QjtJQUMxQkMsTUFBTTtJQUNOQyxhQUFhO0FBQ2Y7QUFDQSxJQUFJQztBQUVILFVBQVVBLGlCQUFpQjtJQUMxQkEsaUJBQWlCLENBQUNBLGlCQUFpQixDQUFDLGFBQWEsR0FBRyxFQUFFLEdBQUc7SUFDekRBLGlCQUFpQixDQUFDQSxpQkFBaUIsQ0FBQyxVQUFVLEdBQUcsRUFBRSxHQUFHO0lBQ3REQSxpQkFBaUIsQ0FBQ0EsaUJBQWlCLENBQUMsVUFBVSxHQUFHLEVBQUUsR0FBRztBQUN4RCxHQUFHQSxxQkFBc0JBLENBQUFBLG9CQUFvQixDQUFDO0FBRTlDLElBQUlDLGNBQ0osV0FBVyxHQUVYLFdBQVcsR0FDWDtJQUNFOzs7OztHQUtDLEdBQ0QsU0FBU0EsWUFBWUMsT0FBTyxFQUFFQyxPQUFPO1FBQ25DLElBQUlBLFlBQVksS0FBSyxHQUFHO1lBQ3RCQSxVQUFVRixZQUFZRyxjQUFjO1FBQ3RDO1FBRUEsSUFBSUMsUUFBUSxJQUFJO1FBRWhCLElBQUksQ0FBQ0gsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0ksZ0JBQWdCLEdBQUcsQ0FBQztRQUN6QixJQUFJLENBQUNDLFNBQVMsR0FBRyxJQUFJQztRQUNyQixJQUFJLENBQUNDLGdCQUFnQixHQUFHLElBQUlEO1FBQzVCLElBQUksQ0FBQ0UsYUFBYSxHQUFHLElBQUlGO1FBQ3pCLElBQUksQ0FBQ0csYUFBYSxHQUFHLElBQUlIO1FBQ3pCLElBQUksQ0FBQ0ksY0FBYyxHQUFHLElBQUlKO1FBQzFCLElBQUksQ0FBQ0ssYUFBYSxHQUFHLElBQUlMO1FBQ3pCOztLQUVDLEdBRUQsSUFBSSxDQUFDTSxXQUFX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Q3pEO0lBQ0Y7QUFDRjtBQUNBOzs7OztDQUtDLEdBRUQsU0FBU3lQLFVBQVVwUixPQUFPLEVBQUVDLE9BQU87SUFDakMsSUFBSXdSLGNBQWMsSUFBSTFSLFlBQVlDLFNBQVNDO0lBQzNDLE9BQU93UjtBQUNUO0FBRTREIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnRuZXh0Ly4vbm9kZV9tb2R1bGVzL3hzdGF0ZS9lcy9pbnRlcnByZXRlci5qcz9hZDgyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fdmFsdWVzLCBfX3NwcmVhZEFycmF5LCBfX3JlYWQsIF9fYXNzaWduIH0gZnJvbSAnLi9fdmlydHVhbC9fdHNsaWIuanMnO1xuaW1wb3J0IHsgU3BlY2lhbFRhcmdldHMsIEFjdGlvblR5cGVzIH0gZnJvbSAnLi90eXBlcy5qcyc7XG5pbXBvcnQgeyBpc1N0YXRlQ29uZmlnLCBTdGF0ZSwgYmluZEFjdGlvblRvU3RhdGUgfSBmcm9tICcuL1N0YXRlLmpzJztcbmltcG9ydCB7IGVycm9yUGxhdGZvcm0sIHVwZGF0ZSwgZXJyb3IgYXMgZXJyb3IkMSwgbG9nLCBzdG9wLCBzdGFydCwgY2FuY2VsLCBzZW5kLCByYWlzZSB9IGZyb20gJy4vYWN0aW9uVHlwZXMuanMnO1xuaW1wb3J0IHsgaW5pdEV2ZW50LCBkb25lSW52b2tlLCB0b0FjdGlvbk9iamVjdHMsIHJlc29sdmVBY3Rpb25zLCBlcnJvciwgZ2V0QWN0aW9uRnVuY3Rpb24gfSBmcm9tICcuL2FjdGlvbnMuanMnO1xuaW1wb3J0IHsgSVNfUFJPRFVDVElPTiB9IGZyb20gJy4vZW52aXJvbm1lbnQuanMnO1xuaW1wb3J0IHsgd2FybiwgbWFwQ29udGV4dCwgdG9PYnNlcnZlciwgaXNGdW5jdGlvbiwgdG9TQ1hNTEV2ZW50LCBmbGF0dGVuLCBpc1JhaXNhYmxlQWN0aW9uLCBpc1Byb21pc2VMaWtlLCBpc09ic2VydmFibGUsIGlzTWFjaGluZSwgaXNCZWhhdmlvciwgcmVwb3J0VW5oYW5kbGVkRXhjZXB0aW9uT25JbnZvY2F0aW9uLCBzeW1ib2xPYnNlcnZhYmxlLCBpc0FycmF5LCB0b0V2ZW50T2JqZWN0LCBpc1N0cmluZywgaXNBY3RvciwgdG9JbnZva2VTb3VyY2UsIHVuaXF1ZUlkIH0gZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQgeyBTY2hlZHVsZXIgfSBmcm9tICcuL3NjaGVkdWxlci5qcyc7XG5pbXBvcnQgeyBjcmVhdGVEZWZlcnJlZEFjdG9yLCBpc1NwYXduZWRBY3RvciB9IGZyb20gJy4vQWN0b3IuanMnO1xuaW1wb3J0IHsgcmVnaXN0cnkgfSBmcm9tICcuL3JlZ2lzdHJ5LmpzJztcbmltcG9ydCB7IGdldEdsb2JhbCwgcmVnaXN0ZXJTZXJ2aWNlIH0gZnJvbSAnLi9kZXZUb29scy5qcyc7XG5pbXBvcnQgeyBwcm92aWRlLCBjb25zdW1lIH0gZnJvbSAnLi9zZXJ2aWNlU2NvcGUuanMnO1xuaW1wb3J0IHsgc3Bhd25CZWhhdmlvciB9IGZyb20gJy4vYmVoYXZpb3JzLmpzJztcblxudmFyIERFRkFVTFRfU1BBV05fT1BUSU9OUyA9IHtcbiAgc3luYzogZmFsc2UsXG4gIGF1dG9Gb3J3YXJkOiBmYWxzZVxufTtcbnZhciBJbnRlcnByZXRlclN0YXR1cztcblxuKGZ1bmN0aW9uIChJbnRlcnByZXRlclN0YXR1cykge1xuICBJbnRlcnByZXRlclN0YXR1c1tJbnRlcnByZXRlclN0YXR1c1tcIk5vdFN0YXJ0ZWRcIl0gPSAwXSA9IFwiTm90U3RhcnRlZFwiO1xuICBJbnRlcnByZXRlclN0YXR1c1tJbnRlcnByZXRlclN0YXR1c1tcIlJ1bm5pbmdcIl0gPSAxXSA9IFwiUnVubmluZ1wiO1xuICBJbnRlcnByZXRlclN0YXR1c1tJbnRlcnByZXRlclN0YXR1c1tcIlN0b3BwZWRcIl0gPSAyXSA9IFwiU3RvcHBlZFwiO1xufSkoSW50ZXJwcmV0ZXJTdGF0dXMgfHwgKEludGVycHJldGVyU3RhdHVzID0ge30pKTtcblxudmFyIEludGVycHJldGVyID1cbi8qI19fUFVSRV9fKi9cblxuLyoqIEBjbGFzcyAqL1xuZnVuY3Rpb24gKCkge1xuICAvKipcclxuICAgKiBDcmVhdGVzIGEgbmV3IEludGVycHJldGVyIGluc3RhbmNlIChpLmUuLCBzZXJ2aWNlKSBmb3IgdGhlIGdpdmVuIG1hY2hpbmUgd2l0aCB0aGUgcHJvdmlkZWQgb3B0aW9ucywgaWYgYW55LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIG1hY2hpbmUgVGhlIG1hY2hpbmUgdG8gYmUgaW50ZXJwcmV0ZWRcclxuICAgKiBAcGFyYW0gb3B0aW9ucyBJbnRlcnByZXRlciBvcHRpb25zXHJcbiAgICovXG4gIGZ1bmN0aW9uIEludGVycHJldGVyKG1hY2hpbmUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gSW50ZXJwcmV0ZXIuZGVmYXVsdE9wdGlvbnM7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMubWFjaGluZSA9IG1hY2hpbmU7XG4gICAgdGhpcy5kZWxheWVkRXZlbnRzTWFwID0ge307XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5jb250ZXh0TGlzdGVuZXJzID0gbmV3IFNldCgpO1xuICAgIHRoaXMuc3RvcExpc3RlbmVycyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLmRvbmVMaXN0ZW5lcnMgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5ldmVudExpc3RlbmVycyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLnNlbmRMaXN0ZW5lcnMgPSBuZXcgU2V0KCk7XG4gICAgLyoqXHJcbiAgICAgKiBXaGV0aGVyIHRoZSBzZXJ2aWNlIGlzIHN0YXJ0ZWQuXHJcbiAgICAgKi9cblxuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnN0YXR1cyA9IEludGVycHJldGVyU3RhdHVzLk5vdFN0YXJ0ZWQ7XG4gICAgdGhpcy5jaGlsZHJlbiA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLmZvcndhcmRUbyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLl9vdXRnb2luZ1F1ZXVlID0gW107XG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBmb3IgSW50ZXJwcmV0ZXIucHJvdG90eXBlLnN0YXJ0XHJcbiAgICAgKi9cblxuICAgIHRoaXMuaW5pdCA9IHRoaXMuc3RhcnQ7XG4gICAgLyoqXHJcbiAgICAgKiBTZW5kcyBhbiBldmVudCB0byB0aGUgcnVubmluZyBpbnRlcnByZXRlciB0byB0cmlnZ2VyIGEgdHJhbnNpdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBBbiBhcnJheSBvZiBldmVudHMgKGJhdGNoZWQpIGNhbiBiZSBzZW50IGFzIHdlbGwsIHdoaWNoIHdpbGwgc2VuZCBhbGxcclxuICAgICAqIGJhdGNoZWQgZXZlbnRzIHRvIHRoZSBydW5uaW5nIGludGVycHJldGVyLiBUaGUgbGlzdGVuZXJzIHdpbGwgYmVcclxuICAgICAqIG5vdGlmaWVkIG9ubHkgKipvbmNlKiogd2hlbiBhbGwgZXZlbnRzIGFyZSBwcm9jZXNzZWQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGV2ZW50IFRoZSBldmVudChzKSB0byBzZW5kXHJcbiAgICAgKi9cblxuICAgIHRoaXMuc2VuZCA9IGZ1bmN0aW9uIChldmVudCwgcGF5bG9hZCkge1xuICAgICAgaWYgKGlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICAgIF90aGlzLmJhdGNoKGV2ZW50KTtcblxuICAgICAgICByZXR1cm4gX3RoaXMuc3RhdGU7XG4gICAgICB9XG5cbiAgICAgIHZhciBfZXZlbnQgPSB0b1NDWE1MRXZlbnQodG9FdmVudE9iamVjdChldmVudCwgcGF5bG9hZCkpO1xuXG4gICAgICBpZiAoX3RoaXMuc3RhdHVzID09PSBJbnRlcnByZXRlclN0YXR1cy5TdG9wcGVkKSB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICAgICAgaWYgKCFJU19QUk9EVUNUSU9OKSB7XG4gICAgICAgICAgd2FybihmYWxzZSwgXCJFdmVudCBcXFwiXCIuY29uY2F0KF9ldmVudC5uYW1lLCBcIlxcXCIgd2FzIHNlbnQgdG8gc3RvcHBlZCBzZXJ2aWNlIFxcXCJcIikuY29uY2F0KF90aGlzLm1hY2hpbmUuaWQsIFwiXFxcIi4gVGhpcyBzZXJ2aWNlIGhhcyBhbHJlYWR5IHJlYWNoZWQgaXRzIGZpbmFsIHN0YXRlLCBhbmQgd2lsbCBub3QgdHJhbnNpdGlvbi5cXG5FdmVudDogXCIpLmNvbmNhdChKU09OLnN0cmluZ2lmeShfZXZlbnQuZGF0YSkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfdGhpcy5zdGF0ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnN0YXR1cyAhPT0gSW50ZXJwcmV0ZXJTdGF0dXMuUnVubmluZyAmJiAhX3RoaXMub3B0aW9ucy5kZWZlckV2ZW50cykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFdmVudCBcXFwiXCIuY29uY2F0KF9ldmVudC5uYW1lLCBcIlxcXCIgd2FzIHNlbnQgdG8gdW5pbml0aWFsaXplZCBzZXJ2aWNlIFxcXCJcIikuY29uY2F0KF90aGlzLm1hY2hpbmUuaWQgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1saW5lLWxlbmd0aFxuICAgICAgICAsIFwiXFxcIi4gTWFrZSBzdXJlIC5zdGFydCgpIGlzIGNhbGxlZCBmb3IgdGhpcyBzZXJ2aWNlLCBvciBzZXQgeyBkZWZlckV2ZW50czogdHJ1ZSB9IGluIHRoZSBzZXJ2aWNlIG9wdGlvbnMuXFxuRXZlbnQ6IFwiKS5jb25jYXQoSlNPTi5zdHJpbmdpZnkoX2V2ZW50LmRhdGEpKSk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIEZvcndhcmQgY29weSBvZiBldmVudCB0byBjaGlsZCBhY3RvcnNcbiAgICAgICAgX3RoaXMuZm9yd2FyZChfZXZlbnQpO1xuXG4gICAgICAgIHZhciBuZXh0U3RhdGUgPSBfdGhpcy5fbmV4dFN0YXRlKF9ldmVudCk7XG5cbiAgICAgICAgX3RoaXMudXBkYXRlKG5leHRTdGF0ZSwgX2V2ZW50KTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gX3RoaXMuX3N0YXRlOyAvLyBUT0RPOiBkZXByZWNhdGUgKHNob3VsZCByZXR1cm4gdm9pZClcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzZW1pY29sb25cbiAgICB9O1xuXG4gICAgdGhpcy5zZW5kVG8gPSBmdW5jdGlvbiAoZXZlbnQsIHRvLCBpbW1lZGlhdGUpIHtcbiAgICAgIHZhciBpc1BhcmVudCA9IF90aGlzLnBhcmVudCAmJiAodG8gPT09IFNwZWNpYWxUYXJnZXRzLlBhcmVudCB8fCBfdGhpcy5wYXJlbnQuaWQgPT09IHRvKTtcbiAgICAgIHZhciB0YXJnZXQgPSBpc1BhcmVudCA/IF90aGlzLnBhcmVudCA6IGlzU3RyaW5nKHRvKSA/IHRvID09PSBTcGVjaWFsVGFyZ2V0cy5JbnRlcm5hbCA/IF90aGlzIDogX3RoaXMuY2hpbGRyZW4uZ2V0KHRvKSB8fCByZWdpc3RyeS5nZXQodG8pIDogaXNBY3Rvcih0bykgPyB0byA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgaWYgKCFpc1BhcmVudCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBzZW5kIGV2ZW50IHRvIGNoaWxkICdcIi5jb25jYXQodG8sIFwiJyBmcm9tIHNlcnZpY2UgJ1wiKS5jb25jYXQoX3RoaXMuaWQsIFwiJy5cIikpO1xuICAgICAgICB9IC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG5cblxuICAgICAgICBpZiAoIUlTX1BST0RVQ1RJT04pIHtcbiAgICAgICAgICB3YXJuKGZhbHNlLCBcIlNlcnZpY2UgJ1wiLmNvbmNhdChfdGhpcy5pZCwgXCInIGhhcyBubyBwYXJlbnQ6IHVuYWJsZSB0byBzZW5kIGV2ZW50IFwiKS5jb25jYXQoZXZlbnQudHlwZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoJ21hY2hpbmUnIGluIHRhcmdldCkge1xuICAgICAgICAvLyBwZXJoYXBzIHRob3NlIGV2ZW50cyBzaG91bGQgYmUgcmVqZWN0ZWQgaW4gdGhlIHBhcmVudFxuICAgICAgICAvLyBidXQgYXRtIGl0IGRvZXNuJ3QgaGF2ZSBlYXN5IGFjY2VzcyB0byBhbGwgb2YgdGhlIGluZm9ybWF0aW9uIHRoYXQgaXMgcmVxdWlyZWQgdG8gZG8gaXQgcmVsaWFibHlcbiAgICAgICAgaWYgKF90aGlzLnN0YXR1cyAhPT0gSW50ZXJwcmV0ZXJTdGF0dXMuU3RvcHBlZCB8fCBfdGhpcy5wYXJlbnQgIT09IHRhcmdldCB8fCAvLyB3ZSBuZWVkIHRvIHNlbmQgZXZlbnRzIHRvIHRoZSBwYXJlbnQgZnJvbSBleGl0IGhhbmRsZXJzIG9mIGEgbWFjaGluZSB0aGF0IHJlYWNoZWQgaXRzIGZpbmFsIHN0YXRlXG4gICAgICAgIF90aGlzLnN0YXRlLmRvbmUpIHtcbiAgICAgICAgICAvLyBTZW5kIFNDWE1MIGV2ZW50cyB0byBtYWNoaW5lc1xuICAgICAgICAgIHZhciBzY3htbEV2ZW50ID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGV2ZW50KSwge1xuICAgICAgICAgICAgbmFtZTogZXZlbnQubmFtZSA9PT0gZXJyb3IkMSA/IFwiXCIuY29uY2F0KGVycm9yKF90aGlzLmlkKSkgOiBldmVudC5uYW1lLFxuICAgICAgICAgICAgb3JpZ2luOiBfdGhpcy5zZXNzaW9uSWRcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmICghaW1tZWRpYXRlICYmIF90aGlzLm1hY2hpbmUuY29uZmlnLnByZWRpY3RhYmxlQWN0aW9uQXJndW1lbnRzKSB7XG4gICAgICAgICAgICBfdGhpcy5fb3V0Z29pbmdRdWV1ZS5wdXNoKFt0YXJnZXQsIHNjeG1sRXZlbnRdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0LnNlbmQoc2N4bWxFdmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTZW5kIG5vcm1hbCBldmVudHMgdG8gb3RoZXIgdGFyZ2V0c1xuICAgICAgICBpZiAoIWltbWVkaWF0ZSAmJiBfdGhpcy5tYWNoaW5lLmNvbmZpZy5wcmVkaWN0YWJsZUFjdGlvbkFyZ3VtZW50cykge1xuICAgICAgICAgIF90aGlzLl9vdXRnb2luZ1F1ZXVlLnB1c2goW3RhcmdldCwgZXZlbnQuZGF0YV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldC5zZW5kKGV2ZW50LmRhdGEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuX2V4ZWMgPSBmdW5jdGlvbiAoYWN0aW9uLCBjb250ZXh0LCBfZXZlbnQsIGFjdGlvbkZ1bmN0aW9uTWFwKSB7XG4gICAgICBpZiAoYWN0aW9uRnVuY3Rpb25NYXAgPT09IHZvaWQgMCkge1xuICAgICAgICBhY3Rpb25GdW5jdGlvbk1hcCA9IF90aGlzLm1hY2hpbmUub3B0aW9ucy5hY3Rpb25zO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWN0aW9uT3JFeGVjID0gYWN0aW9uLmV4ZWMgfHwgZ2V0QWN0aW9uRnVuY3Rpb24oYWN0aW9uLnR5cGUsIGFjdGlvbkZ1bmN0aW9uTWFwKTtcbiAgICAgIHZhciBleGVjID0gaXNGdW5jdGlvbihhY3Rpb25PckV4ZWMpID8gYWN0aW9uT3JFeGVjIDogYWN0aW9uT3JFeGVjID8gYWN0aW9uT3JFeGVjLmV4ZWMgOiBhY3Rpb24uZXhlYztcblxuICAgICAgaWYgKGV4ZWMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gZXhlYyhjb250ZXh0LCBfZXZlbnQuZGF0YSwgIV90aGlzLm1hY2hpbmUuY29uZmlnLnByZWRpY3RhYmxlQWN0aW9uQXJndW1lbnRzID8ge1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBzdGF0ZTogX3RoaXMuc3RhdGUsXG4gICAgICAgICAgICBfZXZlbnQ6IF9ldmVudFxuICAgICAgICAgIH0gOiB7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIF9ldmVudDogX2V2ZW50XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGlmIChfdGhpcy5wYXJlbnQpIHtcbiAgICAgICAgICAgIF90aGlzLnBhcmVudC5zZW5kKHtcbiAgICAgICAgICAgICAgdHlwZTogJ3hzdGF0ZS5lcnJvcicsXG4gICAgICAgICAgICAgIGRhdGE6IGVyclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSByYWlzZTpcbiAgICAgICAgICB7XG4gICAgICAgICAgICAvLyBpZiByYWlzZSBhY3Rpb24gcmVhY2hlZCB0aGUgaW50ZXJwcmV0ZXIgdGhlbiBpdCdzIGEgZGVsYXllZCBvbmVcbiAgICAgICAgICAgIHZhciBzZW5kQWN0aW9uXzEgPSBhY3Rpb247XG5cbiAgICAgICAgICAgIF90aGlzLmRlZmVyKHNlbmRBY3Rpb25fMSk7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlIHNlbmQ6XG4gICAgICAgICAgdmFyIHNlbmRBY3Rpb24gPSBhY3Rpb247XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHNlbmRBY3Rpb24uZGVsYXkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBfdGhpcy5kZWZlcihzZW5kQWN0aW9uKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2VuZEFjdGlvbi50bykge1xuICAgICAgICAgICAgICBfdGhpcy5zZW5kVG8oc2VuZEFjdGlvbi5fZXZlbnQsIHNlbmRBY3Rpb24udG8sIF9ldmVudCA9PT0gaW5pdEV2ZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIF90aGlzLnNlbmQoc2VuZEFjdGlvbi5fZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgY2FuY2VsOlxuICAgICAgICAgIF90aGlzLmNhbmNlbChhY3Rpb24uc2VuZElkKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Ugc3RhcnQ6XG4gICAgICAgICAge1xuICAgICAgICAgICAgaWYgKF90aGlzLnN0YXR1cyAhPT0gSW50ZXJwcmV0ZXJTdGF0dXMuUnVubmluZykge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBhY3Rpdml0eSA9IGFjdGlvbi5hY3Rpdml0eTsgLy8gSWYgdGhlIGFjdGl2aXR5IHdpbGwgYmUgc3RvcHBlZCByaWdodCBhZnRlciBpdCdzIHN0YXJ0ZWRcbiAgICAgICAgICAgIC8vIChzdWNoIGFzIGluIHRyYW5zaWVudCBzdGF0ZXMpXG4gICAgICAgICAgICAvLyBkb24ndCBib3RoZXIgc3RhcnRpbmcgdGhlIGFjdGl2aXR5LlxuXG4gICAgICAgICAgICBpZiAoIC8vIGluIHY0IHdpdGggYHByZWRpY3RhYmxlQWN0aW9uQXJndW1lbnRzYCBpbnZva2VzIGFyZSBjYWxsZWQgZWFnZXJseSB3aGVuIHRoZSBgdGhpcy5zdGF0ZWAgc3RpbGwgcG9pbnRzIHRvIHRoZSBwcmV2aW91cyBzdGF0ZVxuICAgICAgICAgICAgIV90aGlzLm1hY2hpbmUuY29uZmlnLnByZWRpY3RhYmxlQWN0aW9uQXJndW1lbnRzICYmICFfdGhpcy5zdGF0ZS5hY3Rpdml0aWVzW2FjdGl2aXR5LmlkIHx8IGFjdGl2aXR5LnR5cGVdKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSAvLyBJbnZva2VkIHNlcnZpY2VzXG5cblxuICAgICAgICAgICAgaWYgKGFjdGl2aXR5LnR5cGUgPT09IEFjdGlvblR5cGVzLkludm9rZSkge1xuICAgICAgICAgICAgICB2YXIgaW52b2tlU291cmNlID0gdG9JbnZva2VTb3VyY2UoYWN0aXZpdHkuc3JjKTtcbiAgICAgICAgICAgICAgdmFyIHNlcnZpY2VDcmVhdG9yID0gX3RoaXMubWFjaGluZS5vcHRpb25zLnNlcnZpY2VzID8gX3RoaXMubWFjaGluZS5vcHRpb25zLnNlcnZpY2VzW2ludm9rZVNvdXJjZS50eXBlXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgdmFyIGlkID0gYWN0aXZpdHkuaWQsXG4gICAgICAgICAgICAgICAgICBkYXRhID0gYWN0aXZpdHkuZGF0YTtcblxuICAgICAgICAgICAgICBpZiAoIUlTX1BST0RVQ1RJT04pIHtcbiAgICAgICAgICAgICAgICB3YXJuKCEoJ2ZvcndhcmQnIGluIGFjdGl2aXR5KSwgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1saW5lLWxlbmd0aFxuICAgICAgICAgICAgICAgIFwiYGZvcndhcmRgIHByb3BlcnR5IGlzIGRlcHJlY2F0ZWQgKGZvdW5kIGluIGludm9jYXRpb24gb2YgJ1wiLmNvbmNhdChhY3Rpdml0eS5zcmMsIFwiJyBpbiBpbiBtYWNoaW5lICdcIikuY29uY2F0KF90aGlzLm1hY2hpbmUuaWQsIFwiJykuIFwiKSArIFwiUGxlYXNlIHVzZSBgYXV0b0ZvcndhcmRgIGluc3RlYWQuXCIpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFyIGF1dG9Gb3J3YXJkID0gJ2F1dG9Gb3J3YXJkJyBpbiBhY3Rpdml0eSA/IGFjdGl2aXR5LmF1dG9Gb3J3YXJkIDogISFhY3Rpdml0eS5mb3J3YXJkO1xuXG4gICAgICAgICAgICAgIGlmICghc2VydmljZUNyZWF0b3IpIHtcbiAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxuICAgICAgICAgICAgICAgIGlmICghSVNfUFJPRFVDVElPTikge1xuICAgICAgICAgICAgICAgICAgd2FybihmYWxzZSwgXCJObyBzZXJ2aWNlIGZvdW5kIGZvciBpbnZvY2F0aW9uICdcIi5jb25jYXQoYWN0aXZpdHkuc3JjLCBcIicgaW4gbWFjaGluZSAnXCIpLmNvbmNhdChfdGhpcy5tYWNoaW5lLmlkLCBcIicuXCIpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YXIgcmVzb2x2ZWREYXRhID0gZGF0YSA/IG1hcENvbnRleHQoZGF0YSwgY29udGV4dCwgX2V2ZW50KSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICBpZiAodHlwZW9mIHNlcnZpY2VDcmVhdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IHdhcm5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YXIgc291cmNlID0gaXNGdW5jdGlvbihzZXJ2aWNlQ3JlYXRvcikgPyBzZXJ2aWNlQ3JlYXRvcihjb250ZXh0LCBfZXZlbnQuZGF0YSwge1xuICAgICAgICAgICAgICAgIGRhdGE6IHJlc29sdmVkRGF0YSxcbiAgICAgICAgICAgICAgICBzcmM6IGludm9rZVNvdXJjZSxcbiAgICAgICAgICAgICAgICBtZXRhOiBhY3Rpdml0eS5tZXRhXG4gICAgICAgICAgICAgIH0pIDogc2VydmljZUNyZWF0b3I7XG5cbiAgICAgICAgICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiB3YXJuP1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHZhciBvcHRpb25zID0gdm9pZCAwO1xuXG4gICAgICAgICAgICAgIGlmIChpc01hY2hpbmUoc291cmNlKSkge1xuICAgICAgICAgICAgICAgIHNvdXJjZSA9IHJlc29sdmVkRGF0YSA/IHNvdXJjZS53aXRoQ29udGV4dChyZXNvbHZlZERhdGEpIDogc291cmNlO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICBhdXRvRm9yd2FyZDogYXV0b0ZvcndhcmRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgX3RoaXMuc3Bhd24oc291cmNlLCBpZCwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfdGhpcy5zcGF3bkFjdGl2aXR5KGFjdGl2aXR5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGNhc2Ugc3RvcDpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBfdGhpcy5zdG9wQ2hpbGQoYWN0aW9uLmFjdGl2aXR5LmlkKTtcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgbG9nOlxuICAgICAgICAgIHZhciBfYSA9IGFjdGlvbixcbiAgICAgICAgICAgICAgbGFiZWwgPSBfYS5sYWJlbCxcbiAgICAgICAgICAgICAgdmFsdWUgPSBfYS52YWx1ZTtcblxuICAgICAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICAgICAgX3RoaXMubG9nZ2VyKGxhYmVsLCB2YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLmxvZ2dlcih2YWx1ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAoIUlTX1BST0RVQ1RJT04pIHtcbiAgICAgICAgICAgIHdhcm4oZmFsc2UsIFwiTm8gaW1wbGVtZW50YXRpb24gZm91bmQgZm9yIGFjdGlvbiB0eXBlICdcIi5jb25jYXQoYWN0aW9uLnR5cGUsIFwiJ1wiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXNvbHZlZE9wdGlvbnMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgSW50ZXJwcmV0ZXIuZGVmYXVsdE9wdGlvbnMpLCBvcHRpb25zKTtcblxuICAgIHZhciBjbG9jayA9IHJlc29sdmVkT3B0aW9ucy5jbG9jayxcbiAgICAgICAgbG9nZ2VyID0gcmVzb2x2ZWRPcHRpb25zLmxvZ2dlcixcbiAgICAgICAgcGFyZW50ID0gcmVzb2x2ZWRPcHRpb25zLnBhcmVudCxcbiAgICAgICAgaWQgPSByZXNvbHZlZE9wdGlvbnMuaWQ7XG4gICAgdmFyIHJlc29sdmVkSWQgPSBpZCAhPT0gdW5kZWZpbmVkID8gaWQgOiBtYWNoaW5lLmlkO1xuICAgIHRoaXMuaWQgPSByZXNvbHZlZElkO1xuICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xuICAgIHRoaXMuY2xvY2sgPSBjbG9jaztcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSByZXNvbHZlZE9wdGlvbnM7XG4gICAgdGhpcy5zY2hlZHVsZXIgPSBuZXcgU2NoZWR1bGVyKHtcbiAgICAgIGRlZmVyRXZlbnRzOiB0aGlzLm9wdGlvbnMuZGVmZXJFdmVudHNcbiAgICB9KTtcbiAgICB0aGlzLnNlc3Npb25JZCA9IHJlZ2lzdHJ5LmJvb2tJZCgpO1xuICB9XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVycHJldGVyLnByb3RvdHlwZSwgXCJpbml0aWFsU3RhdGVcIiwge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2luaXRpYWxTdGF0ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5pdGlhbFN0YXRlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvdmlkZSh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLl9pbml0aWFsU3RhdGUgPSBfdGhpcy5tYWNoaW5lLmluaXRpYWxTdGF0ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzLl9pbml0aWFsU3RhdGU7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVycHJldGVyLnByb3RvdHlwZSwgXCJzdGF0ZVwiLCB7XG4gICAgLyoqXHJcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgYC5nZXRTbmFwc2hvdCgpYCBpbnN0ZWFkLlxyXG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIUlTX1BST0RVQ1RJT04pIHtcbiAgICAgICAgd2Fybih0aGlzLnN0YXR1cyAhPT0gSW50ZXJwcmV0ZXJTdGF0dXMuTm90U3RhcnRlZCwgXCJBdHRlbXB0ZWQgdG8gcmVhZCBzdGF0ZSBmcm9tIHVuaW5pdGlhbGl6ZWQgc2VydmljZSAnXCIuY29uY2F0KHRoaXMuaWQsIFwiJy4gTWFrZSBzdXJlIHRoZSBzZXJ2aWNlIGlzIHN0YXJ0ZWQgZmlyc3QuXCIpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlO1xuICAgIH0sXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICAvKipcclxuICAgKiBFeGVjdXRlcyB0aGUgYWN0aW9ucyBvZiB0aGUgZ2l2ZW4gc3RhdGUsIHdpdGggdGhhdCBzdGF0ZSdzIGBjb250ZXh0YCBhbmQgYGV2ZW50YC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBzdGF0ZSBUaGUgc3RhdGUgd2hvc2UgYWN0aW9ucyB3aWxsIGJlIGV4ZWN1dGVkXHJcbiAgICogQHBhcmFtIGFjdGlvbnNDb25maWcgVGhlIGFjdGlvbiBpbXBsZW1lbnRhdGlvbnMgdG8gdXNlXHJcbiAgICovXG5cbiAgSW50ZXJwcmV0ZXIucHJvdG90eXBlLmV4ZWN1dGUgPSBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbnNDb25maWcpIHtcbiAgICB2YXIgZV8xLCBfYTtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKHN0YXRlLmFjdGlvbnMpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBfYy52YWx1ZTtcbiAgICAgICAgdGhpcy5leGVjKGFjdGlvbiwgc3RhdGUsIGFjdGlvbnNDb25maWcpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVfMV8xKSB7XG4gICAgICBlXzEgPSB7XG4gICAgICAgIGVycm9yOiBlXzFfMVxuICAgICAgfTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKHN0YXRlLCBfZXZlbnQpIHtcbiAgICB2YXIgZV8yLCBfYSwgZV8zLCBfYiwgZV80LCBfYywgZV81LCBfZDtcblxuICAgIHZhciBfdGhpcyA9IHRoaXM7IC8vIEF0dGFjaCBzZXNzaW9uIElEIHRvIHN0YXRlXG5cblxuICAgIHN0YXRlLl9zZXNzaW9uaWQgPSB0aGlzLnNlc3Npb25JZDsgLy8gVXBkYXRlIHN0YXRlXG5cbiAgICB0aGlzLl9zdGF0ZSA9IHN0YXRlOyAvLyBFeGVjdXRlIGFjdGlvbnNcblxuICAgIGlmICgoIXRoaXMubWFjaGluZS5jb25maWcucHJlZGljdGFibGVBY3Rpb25Bcmd1bWVudHMgfHwgLy8gdGhpcyBpcyBjdXJyZW50bHkgcmVxdWlyZWQgdG8gZXhlY3V0ZSBpbml0aWFsIGFjdGlvbnMgYXMgdGhlIGBpbml0aWFsU3RhdGVgIGdldHMgY2FjaGVkXG4gICAgLy8gd2UgY2FuJ3QganVzdCByZWNvbXB1dGUgaXQgKGFuZCBleGVjdXRlIGFjdGlvbnMgd2hpbGUgZG9pbmcgc28pIGJlY2F1c2Ugd2UgdHJ5IHRvIHByZXNlcnZlIGlkZW50aXR5IG9mIGFjdG9ycyBjcmVhdGVkIHdpdGhpbiBpbml0aWFsIGFzc2lnbnNcbiAgICBfZXZlbnQgPT09IGluaXRFdmVudCkgJiYgdGhpcy5vcHRpb25zLmV4ZWN1dGUpIHtcbiAgICAgIHRoaXMuZXhlY3V0ZSh0aGlzLnN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGl0ZW0gPSB2b2lkIDA7XG5cbiAgICAgIHdoaWxlIChpdGVtID0gdGhpcy5fb3V0Z29pbmdRdWV1ZS5zaGlmdCgpKSB7XG4gICAgICAgIGl0ZW1bMF0uc2VuZChpdGVtWzFdKTtcbiAgICAgIH1cbiAgICB9IC8vIFVwZGF0ZSBjaGlsZHJlblxuXG5cbiAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICBfdGhpcy5zdGF0ZS5jaGlsZHJlbltjaGlsZC5pZF0gPSBjaGlsZDtcbiAgICB9KTsgLy8gRGV2IHRvb2xzXG5cbiAgICBpZiAodGhpcy5kZXZUb29scykge1xuICAgICAgdGhpcy5kZXZUb29scy5zZW5kKF9ldmVudC5kYXRhLCBzdGF0ZSk7XG4gICAgfSAvLyBFeGVjdXRlIGxpc3RlbmVyc1xuXG5cbiAgICBpZiAoc3RhdGUuZXZlbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIF9lID0gX192YWx1ZXModGhpcy5ldmVudExpc3RlbmVycyksIF9mID0gX2UubmV4dCgpOyAhX2YuZG9uZTsgX2YgPSBfZS5uZXh0KCkpIHtcbiAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBfZi52YWx1ZTtcbiAgICAgICAgICBsaXN0ZW5lcihzdGF0ZS5ldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVfMl8xKSB7XG4gICAgICAgIGVfMiA9IHtcbiAgICAgICAgICBlcnJvcjogZV8yXzFcbiAgICAgICAgfTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKF9mICYmICFfZi5kb25lICYmIChfYSA9IF9lLnJldHVybikpIF9hLmNhbGwoX2UpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBfZyA9IF9fdmFsdWVzKHRoaXMubGlzdGVuZXJzKSwgX2ggPSBfZy5uZXh0KCk7ICFfaC5kb25lOyBfaCA9IF9nLm5leHQoKSkge1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSBfaC52YWx1ZTtcbiAgICAgICAgbGlzdGVuZXIoc3RhdGUsIHN0YXRlLmV2ZW50KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlXzNfMSkge1xuICAgICAgZV8zID0ge1xuICAgICAgICBlcnJvcjogZV8zXzFcbiAgICAgIH07XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChfaCAmJiAhX2guZG9uZSAmJiAoX2IgPSBfZy5yZXR1cm4pKSBfYi5jYWxsKF9nKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChlXzMpIHRocm93IGVfMy5lcnJvcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgZm9yICh2YXIgX2ogPSBfX3ZhbHVlcyh0aGlzLmNvbnRleHRMaXN0ZW5lcnMpLCBfayA9IF9qLm5leHQoKTsgIV9rLmRvbmU7IF9rID0gX2oubmV4dCgpKSB7XG4gICAgICAgIHZhciBjb250ZXh0TGlzdGVuZXIgPSBfay52YWx1ZTtcbiAgICAgICAgY29udGV4dExpc3RlbmVyKHRoaXMuc3RhdGUuY29udGV4dCwgdGhpcy5zdGF0ZS5oaXN0b3J5ID8gdGhpcy5zdGF0ZS5oaXN0b3J5LmNvbnRleHQgOiB1bmRlZmluZWQpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVfNF8xKSB7XG4gICAgICBlXzQgPSB7XG4gICAgICAgIGVycm9yOiBlXzRfMVxuICAgICAgfTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9rICYmICFfay5kb25lICYmIChfYyA9IF9qLnJldHVybikpIF9jLmNhbGwoX2opO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKGVfNCkgdGhyb3cgZV80LmVycm9yO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLnN0YXRlLmRvbmUpIHtcbiAgICAgIC8vIGdldCBmaW5hbCBjaGlsZCBzdGF0ZSBub2RlXG4gICAgICB2YXIgZmluYWxDaGlsZFN0YXRlTm9kZSA9IHN0YXRlLmNvbmZpZ3VyYXRpb24uZmluZChmdW5jdGlvbiAoc24pIHtcbiAgICAgICAgcmV0dXJuIHNuLnR5cGUgPT09ICdmaW5hbCcgJiYgc24ucGFyZW50ID09PSBfdGhpcy5tYWNoaW5lO1xuICAgICAgfSk7XG4gICAgICB2YXIgZG9uZURhdGEgPSBmaW5hbENoaWxkU3RhdGVOb2RlICYmIGZpbmFsQ2hpbGRTdGF0ZU5vZGUuZG9uZURhdGEgPyBtYXBDb250ZXh0KGZpbmFsQ2hpbGRTdGF0ZU5vZGUuZG9uZURhdGEsIHN0YXRlLmNvbnRleHQsIF9ldmVudCkgOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9kb25lRXZlbnQgPSBkb25lSW52b2tlKHRoaXMuaWQsIGRvbmVEYXRhKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgX2wgPSBfX3ZhbHVlcyh0aGlzLmRvbmVMaXN0ZW5lcnMpLCBfbSA9IF9sLm5leHQoKTsgIV9tLmRvbmU7IF9tID0gX2wubmV4dCgpKSB7XG4gICAgICAgICAgdmFyIGxpc3RlbmVyID0gX20udmFsdWU7XG4gICAgICAgICAgbGlzdGVuZXIodGhpcy5fZG9uZUV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZV81XzEpIHtcbiAgICAgICAgZV81ID0ge1xuICAgICAgICAgIGVycm9yOiBlXzVfMVxuICAgICAgICB9O1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoX20gJiYgIV9tLmRvbmUgJiYgKF9kID0gX2wucmV0dXJuKSkgX2QuY2FsbChfbCk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgaWYgKGVfNSkgdGhyb3cgZV81LmVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3N0b3AoKTtcblxuICAgICAgdGhpcy5fc3RvcENoaWxkcmVuKCk7XG5cbiAgICAgIHJlZ2lzdHJ5LmZyZWUodGhpcy5zZXNzaW9uSWQpO1xuICAgIH1cbiAgfTtcbiAgLypcclxuICAgKiBBZGRzIGEgbGlzdGVuZXIgdGhhdCBpcyBub3RpZmllZCB3aGVuZXZlciBhIHN0YXRlIHRyYW5zaXRpb24gaGFwcGVucy4gVGhlIGxpc3RlbmVyIGlzIGNhbGxlZCB3aXRoXHJcbiAgICogdGhlIG5leHQgc3RhdGUgYW5kIHRoZSBldmVudCBvYmplY3QgdGhhdCBjYXVzZWQgdGhlIHN0YXRlIHRyYW5zaXRpb24uXHJcbiAgICpcclxuICAgKiBAcGFyYW0gbGlzdGVuZXIgVGhlIHN0YXRlIGxpc3RlbmVyXHJcbiAgICovXG5cblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUub25UcmFuc2l0aW9uID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMuYWRkKGxpc3RlbmVyKTsgLy8gU2VuZCBjdXJyZW50IHN0YXRlIHRvIGxpc3RlbmVyXG5cbiAgICBpZiAodGhpcy5zdGF0dXMgPT09IEludGVycHJldGVyU3RhdHVzLlJ1bm5pbmcpIHtcbiAgICAgIGxpc3RlbmVyKHRoaXMuc3RhdGUsIHRoaXMuc3RhdGUuZXZlbnQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAobmV4dExpc3RlbmVyT3JPYnNlcnZlciwgXywgLy8gVE9ETzogZXJyb3IgbGlzdGVuZXJcbiAgY29tcGxldGVMaXN0ZW5lcikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgb2JzZXJ2ZXIgPSB0b09ic2VydmVyKG5leHRMaXN0ZW5lck9yT2JzZXJ2ZXIsIF8sIGNvbXBsZXRlTGlzdGVuZXIpO1xuICAgIHRoaXMubGlzdGVuZXJzLmFkZChvYnNlcnZlci5uZXh0KTsgLy8gU2VuZCBjdXJyZW50IHN0YXRlIHRvIGxpc3RlbmVyXG5cbiAgICBpZiAodGhpcy5zdGF0dXMgIT09IEludGVycHJldGVyU3RhdHVzLk5vdFN0YXJ0ZWQpIHtcbiAgICAgIG9ic2VydmVyLm5leHQodGhpcy5zdGF0ZSk7XG4gICAgfVxuXG4gICAgdmFyIGNvbXBsZXRlT25jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmRvbmVMaXN0ZW5lcnMuZGVsZXRlKGNvbXBsZXRlT25jZSk7XG5cbiAgICAgIF90aGlzLnN0b3BMaXN0ZW5lcnMuZGVsZXRlKGNvbXBsZXRlT25jZSk7XG5cbiAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgfTtcblxuICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gSW50ZXJwcmV0ZXJTdGF0dXMuU3RvcHBlZCkge1xuICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vbkRvbmUoY29tcGxldGVPbmNlKTtcbiAgICAgIHRoaXMub25TdG9wKGNvbXBsZXRlT25jZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLmxpc3RlbmVycy5kZWxldGUob2JzZXJ2ZXIubmV4dCk7XG5cbiAgICAgICAgX3RoaXMuZG9uZUxpc3RlbmVycy5kZWxldGUoY29tcGxldGVPbmNlKTtcblxuICAgICAgICBfdGhpcy5zdG9wTGlzdGVuZXJzLmRlbGV0ZShjb21wbGV0ZU9uY2UpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG4gIC8qKlxyXG4gICAqIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBpcyBub3RpZmllZCB3aGVuZXZlciBhbiBldmVudCBpcyBzZW50IHRvIHRoZSBydW5uaW5nIGludGVycHJldGVyLlxyXG4gICAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgZXZlbnQgbGlzdGVuZXJcclxuICAgKi9cblxuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5vbkV2ZW50ID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgdGhpcy5ldmVudExpc3RlbmVycy5hZGQobGlzdGVuZXIpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICAvKipcclxuICAgKiBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgaXMgbm90aWZpZWQgd2hlbmV2ZXIgYSBgc2VuZGAgZXZlbnQgb2NjdXJzLlxyXG4gICAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgZXZlbnQgbGlzdGVuZXJcclxuICAgKi9cblxuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5vblNlbmQgPSBmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICB0aGlzLnNlbmRMaXN0ZW5lcnMuYWRkKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgLyoqXHJcbiAgICogQWRkcyBhIGNvbnRleHQgbGlzdGVuZXIgdGhhdCBpcyBub3RpZmllZCB3aGVuZXZlciB0aGUgc3RhdGUgY29udGV4dCBjaGFuZ2VzLlxyXG4gICAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgY29udGV4dCBsaXN0ZW5lclxyXG4gICAqL1xuXG5cbiAgSW50ZXJwcmV0ZXIucHJvdG90eXBlLm9uQ2hhbmdlID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgdGhpcy5jb250ZXh0TGlzdGVuZXJzLmFkZChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8qKlxyXG4gICAqIEFkZHMgYSBsaXN0ZW5lciB0aGF0IGlzIG5vdGlmaWVkIHdoZW4gdGhlIG1hY2hpbmUgaXMgc3RvcHBlZC5cclxuICAgKiBAcGFyYW0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyXHJcbiAgICovXG5cblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUub25TdG9wID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgdGhpcy5zdG9wTGlzdGVuZXJzLmFkZChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8qKlxyXG4gICAqIEFkZHMgYSBzdGF0ZSBsaXN0ZW5lciB0aGF0IGlzIG5vdGlmaWVkIHdoZW4gdGhlIHN0YXRlY2hhcnQgaGFzIHJlYWNoZWQgaXRzIGZpbmFsIHN0YXRlLlxyXG4gICAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgc3RhdGUgbGlzdGVuZXJcclxuICAgKi9cblxuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5vbkRvbmUgPSBmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICBpZiAodGhpcy5zdGF0dXMgPT09IEludGVycHJldGVyU3RhdHVzLlN0b3BwZWQgJiYgdGhpcy5fZG9uZUV2ZW50KSB7XG4gICAgICBsaXN0ZW5lcih0aGlzLl9kb25lRXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRvbmVMaXN0ZW5lcnMuYWRkKGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgLyoqXHJcbiAgICogUmVtb3ZlcyBhIGxpc3RlbmVyLlxyXG4gICAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgbGlzdGVuZXIgdG8gcmVtb3ZlXHJcbiAgICovXG5cblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKTtcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgdGhpcy5zZW5kTGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgdGhpcy5zdG9wTGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgdGhpcy5kb25lTGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgdGhpcy5jb250ZXh0TGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8qKlxyXG4gICAqIFN0YXJ0cyB0aGUgaW50ZXJwcmV0ZXIgZnJvbSB0aGUgZ2l2ZW4gc3RhdGUsIG9yIHRoZSBpbml0aWFsIHN0YXRlLlxyXG4gICAqIEBwYXJhbSBpbml0aWFsU3RhdGUgVGhlIHN0YXRlIHRvIHN0YXJ0IHRoZSBzdGF0ZWNoYXJ0IGZyb21cclxuICAgKi9cblxuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uIChpbml0aWFsU3RhdGUpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuc3RhdHVzID09PSBJbnRlcnByZXRlclN0YXR1cy5SdW5uaW5nKSB7XG4gICAgICAvLyBEbyBub3QgcmVzdGFydCB0aGUgc2VydmljZSBpZiBpdCBpcyBhbHJlYWR5IHN0YXJ0ZWRcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gLy8geWVzLCBpdCdzIGEgaGFjayBidXQgd2UgbmVlZCB0aGUgcmVsYXRlZCBjYWNoZSB0byBiZSBwb3B1bGF0ZWQgZm9yIHNvbWUgdGhpbmdzIHRvIHdvcmsgKGxpa2UgZGVsYXllZCB0cmFuc2l0aW9ucylcbiAgICAvLyB0aGlzIGlzIHVzdWFsbHkgY2FsbGVkIGJ5IGBtYWNoaW5lLmdldEluaXRpYWxTdGF0ZWAgYnV0IGlmIHdlIHJlaHlkcmF0ZSBmcm9tIGEgc3RhdGUgd2UgbWlnaHQgYnlwYXNzIHRoaXMgY2FsbFxuICAgIC8vIHdlIGFsc28gZG9uJ3Qgd2FudCB0byBjYWxsIHRoaXMgbWV0aG9kIGhlcmUgYXMgaXQgcmVzb2x2ZXMgdGhlIGZ1bGwgaW5pdGlhbCBzdGF0ZSB3aGljaCBtaWdodCBpbnZvbHZlIGNhbGxpbmcgYXNzaWduIGFjdGlvbnNcbiAgICAvLyBhbmQgdGhhdCBjb3VsZCBwb3RlbnRpYWxseSBsZWFkIHRvIHNvbWUgdW53YW50ZWQgc2lkZS1lZmZlY3RzIChldmVuIHN1Y2ggYXMgY3JlYXRpbmcgc29tZSByb2d1ZSBhY3RvcnMpXG5cblxuICAgIHRoaXMubWFjaGluZS5faW5pdCgpO1xuXG4gICAgcmVnaXN0cnkucmVnaXN0ZXIodGhpcy5zZXNzaW9uSWQsIHRoaXMpO1xuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIHRoaXMuc3RhdHVzID0gSW50ZXJwcmV0ZXJTdGF0dXMuUnVubmluZztcbiAgICB2YXIgcmVzb2x2ZWRTdGF0ZSA9IGluaXRpYWxTdGF0ZSA9PT0gdW5kZWZpbmVkID8gdGhpcy5pbml0aWFsU3RhdGUgOiBwcm92aWRlKHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBpc1N0YXRlQ29uZmlnKGluaXRpYWxTdGF0ZSkgPyBfdGhpcy5tYWNoaW5lLnJlc29sdmVTdGF0ZShpbml0aWFsU3RhdGUpIDogX3RoaXMubWFjaGluZS5yZXNvbHZlU3RhdGUoU3RhdGUuZnJvbShpbml0aWFsU3RhdGUsIF90aGlzLm1hY2hpbmUuY29udGV4dCkpO1xuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5kZXZUb29scykge1xuICAgICAgdGhpcy5hdHRhY2hEZXYoKTtcbiAgICB9XG5cbiAgICB0aGlzLnNjaGVkdWxlci5pbml0aWFsaXplKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnVwZGF0ZShyZXNvbHZlZFN0YXRlLCBpbml0RXZlbnQpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5fc3RvcENoaWxkcmVuID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIFRPRE86IHRoaW5rIGFib3V0IGNvbnZlcnRpbmcgdGhvc2UgdG8gYWN0aW9uc1xuICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKGNoaWxkLnN0b3ApKSB7XG4gICAgICAgIGNoaWxkLnN0b3AoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmNoaWxkcmVuLmNsZWFyKCk7XG4gIH07XG5cbiAgSW50ZXJwcmV0ZXIucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlXzYsIF9hLCBlXzcsIF9iLCBlXzgsIF9jLCBlXzksIF9kLCBlXzEwLCBfZTtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBfZiA9IF9fdmFsdWVzKHRoaXMubGlzdGVuZXJzKSwgX2cgPSBfZi5uZXh0KCk7ICFfZy5kb25lOyBfZyA9IF9mLm5leHQoKSkge1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSBfZy52YWx1ZTtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlXzZfMSkge1xuICAgICAgZV82ID0ge1xuICAgICAgICBlcnJvcjogZV82XzFcbiAgICAgIH07XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChfZyAmJiAhX2cuZG9uZSAmJiAoX2EgPSBfZi5yZXR1cm4pKSBfYS5jYWxsKF9mKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChlXzYpIHRocm93IGVfNi5lcnJvcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgZm9yICh2YXIgX2ggPSBfX3ZhbHVlcyh0aGlzLnN0b3BMaXN0ZW5lcnMpLCBfaiA9IF9oLm5leHQoKTsgIV9qLmRvbmU7IF9qID0gX2gubmV4dCgpKSB7XG4gICAgICAgIHZhciBsaXN0ZW5lciA9IF9qLnZhbHVlOyAvLyBjYWxsIGxpc3RlbmVyLCB0aGVuIHJlbW92ZVxuXG4gICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICAgIHRoaXMuc3RvcExpc3RlbmVycy5kZWxldGUobGlzdGVuZXIpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVfN18xKSB7XG4gICAgICBlXzcgPSB7XG4gICAgICAgIGVycm9yOiBlXzdfMVxuICAgICAgfTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9qICYmICFfai5kb25lICYmIChfYiA9IF9oLnJldHVybikpIF9iLmNhbGwoX2gpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKGVfNykgdGhyb3cgZV83LmVycm9yO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBfayA9IF9fdmFsdWVzKHRoaXMuY29udGV4dExpc3RlbmVycyksIF9sID0gX2submV4dCgpOyAhX2wuZG9uZTsgX2wgPSBfay5uZXh0KCkpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gX2wudmFsdWU7XG4gICAgICAgIHRoaXMuY29udGV4dExpc3RlbmVycy5kZWxldGUobGlzdGVuZXIpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVfOF8xKSB7XG4gICAgICBlXzggPSB7XG4gICAgICAgIGVycm9yOiBlXzhfMVxuICAgICAgfTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9sICYmICFfbC5kb25lICYmIChfYyA9IF9rLnJldHVybikpIF9jLmNhbGwoX2spO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKGVfOCkgdGhyb3cgZV84LmVycm9yO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBfbSA9IF9fdmFsdWVzKHRoaXMuZG9uZUxpc3RlbmVycyksIF9vID0gX20ubmV4dCgpOyAhX28uZG9uZTsgX28gPSBfbS5uZXh0KCkpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gX28udmFsdWU7XG4gICAgICAgIHRoaXMuZG9uZUxpc3RlbmVycy5kZWxldGUobGlzdGVuZXIpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVfOV8xKSB7XG4gICAgICBlXzkgPSB7XG4gICAgICAgIGVycm9yOiBlXzlfMVxuICAgICAgfTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9vICYmICFfby5kb25lICYmIChfZCA9IF9tLnJldHVybikpIF9kLmNhbGwoX20pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKGVfOSkgdGhyb3cgZV85LmVycm9yO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgLy8gSW50ZXJwcmV0ZXIgYWxyZWFkeSBzdG9wcGVkOyBkbyBub3RoaW5nXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy5zdGF0dXMgPSBJbnRlcnByZXRlclN0YXR1cy5TdG9wcGVkO1xuICAgIHRoaXMuX2luaXRpYWxTdGF0ZSA9IHVuZGVmaW5lZDtcblxuICAgIHRyeSB7XG4gICAgICAvLyB3ZSBhcmUgZ29pbmcgdG8gc3RvcCB3aXRoaW4gdGhlIGN1cnJlbnQgc3luYyBmcmFtZVxuICAgICAgLy8gc28gd2UgY2FuIHNhZmVseSBqdXN0IGNhbmNlbCB0aGlzIGhlcmUgYXMgbm90aGluZyBhc3luYyBzaG91bGQgYmUgZmlyZWQgYW55d2F5XG4gICAgICBmb3IgKHZhciBfcCA9IF9fdmFsdWVzKE9iamVjdC5rZXlzKHRoaXMuZGVsYXllZEV2ZW50c01hcCkpLCBfcSA9IF9wLm5leHQoKTsgIV9xLmRvbmU7IF9xID0gX3AubmV4dCgpKSB7XG4gICAgICAgIHZhciBrZXkgPSBfcS52YWx1ZTtcbiAgICAgICAgdGhpcy5jbG9jay5jbGVhclRpbWVvdXQodGhpcy5kZWxheWVkRXZlbnRzTWFwW2tleV0pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVfMTBfMSkge1xuICAgICAgZV8xMCA9IHtcbiAgICAgICAgZXJyb3I6IGVfMTBfMVxuICAgICAgfTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9xICYmICFfcS5kb25lICYmIChfZSA9IF9wLnJldHVybikpIF9lLmNhbGwoX3ApO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKGVfMTApIHRocm93IGVfMTAuZXJyb3I7XG4gICAgICB9XG4gICAgfSAvLyBjbGVhciBldmVyeXRoaW5nIHRoYXQgbWlnaHQgYmUgZW5xdWV1ZWRcblxuXG4gICAgdGhpcy5zY2hlZHVsZXIuY2xlYXIoKTtcbiAgICB0aGlzLnNjaGVkdWxlciA9IG5ldyBTY2hlZHVsZXIoe1xuICAgICAgZGVmZXJFdmVudHM6IHRoaXMub3B0aW9ucy5kZWZlckV2ZW50c1xuICAgIH0pO1xuICB9O1xuICAvKipcclxuICAgKiBTdG9wcyB0aGUgaW50ZXJwcmV0ZXIgYW5kIHVuc3Vic2NyaWJlIGFsbCBsaXN0ZW5lcnMuXHJcbiAgICpcclxuICAgKiBUaGlzIHdpbGwgYWxzbyBub3RpZnkgdGhlIGBvblN0b3BgIGxpc3RlbmVycy5cclxuICAgKi9cblxuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIFRPRE86IGFkZCB3YXJuaW5nIGZvciBzdG9wcGluZyBub24tcm9vdCBpbnRlcnByZXRlcnNcbiAgICB2YXIgX3RoaXMgPSB0aGlzOyAvLyBncmFiIHRoZSBjdXJyZW50IHNjaGVkdWxlciBhcyBpdCB3aWxsIGJlIHJlcGxhY2VkIGluIF9zdG9wXG5cblxuICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcblxuICAgIHRoaXMuX3N0b3AoKTsgLy8gbGV0IHdoYXQgaXMgY3VycmVudGx5IHByb2Nlc3NlZCB0byBiZSBmaW5pc2hlZFxuXG5cbiAgICBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9hO1xuXG4gICAgICBpZiAoKF9hID0gX3RoaXMuX3N0YXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZG9uZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIGl0IGZlZWxzIHdlaXJkIHRvIGhhbmRsZSB0aGlzIGhlcmUgYnV0IHdlIG5lZWQgdG8gaGFuZGxlIHRoaXMgZXZlbiBzbGlnaHRseSBcIm91dCBvZiBiYW5kXCJcblxuXG4gICAgICB2YXIgX2V2ZW50ID0gdG9TQ1hNTEV2ZW50KHtcbiAgICAgICAgdHlwZTogJ3hzdGF0ZS5zdG9wJ1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBuZXh0U3RhdGUgPSBwcm92aWRlKF90aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBleGl0QWN0aW9ucyA9IGZsYXR0ZW4oX19zcHJlYWRBcnJheShbXSwgX19yZWFkKF90aGlzLnN0YXRlLmNvbmZpZ3VyYXRpb24pLCBmYWxzZSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIHJldHVybiBiLm9yZGVyIC0gYS5vcmRlcjtcbiAgICAgICAgfSkubWFwKGZ1bmN0aW9uIChzdGF0ZU5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gdG9BY3Rpb25PYmplY3RzKHN0YXRlTm9kZS5vbkV4aXQsIF90aGlzLm1hY2hpbmUub3B0aW9ucy5hY3Rpb25zKTtcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHZhciBfYSA9IF9fcmVhZChyZXNvbHZlQWN0aW9ucyhfdGhpcy5tYWNoaW5lLCBfdGhpcy5zdGF0ZSwgX3RoaXMuc3RhdGUuY29udGV4dCwgX2V2ZW50LCBbe1xuICAgICAgICAgIHR5cGU6ICdleGl0JyxcbiAgICAgICAgICBhY3Rpb25zOiBleGl0QWN0aW9uc1xuICAgICAgICB9XSwgX3RoaXMubWFjaGluZS5jb25maWcucHJlZGljdGFibGVBY3Rpb25Bcmd1bWVudHMgPyBfdGhpcy5fZXhlYyA6IHVuZGVmaW5lZCwgX3RoaXMubWFjaGluZS5jb25maWcucHJlZGljdGFibGVBY3Rpb25Bcmd1bWVudHMgfHwgX3RoaXMubWFjaGluZS5jb25maWcucHJlc2VydmVBY3Rpb25PcmRlciksIDIpLFxuICAgICAgICAgICAgcmVzb2x2ZWRBY3Rpb25zID0gX2FbMF0sXG4gICAgICAgICAgICB1cGRhdGVkQ29udGV4dCA9IF9hWzFdO1xuXG4gICAgICAgIHZhciBuZXdTdGF0ZSA9IG5ldyBTdGF0ZSh7XG4gICAgICAgICAgdmFsdWU6IF90aGlzLnN0YXRlLnZhbHVlLFxuICAgICAgICAgIGNvbnRleHQ6IHVwZGF0ZWRDb250ZXh0LFxuICAgICAgICAgIF9ldmVudDogX2V2ZW50LFxuICAgICAgICAgIF9zZXNzaW9uaWQ6IF90aGlzLnNlc3Npb25JZCxcbiAgICAgICAgICBoaXN0b3J5VmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICBoaXN0b3J5OiBfdGhpcy5zdGF0ZSxcbiAgICAgICAgICBhY3Rpb25zOiByZXNvbHZlZEFjdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiAhaXNSYWlzYWJsZUFjdGlvbihhY3Rpb24pO1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIGFjdGl2aXRpZXM6IHt9LFxuICAgICAgICAgIGV2ZW50czogW10sXG4gICAgICAgICAgY29uZmlndXJhdGlvbjogW10sXG4gICAgICAgICAgdHJhbnNpdGlvbnM6IFtdLFxuICAgICAgICAgIGNoaWxkcmVuOiB7fSxcbiAgICAgICAgICBkb25lOiBfdGhpcy5zdGF0ZS5kb25lLFxuICAgICAgICAgIHRhZ3M6IF90aGlzLnN0YXRlLnRhZ3MsXG4gICAgICAgICAgbWFjaGluZTogX3RoaXMubWFjaGluZVxuICAgICAgICB9KTtcbiAgICAgICAgbmV3U3RhdGUuY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy51cGRhdGUobmV4dFN0YXRlLCBfZXZlbnQpO1xuXG4gICAgICBfdGhpcy5fc3RvcENoaWxkcmVuKCk7XG5cbiAgICAgIHJlZ2lzdHJ5LmZyZWUoX3RoaXMuc2Vzc2lvbklkKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUuYmF0Y2ggPSBmdW5jdGlvbiAoZXZlbnRzKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gSW50ZXJwcmV0ZXJTdGF0dXMuTm90U3RhcnRlZCAmJiB0aGlzLm9wdGlvbnMuZGVmZXJFdmVudHMpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG4gICAgICBpZiAoIUlTX1BST0RVQ1RJT04pIHtcbiAgICAgICAgd2FybihmYWxzZSwgXCJcIi5jb25jYXQoZXZlbnRzLmxlbmd0aCwgXCIgZXZlbnQocykgd2VyZSBzZW50IHRvIHVuaW5pdGlhbGl6ZWQgc2VydmljZSBcXFwiXCIpLmNvbmNhdCh0aGlzLm1hY2hpbmUuaWQsIFwiXFxcIiBhbmQgYXJlIGRlZmVycmVkLiBNYWtlIHN1cmUgLnN0YXJ0KCkgaXMgY2FsbGVkIGZvciB0aGlzIHNlcnZpY2UuXFxuRXZlbnQ6IFwiKS5jb25jYXQoSlNPTi5zdHJpbmdpZnkoZXZlbnQpKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnN0YXR1cyAhPT0gSW50ZXJwcmV0ZXJTdGF0dXMuUnVubmluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXG4gICAgICBcIlwiLmNvbmNhdChldmVudHMubGVuZ3RoLCBcIiBldmVudChzKSB3ZXJlIHNlbnQgdG8gdW5pbml0aWFsaXplZCBzZXJ2aWNlIFxcXCJcIikuY29uY2F0KHRoaXMubWFjaGluZS5pZCwgXCJcXFwiLiBNYWtlIHN1cmUgLnN0YXJ0KCkgaXMgY2FsbGVkIGZvciB0aGlzIHNlcnZpY2UsIG9yIHNldCB7IGRlZmVyRXZlbnRzOiB0cnVlIH0gaW4gdGhlIHNlcnZpY2Ugb3B0aW9ucy5cIikpO1xuICAgIH1cblxuICAgIGlmICghZXZlbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBleGVjID0gISF0aGlzLm1hY2hpbmUuY29uZmlnLnByZWRpY3RhYmxlQWN0aW9uQXJndW1lbnRzICYmIHRoaXMuX2V4ZWM7XG4gICAgdGhpcy5zY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGVfMTEsIF9hO1xuXG4gICAgICB2YXIgbmV4dFN0YXRlID0gX3RoaXMuc3RhdGU7XG4gICAgICB2YXIgYmF0Y2hDaGFuZ2VkID0gZmFsc2U7XG4gICAgICB2YXIgYmF0Y2hlZEFjdGlvbnMgPSBbXTtcblxuICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoZXZlbnRfMSkge1xuICAgICAgICB2YXIgX2V2ZW50ID0gdG9TQ1hNTEV2ZW50KGV2ZW50XzEpO1xuXG4gICAgICAgIF90aGlzLmZvcndhcmQoX2V2ZW50KTtcblxuICAgICAgICBuZXh0U3RhdGUgPSBwcm92aWRlKF90aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLm1hY2hpbmUudHJhbnNpdGlvbihuZXh0U3RhdGUsIF9ldmVudCwgdW5kZWZpbmVkLCBleGVjIHx8IHVuZGVmaW5lZCk7XG4gICAgICAgIH0pO1xuICAgICAgICBiYXRjaGVkQWN0aW9ucy5wdXNoLmFwcGx5KGJhdGNoZWRBY3Rpb25zLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoX3RoaXMubWFjaGluZS5jb25maWcucHJlZGljdGFibGVBY3Rpb25Bcmd1bWVudHMgPyBuZXh0U3RhdGUuYWN0aW9ucyA6IG5leHRTdGF0ZS5hY3Rpb25zLm1hcChmdW5jdGlvbiAoYSkge1xuICAgICAgICAgIHJldHVybiBiaW5kQWN0aW9uVG9TdGF0ZShhLCBuZXh0U3RhdGUpO1xuICAgICAgICB9KSksIGZhbHNlKSk7XG4gICAgICAgIGJhdGNoQ2hhbmdlZCA9IGJhdGNoQ2hhbmdlZCB8fCAhIW5leHRTdGF0ZS5jaGFuZ2VkO1xuICAgICAgfTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgZXZlbnRzXzEgPSBfX3ZhbHVlcyhldmVudHMpLCBldmVudHNfMV8xID0gZXZlbnRzXzEubmV4dCgpOyAhZXZlbnRzXzFfMS5kb25lOyBldmVudHNfMV8xID0gZXZlbnRzXzEubmV4dCgpKSB7XG4gICAgICAgICAgdmFyIGV2ZW50XzEgPSBldmVudHNfMV8xLnZhbHVlO1xuXG4gICAgICAgICAgX2xvb3BfMShldmVudF8xKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZV8xMV8xKSB7XG4gICAgICAgIGVfMTEgPSB7XG4gICAgICAgICAgZXJyb3I6IGVfMTFfMVxuICAgICAgICB9O1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoZXZlbnRzXzFfMSAmJiAhZXZlbnRzXzFfMS5kb25lICYmIChfYSA9IGV2ZW50c18xLnJldHVybikpIF9hLmNhbGwoZXZlbnRzXzEpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChlXzExKSB0aHJvdyBlXzExLmVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG5leHRTdGF0ZS5jaGFuZ2VkID0gYmF0Y2hDaGFuZ2VkO1xuICAgICAgbmV4dFN0YXRlLmFjdGlvbnMgPSBiYXRjaGVkQWN0aW9ucztcblxuICAgICAgX3RoaXMudXBkYXRlKG5leHRTdGF0ZSwgdG9TQ1hNTEV2ZW50KGV2ZW50c1tldmVudHMubGVuZ3RoIC0gMV0pKTtcbiAgICB9KTtcbiAgfTtcbiAgLyoqXHJcbiAgICogUmV0dXJucyBhIHNlbmQgZnVuY3Rpb24gYm91bmQgdG8gdGhpcyBpbnRlcnByZXRlciBpbnN0YW5jZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgdG8gYmUgc2VudCBieSB0aGUgc2VuZGVyLlxyXG4gICAqL1xuXG5cbiAgSW50ZXJwcmV0ZXIucHJvdG90eXBlLnNlbmRlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiB0aGlzLnNlbmQuYmluZCh0aGlzLCBldmVudCk7XG4gIH07XG5cbiAgSW50ZXJwcmV0ZXIucHJvdG90eXBlLl9uZXh0U3RhdGUgPSBmdW5jdGlvbiAoZXZlbnQsIGV4ZWMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKGV4ZWMgPT09IHZvaWQgMCkge1xuICAgICAgZXhlYyA9ICEhdGhpcy5tYWNoaW5lLmNvbmZpZy5wcmVkaWN0YWJsZUFjdGlvbkFyZ3VtZW50cyAmJiB0aGlzLl9leGVjO1xuICAgIH1cblxuICAgIHZhciBfZXZlbnQgPSB0b1NDWE1MRXZlbnQoZXZlbnQpO1xuXG4gICAgaWYgKF9ldmVudC5uYW1lLmluZGV4T2YoZXJyb3JQbGF0Zm9ybSkgPT09IDAgJiYgIXRoaXMuc3RhdGUubmV4dEV2ZW50cy5zb21lKGZ1bmN0aW9uIChuZXh0RXZlbnQpIHtcbiAgICAgIHJldHVybiBuZXh0RXZlbnQuaW5kZXhPZihlcnJvclBsYXRmb3JtKSA9PT0gMDtcbiAgICB9KSkge1xuICAgICAgdGhyb3cgX2V2ZW50LmRhdGEuZGF0YTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dFN0YXRlID0gcHJvdmlkZSh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMubWFjaGluZS50cmFuc2l0aW9uKF90aGlzLnN0YXRlLCBfZXZlbnQsIHVuZGVmaW5lZCwgZXhlYyB8fCB1bmRlZmluZWQpO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXh0U3RhdGU7XG4gIH07XG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIG5leHQgc3RhdGUgZ2l2ZW4gdGhlIGludGVycHJldGVyJ3MgY3VycmVudCBzdGF0ZSBhbmQgdGhlIGV2ZW50LlxyXG4gICAqXHJcbiAgICogVGhpcyBpcyBhIHB1cmUgbWV0aG9kIHRoYXQgZG9lcyBfbm90XyB1cGRhdGUgdGhlIGludGVycHJldGVyJ3Mgc3RhdGUuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IHRvIGRldGVybWluZSB0aGUgbmV4dCBzdGF0ZVxyXG4gICAqL1xuXG5cbiAgSW50ZXJwcmV0ZXIucHJvdG90eXBlLm5leHRTdGF0ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiB0aGlzLl9uZXh0U3RhdGUoZXZlbnQsIGZhbHNlKTtcbiAgfTtcblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUuZm9yd2FyZCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBlXzEyLCBfYTtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKHRoaXMuZm9yd2FyZFRvKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgICB2YXIgaWQgPSBfYy52YWx1ZTtcbiAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5jaGlsZHJlbi5nZXQoaWQpO1xuXG4gICAgICAgIGlmICghY2hpbGQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gZm9yd2FyZCBldmVudCAnXCIuY29uY2F0KGV2ZW50LCBcIicgZnJvbSBpbnRlcnByZXRlciAnXCIpLmNvbmNhdCh0aGlzLmlkLCBcIicgdG8gbm9uZXhpc3RhbnQgY2hpbGQgJ1wiKS5jb25jYXQoaWQsIFwiJy5cIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQuc2VuZChldmVudCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZV8xMl8xKSB7XG4gICAgICBlXzEyID0ge1xuICAgICAgICBlcnJvcjogZV8xMl8xXG4gICAgICB9O1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoZV8xMikgdGhyb3cgZV8xMi5lcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgSW50ZXJwcmV0ZXIucHJvdG90eXBlLmRlZmVyID0gZnVuY3Rpb24gKHNlbmRBY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIHRpbWVySWQgPSB0aGlzLmNsb2NrLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCd0bycgaW4gc2VuZEFjdGlvbiAmJiBzZW5kQWN0aW9uLnRvKSB7XG4gICAgICAgIF90aGlzLnNlbmRUbyhzZW5kQWN0aW9uLl9ldmVudCwgc2VuZEFjdGlvbi50bywgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5zZW5kKHNlbmRBY3Rpb24uX2V2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBzZW5kQWN0aW9uLmRlbGF5KTtcblxuICAgIGlmIChzZW5kQWN0aW9uLmlkKSB7XG4gICAgICB0aGlzLmRlbGF5ZWRFdmVudHNNYXBbc2VuZEFjdGlvbi5pZF0gPSB0aW1lcklkO1xuICAgIH1cbiAgfTtcblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24gKHNlbmRJZCkge1xuICAgIHRoaXMuY2xvY2suY2xlYXJUaW1lb3V0KHRoaXMuZGVsYXllZEV2ZW50c01hcFtzZW5kSWRdKTtcbiAgICBkZWxldGUgdGhpcy5kZWxheWVkRXZlbnRzTWFwW3NlbmRJZF07XG4gIH07XG5cbiAgSW50ZXJwcmV0ZXIucHJvdG90eXBlLmV4ZWMgPSBmdW5jdGlvbiAoYWN0aW9uLCBzdGF0ZSwgYWN0aW9uRnVuY3Rpb25NYXApIHtcbiAgICBpZiAoYWN0aW9uRnVuY3Rpb25NYXAgPT09IHZvaWQgMCkge1xuICAgICAgYWN0aW9uRnVuY3Rpb25NYXAgPSB0aGlzLm1hY2hpbmUub3B0aW9ucy5hY3Rpb25zO1xuICAgIH1cblxuICAgIHRoaXMuX2V4ZWMoYWN0aW9uLCBzdGF0ZS5jb250ZXh0LCBzdGF0ZS5fZXZlbnQsIGFjdGlvbkZ1bmN0aW9uTWFwKTtcbiAgfTtcblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGRJZCkge1xuICAgIHZhciBfYTtcblxuICAgIHRoaXMuY2hpbGRyZW4uZGVsZXRlKGNoaWxkSWQpO1xuICAgIHRoaXMuZm9yd2FyZFRvLmRlbGV0ZShjaGlsZElkKTsgLy8gdGhpcy5zdGF0ZSBtaWdodCBub3QgZXhpc3QgYXQgdGhlIHRpbWUgdGhpcyBpcyBjYWxsZWQsXG4gICAgLy8gc3VjaCBhcyB3aGVuIGEgY2hpbGQgaXMgYWRkZWQgdGhlbiByZW1vdmVkIHdoaWxlIGluaXRpYWxpemluZyB0aGUgc3RhdGVcblxuICAgIChfYSA9IHRoaXMuc3RhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB0cnVlIDogZGVsZXRlIF9hLmNoaWxkcmVuW2NoaWxkSWRdO1xuICB9O1xuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5zdG9wQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGRJZCkge1xuICAgIHZhciBjaGlsZCA9IHRoaXMuY2hpbGRyZW4uZ2V0KGNoaWxkSWQpO1xuXG4gICAgaWYgKCFjaGlsZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucmVtb3ZlQ2hpbGQoY2hpbGRJZCk7XG5cbiAgICBpZiAoaXNGdW5jdGlvbihjaGlsZC5zdG9wKSkge1xuICAgICAgY2hpbGQuc3RvcCgpO1xuICAgIH1cbiAgfTtcblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUuc3Bhd24gPSBmdW5jdGlvbiAoZW50aXR5LCBuYW1lLCBvcHRpb25zKSB7XG4gICAgaWYgKHRoaXMuc3RhdHVzICE9PSBJbnRlcnByZXRlclN0YXR1cy5SdW5uaW5nKSB7XG4gICAgICByZXR1cm4gY3JlYXRlRGVmZXJyZWRBY3RvcihlbnRpdHksIG5hbWUpO1xuICAgIH1cblxuICAgIGlmIChpc1Byb21pc2VMaWtlKGVudGl0eSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNwYXduUHJvbWlzZShQcm9taXNlLnJlc29sdmUoZW50aXR5KSwgbmFtZSk7XG4gICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKGVudGl0eSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNwYXduQ2FsbGJhY2soZW50aXR5LCBuYW1lKTtcbiAgICB9IGVsc2UgaWYgKGlzU3Bhd25lZEFjdG9yKGVudGl0eSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNwYXduQWN0b3IoZW50aXR5LCBuYW1lKTtcbiAgICB9IGVsc2UgaWYgKGlzT2JzZXJ2YWJsZShlbnRpdHkpKSB7XG4gICAgICByZXR1cm4gdGhpcy5zcGF3bk9ic2VydmFibGUoZW50aXR5LCBuYW1lKTtcbiAgICB9IGVsc2UgaWYgKGlzTWFjaGluZShlbnRpdHkpKSB7XG4gICAgICByZXR1cm4gdGhpcy5zcGF3bk1hY2hpbmUoZW50aXR5LCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb3B0aW9ucyksIHtcbiAgICAgICAgaWQ6IG5hbWVcbiAgICAgIH0pKTtcbiAgICB9IGVsc2UgaWYgKGlzQmVoYXZpb3IoZW50aXR5KSkge1xuICAgICAgcmV0dXJuIHRoaXMuc3Bhd25CZWhhdmlvcihlbnRpdHksIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gc3Bhd24gZW50aXR5IFxcXCJcIi5jb25jYXQobmFtZSwgXCJcXFwiIG9mIHR5cGUgXFxcIlwiKS5jb25jYXQodHlwZW9mIGVudGl0eSwgXCJcXFwiLlwiKSk7XG4gICAgfVxuICB9O1xuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5zcGF3bk1hY2hpbmUgPSBmdW5jdGlvbiAobWFjaGluZSwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkU2VydmljZSA9IG5ldyBJbnRlcnByZXRlcihtYWNoaW5lLCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5vcHRpb25zKSwge1xuICAgICAgcGFyZW50OiB0aGlzLFxuICAgICAgaWQ6IG9wdGlvbnMuaWQgfHwgbWFjaGluZS5pZFxuICAgIH0pKTtcblxuICAgIHZhciByZXNvbHZlZE9wdGlvbnMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgREVGQVVMVF9TUEFXTl9PUFRJT05TKSwgb3B0aW9ucyk7XG5cbiAgICBpZiAocmVzb2x2ZWRPcHRpb25zLnN5bmMpIHtcbiAgICAgIGNoaWxkU2VydmljZS5vblRyYW5zaXRpb24oZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIF90aGlzLnNlbmQodXBkYXRlLCB7XG4gICAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICAgIGlkOiBjaGlsZFNlcnZpY2UuaWRcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgYWN0b3IgPSBjaGlsZFNlcnZpY2U7XG4gICAgdGhpcy5jaGlsZHJlbi5zZXQoY2hpbGRTZXJ2aWNlLmlkLCBhY3Rvcik7XG5cbiAgICBpZiAocmVzb2x2ZWRPcHRpb25zLmF1dG9Gb3J3YXJkKSB7XG4gICAgICB0aGlzLmZvcndhcmRUby5hZGQoY2hpbGRTZXJ2aWNlLmlkKTtcbiAgICB9XG5cbiAgICBjaGlsZFNlcnZpY2Uub25Eb25lKGZ1bmN0aW9uIChkb25lRXZlbnQpIHtcbiAgICAgIF90aGlzLnJlbW92ZUNoaWxkKGNoaWxkU2VydmljZS5pZCk7XG5cbiAgICAgIF90aGlzLnNlbmQodG9TQ1hNTEV2ZW50KGRvbmVFdmVudCwge1xuICAgICAgICBvcmlnaW46IGNoaWxkU2VydmljZS5pZFxuICAgICAgfSkpO1xuICAgIH0pLnN0YXJ0KCk7XG4gICAgcmV0dXJuIGFjdG9yO1xuICB9O1xuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5zcGF3bkJlaGF2aW9yID0gZnVuY3Rpb24gKGJlaGF2aW9yLCBpZCkge1xuICAgIHZhciBhY3RvclJlZiA9IHNwYXduQmVoYXZpb3IoYmVoYXZpb3IsIHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pO1xuICAgIHRoaXMuY2hpbGRyZW4uc2V0KGlkLCBhY3RvclJlZik7XG4gICAgcmV0dXJuIGFjdG9yUmVmO1xuICB9O1xuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5zcGF3blByb21pc2UgPSBmdW5jdGlvbiAocHJvbWlzZSwgaWQpIHtcbiAgICB2YXIgX2E7XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGNhbmNlbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlc29sdmVkRGF0YTtcbiAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBpZiAoIWNhbmNlbGVkKSB7XG4gICAgICAgIHJlc29sdmVkRGF0YSA9IHJlc3BvbnNlO1xuXG4gICAgICAgIF90aGlzLnJlbW92ZUNoaWxkKGlkKTtcblxuICAgICAgICBfdGhpcy5zZW5kKHRvU0NYTUxFdmVudChkb25lSW52b2tlKGlkLCByZXNwb25zZSksIHtcbiAgICAgICAgICBvcmlnaW46IGlkXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbiAoZXJyb3JEYXRhKSB7XG4gICAgICBpZiAoIWNhbmNlbGVkKSB7XG4gICAgICAgIF90aGlzLnJlbW92ZUNoaWxkKGlkKTtcblxuICAgICAgICB2YXIgZXJyb3JFdmVudCA9IGVycm9yKGlkLCBlcnJvckRhdGEpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gU2VuZCBcImVycm9yLnBsYXRmb3JtLmlkXCIgdG8gdGhpcyAocGFyZW50KS5cbiAgICAgICAgICBfdGhpcy5zZW5kKHRvU0NYTUxFdmVudChlcnJvckV2ZW50LCB7XG4gICAgICAgICAgICBvcmlnaW46IGlkXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIHJlcG9ydFVuaGFuZGxlZEV4Y2VwdGlvbk9uSW52b2NhdGlvbihlcnJvckRhdGEsIGVycm9yLCBpZCk7XG5cbiAgICAgICAgICBpZiAoX3RoaXMuZGV2VG9vbHMpIHtcbiAgICAgICAgICAgIF90aGlzLmRldlRvb2xzLnNlbmQoZXJyb3JFdmVudCwgX3RoaXMuc3RhdGUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChfdGhpcy5tYWNoaW5lLnN0cmljdCkge1xuICAgICAgICAgICAgLy8gaXQgd291bGQgYmUgYmV0dGVyIHRvIGFsd2F5cyBzdG9wIHRoZSBzdGF0ZSBtYWNoaW5lIGlmIHVuaGFuZGxlZFxuICAgICAgICAgICAgLy8gZXhjZXB0aW9uL3Byb21pc2UgcmVqZWN0aW9uIGhhcHBlbnMgYnV0IGJlY2F1c2Ugd2UgZG9uJ3Qgd2FudCB0b1xuICAgICAgICAgICAgLy8gYnJlYWsgZXhpc3RpbmcgY29kZSBzbyBlbmZvcmNlIGl0IG9uIHN0cmljdCBtb2RlIG9ubHkgZXNwZWNpYWxseSBzb1xuICAgICAgICAgICAgLy8gYmVjYXVzZSBkb2N1bWVudGF0aW9uIHNheXMgdGhhdCBvbkVycm9yIGlzIG9wdGlvbmFsXG4gICAgICAgICAgICBfdGhpcy5zdG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgdmFyIGFjdG9yID0gKF9hID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgc2VuZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfSxcbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gKG5leHQsIGhhbmRsZUVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgb2JzZXJ2ZXIgPSB0b09ic2VydmVyKG5leHQsIGhhbmRsZUVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgIGlmICh1bnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvYnNlcnZlci5uZXh0KHJlc3BvbnNlKTtcblxuICAgICAgICAgIGlmICh1bnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgaWYgKHVuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG9ic2VydmVyLmVycm9yKGVycik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5zdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgc3RvcDogZnVuY3Rpb24gKCkge1xuICAgICAgICBjYW5jZWxlZCA9IHRydWU7XG4gICAgICB9LFxuICAgICAgdG9KU09OOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaWQ6IGlkXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgZ2V0U25hcHNob3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVkRGF0YTtcbiAgICAgIH1cbiAgICB9LCBfYVtzeW1ib2xPYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9hKTtcbiAgICB0aGlzLmNoaWxkcmVuLnNldChpZCwgYWN0b3IpO1xuICAgIHJldHVybiBhY3RvcjtcbiAgfTtcblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUuc3Bhd25DYWxsYmFjayA9IGZ1bmN0aW9uIChjYWxsYmFjaywgaWQpIHtcbiAgICB2YXIgX2E7XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGNhbmNlbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlY2VpdmVycyA9IG5ldyBTZXQoKTtcbiAgICB2YXIgbGlzdGVuZXJzID0gbmV3IFNldCgpO1xuICAgIHZhciBlbWl0dGVkO1xuXG4gICAgdmFyIHJlY2VpdmUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgZW1pdHRlZCA9IGU7XG4gICAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RlbmVyKGUpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChjYW5jZWxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnNlbmQodG9TQ1hNTEV2ZW50KGUsIHtcbiAgICAgICAgb3JpZ2luOiBpZFxuICAgICAgfSkpO1xuICAgIH07XG5cbiAgICB2YXIgY2FsbGJhY2tTdG9wO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNhbGxiYWNrU3RvcCA9IGNhbGxiYWNrKHJlY2VpdmUsIGZ1bmN0aW9uIChuZXdMaXN0ZW5lcikge1xuICAgICAgICByZWNlaXZlcnMuYWRkKG5ld0xpc3RlbmVyKTtcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhpcy5zZW5kKGVycm9yKGlkLCBlcnIpKTtcbiAgICB9XG5cbiAgICBpZiAoaXNQcm9taXNlTGlrZShjYWxsYmFja1N0b3ApKSB7XG4gICAgICAvLyBpdCB0dXJuZWQgb3V0IHRvIGJlIGFuIGFzeW5jIGZ1bmN0aW9uLCBjYW4ndCByZWxpYWJseSBjaGVjayB0aGlzIGJlZm9yZSBjYWxsaW5nIGBjYWxsYmFja2BcbiAgICAgIC8vIGJlY2F1c2UgdHJhbnNwaWxlZCBhc3luYyBmdW5jdGlvbnMgYXJlIG5vdCByZWNvZ25pemFibGVcbiAgICAgIHJldHVybiB0aGlzLnNwYXduUHJvbWlzZShjYWxsYmFja1N0b3AsIGlkKTtcbiAgICB9XG5cbiAgICB2YXIgYWN0b3IgPSAoX2EgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBzZW5kOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIHJlY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uIChyZWNlaXZlcikge1xuICAgICAgICAgIHJldHVybiByZWNlaXZlcihldmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgICAgdmFyIG9ic2VydmVyID0gdG9PYnNlcnZlcihuZXh0KTtcbiAgICAgICAgbGlzdGVuZXJzLmFkZChvYnNlcnZlci5uZXh0KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbGlzdGVuZXJzLmRlbGV0ZShvYnNlcnZlci5uZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgc3RvcDogZnVuY3Rpb24gKCkge1xuICAgICAgICBjYW5jZWxlZCA9IHRydWU7XG5cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oY2FsbGJhY2tTdG9wKSkge1xuICAgICAgICAgIGNhbGxiYWNrU3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG9KU09OOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaWQ6IGlkXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgZ2V0U25hcHNob3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGVtaXR0ZWQ7XG4gICAgICB9XG4gICAgfSwgX2Fbc3ltYm9sT2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfYSk7XG4gICAgdGhpcy5jaGlsZHJlbi5zZXQoaWQsIGFjdG9yKTtcbiAgICByZXR1cm4gYWN0b3I7XG4gIH07XG5cbiAgSW50ZXJwcmV0ZXIucHJvdG90eXBlLnNwYXduT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIChzb3VyY2UsIGlkKSB7XG4gICAgdmFyIF9hO1xuXG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBlbWl0dGVkO1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBzb3VyY2Uuc3Vic2NyaWJlKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgZW1pdHRlZCA9IHZhbHVlO1xuXG4gICAgICBfdGhpcy5zZW5kKHRvU0NYTUxFdmVudCh2YWx1ZSwge1xuICAgICAgICBvcmlnaW46IGlkXG4gICAgICB9KSk7XG4gICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgX3RoaXMucmVtb3ZlQ2hpbGQoaWQpO1xuXG4gICAgICBfdGhpcy5zZW5kKHRvU0NYTUxFdmVudChlcnJvcihpZCwgZXJyKSwge1xuICAgICAgICBvcmlnaW46IGlkXG4gICAgICB9KSk7XG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMucmVtb3ZlQ2hpbGQoaWQpO1xuXG4gICAgICBfdGhpcy5zZW5kKHRvU0NYTUxFdmVudChkb25lSW52b2tlKGlkKSwge1xuICAgICAgICBvcmlnaW46IGlkXG4gICAgICB9KSk7XG4gICAgfSk7XG4gICAgdmFyIGFjdG9yID0gKF9hID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgc2VuZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfSxcbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gKG5leHQsIGhhbmRsZUVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXh0LCBoYW5kbGVFcnJvciwgY29tcGxldGUpO1xuICAgICAgfSxcbiAgICAgIHN0b3A6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgfSxcbiAgICAgIGdldFNuYXBzaG90OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBlbWl0dGVkO1xuICAgICAgfSxcbiAgICAgIHRvSlNPTjogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlkOiBpZFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIF9hW3N5bWJvbE9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX2EpO1xuICAgIHRoaXMuY2hpbGRyZW4uc2V0KGlkLCBhY3Rvcik7XG4gICAgcmV0dXJuIGFjdG9yO1xuICB9O1xuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5zcGF3bkFjdG9yID0gZnVuY3Rpb24gKGFjdG9yLCBuYW1lKSB7XG4gICAgdGhpcy5jaGlsZHJlbi5zZXQobmFtZSwgYWN0b3IpO1xuICAgIHJldHVybiBhY3RvcjtcbiAgfTtcblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUuc3Bhd25BY3Rpdml0eSA9IGZ1bmN0aW9uIChhY3Rpdml0eSkge1xuICAgIHZhciBpbXBsZW1lbnRhdGlvbiA9IHRoaXMubWFjaGluZS5vcHRpb25zICYmIHRoaXMubWFjaGluZS5vcHRpb25zLmFjdGl2aXRpZXMgPyB0aGlzLm1hY2hpbmUub3B0aW9ucy5hY3Rpdml0aWVzW2FjdGl2aXR5LnR5cGVdIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKCFpbXBsZW1lbnRhdGlvbikge1xuICAgICAgaWYgKCFJU19QUk9EVUNUSU9OKSB7XG4gICAgICAgIHdhcm4oZmFsc2UsIFwiTm8gaW1wbGVtZW50YXRpb24gZm91bmQgZm9yIGFjdGl2aXR5ICdcIi5jb25jYXQoYWN0aXZpdHkudHlwZSwgXCInXCIpKTtcbiAgICAgIH0gLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcblxuXG4gICAgICByZXR1cm47XG4gICAgfSAvLyBTdGFydCBpbXBsZW1lbnRhdGlvblxuXG5cbiAgICB2YXIgZGlzcG9zZSA9IGltcGxlbWVudGF0aW9uKHRoaXMuc3RhdGUuY29udGV4dCwgYWN0aXZpdHkpO1xuICAgIHRoaXMuc3Bhd25FZmZlY3QoYWN0aXZpdHkuaWQsIGRpc3Bvc2UpO1xuICB9O1xuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5zcGF3bkVmZmVjdCA9IGZ1bmN0aW9uIChpZCwgZGlzcG9zZSkge1xuICAgIHZhciBfYTtcblxuICAgIHRoaXMuY2hpbGRyZW4uc2V0KGlkLCAoX2EgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBzZW5kOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9LFxuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIHN0b3A6IGRpc3Bvc2UgfHwgdW5kZWZpbmVkLFxuICAgICAgZ2V0U25hcHNob3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH0sXG4gICAgICB0b0pTT046IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpZDogaWRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfYVtzeW1ib2xPYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9hKSk7XG4gIH07XG5cbiAgSW50ZXJwcmV0ZXIucHJvdG90eXBlLmF0dGFjaERldiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZ2xvYmFsID0gZ2V0R2xvYmFsKCk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmRldlRvb2xzICYmIGdsb2JhbCkge1xuICAgICAgaWYgKGdsb2JhbC5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fKSB7XG4gICAgICAgIHZhciBkZXZUb29sc09wdGlvbnMgPSB0eXBlb2YgdGhpcy5vcHRpb25zLmRldlRvb2xzID09PSAnb2JqZWN0JyA/IHRoaXMub3B0aW9ucy5kZXZUb29scyA6IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5kZXZUb29scyA9IGdsb2JhbC5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fLmNvbm5lY3QoX19hc3NpZ24oX19hc3NpZ24oe1xuICAgICAgICAgIG5hbWU6IHRoaXMuaWQsXG4gICAgICAgICAgYXV0b1BhdXNlOiB0cnVlLFxuICAgICAgICAgIHN0YXRlU2FuaXRpemVyOiBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHZhbHVlOiBzdGF0ZS52YWx1ZSxcbiAgICAgICAgICAgICAgY29udGV4dDogc3RhdGUuY29udGV4dCxcbiAgICAgICAgICAgICAgYWN0aW9uczogc3RhdGUuYWN0aW9uc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIGRldlRvb2xzT3B0aW9ucyksIHtcbiAgICAgICAgICBmZWF0dXJlczogX19hc3NpZ24oe1xuICAgICAgICAgICAganVtcDogZmFsc2UsXG4gICAgICAgICAgICBza2lwOiBmYWxzZVxuICAgICAgICAgIH0sIGRldlRvb2xzT3B0aW9ucyA/IGRldlRvb2xzT3B0aW9ucy5mZWF0dXJlcyA6IHVuZGVmaW5lZClcbiAgICAgICAgfSksIHRoaXMubWFjaGluZSk7XG4gICAgICAgIHRoaXMuZGV2VG9vbHMuaW5pdCh0aGlzLnN0YXRlKTtcbiAgICAgIH0gLy8gYWRkIFhTdGF0ZS1zcGVjaWZpYyBkZXYgdG9vbGluZyBob29rXG5cblxuICAgICAgcmVnaXN0ZXJTZXJ2aWNlKHRoaXMpO1xuICAgIH1cbiAgfTtcblxuICBJbnRlcnByZXRlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpZDogdGhpcy5pZFxuICAgIH07XG4gIH07XG5cbiAgSW50ZXJwcmV0ZXIucHJvdG90eXBlW3N5bWJvbE9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEludGVycHJldGVyLnByb3RvdHlwZS5nZXRTbmFwc2hvdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5zdGF0dXMgPT09IEludGVycHJldGVyU3RhdHVzLk5vdFN0YXJ0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmluaXRpYWxTdGF0ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc3RhdGU7XG4gIH07XG4gIC8qKlxyXG4gICAqIFRoZSBkZWZhdWx0IGludGVycHJldGVyIG9wdGlvbnM6XHJcbiAgICpcclxuICAgKiAtIGBjbG9ja2AgdXNlcyB0aGUgZ2xvYmFsIGBzZXRUaW1lb3V0YCBhbmQgYGNsZWFyVGltZW91dGAgZnVuY3Rpb25zXHJcbiAgICogLSBgbG9nZ2VyYCB1c2VzIHRoZSBnbG9iYWwgYGNvbnNvbGUubG9nKClgIG1ldGhvZFxyXG4gICAqL1xuXG5cbiAgSW50ZXJwcmV0ZXIuZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgZXhlY3V0ZTogdHJ1ZSxcbiAgICBkZWZlckV2ZW50czogdHJ1ZSxcbiAgICBjbG9jazoge1xuICAgICAgc2V0VGltZW91dDogZnVuY3Rpb24gKGZuLCBtcykge1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmbiwgbXMpO1xuICAgICAgfSxcbiAgICAgIGNsZWFyVGltZW91dDogZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQoaWQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgbG9nZ2VyOiAvKiNfX1BVUkVfXyovY29uc29sZS5sb2cuYmluZChjb25zb2xlKSxcbiAgICBkZXZUb29sczogZmFsc2VcbiAgfTtcbiAgSW50ZXJwcmV0ZXIuaW50ZXJwcmV0ID0gaW50ZXJwcmV0O1xuICByZXR1cm4gSW50ZXJwcmV0ZXI7XG59KCk7XG5cbnZhciByZXNvbHZlU3Bhd25PcHRpb25zID0gZnVuY3Rpb24gKG5hbWVPck9wdGlvbnMpIHtcbiAgaWYgKGlzU3RyaW5nKG5hbWVPck9wdGlvbnMpKSB7XG4gICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBERUZBVUxUX1NQQVdOX09QVElPTlMpLCB7XG4gICAgICBuYW1lOiBuYW1lT3JPcHRpb25zXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oe30sIERFRkFVTFRfU1BBV05fT1BUSU9OUyksIHtcbiAgICBuYW1lOiB1bmlxdWVJZCgpXG4gIH0pLCBuYW1lT3JPcHRpb25zKTtcbn07XG5cbmZ1bmN0aW9uIHNwYXduKGVudGl0eSwgbmFtZU9yT3B0aW9ucykge1xuICB2YXIgcmVzb2x2ZWRPcHRpb25zID0gcmVzb2x2ZVNwYXduT3B0aW9ucyhuYW1lT3JPcHRpb25zKTtcbiAgcmV0dXJuIGNvbnN1bWUoZnVuY3Rpb24gKHNlcnZpY2UpIHtcbiAgICBpZiAoIUlTX1BST0RVQ1RJT04pIHtcbiAgICAgIHZhciBpc0xhenlFbnRpdHkgPSBpc01hY2hpbmUoZW50aXR5KSB8fCBpc0Z1bmN0aW9uKGVudGl0eSk7XG4gICAgICB3YXJuKCEhc2VydmljZSB8fCBpc0xhenlFbnRpdHksIFwiQXR0ZW1wdGVkIHRvIHNwYXduIGFuIEFjdG9yIChJRDogXFxcIlwiLmNvbmNhdChpc01hY2hpbmUoZW50aXR5KSA/IGVudGl0eS5pZCA6ICd1bmRlZmluZWQnLCBcIlxcXCIpIG91dHNpZGUgb2YgYSBzZXJ2aWNlLiBUaGlzIHdpbGwgaGF2ZSBubyBlZmZlY3QuXCIpKTtcbiAgICB9XG5cbiAgICBpZiAoc2VydmljZSkge1xuICAgICAgcmV0dXJuIHNlcnZpY2Uuc3Bhd24oZW50aXR5LCByZXNvbHZlZE9wdGlvbnMubmFtZSwgcmVzb2x2ZWRPcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNyZWF0ZURlZmVycmVkQWN0b3IoZW50aXR5LCByZXNvbHZlZE9wdGlvbnMubmFtZSk7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IEludGVycHJldGVyIGluc3RhbmNlIGZvciB0aGUgZ2l2ZW4gbWFjaGluZSB3aXRoIHRoZSBwcm92aWRlZCBvcHRpb25zLCBpZiBhbnkuXHJcbiAqXHJcbiAqIEBwYXJhbSBtYWNoaW5lIFRoZSBtYWNoaW5lIHRvIGludGVycHJldFxyXG4gKiBAcGFyYW0gb3B0aW9ucyBJbnRlcnByZXRlciBvcHRpb25zXHJcbiAqL1xuXG5mdW5jdGlvbiBpbnRlcnByZXQobWFjaGluZSwgb3B0aW9ucykge1xuICB2YXIgaW50ZXJwcmV0ZXIgPSBuZXcgSW50ZXJwcmV0ZXIobWFjaGluZSwgb3B0aW9ucyk7XG4gIHJldHVybiBpbnRlcnByZXRlcjtcbn1cblxuZXhwb3J0IHsgSW50ZXJwcmV0ZXIsIEludGVycHJldGVyU3RhdHVzLCBpbnRlcnByZXQsIHNwYXduIH07XG4iXSwibmFtZXMiOlsiX192YWx1ZXMiLCJfX3NwcmVhZEFycmF5IiwiX19yZWFkIiwiX19hc3NpZ24iLCJTcGVjaWFsVGFyZ2V0cyIsIkFjdGlvblR5cGVzIiwiaXNTdGF0ZUNvbmZpZyIsIlN0YXRlIiwiYmluZEFjdGlvblRvU3RhdGUiLCJlcnJvclBsYXRmb3JtIiwidXBkYXRlIiwiZXJyb3IiLCJlcnJvciQxIiwibG9nIiwic3RvcCIsInN0YXJ0IiwiY2FuY2VsIiwic2VuZCIsInJhaXNlIiwiaW5pdEV2ZW50IiwiZG9uZUludm9rZSIsInRvQWN0aW9uT2JqZWN0cyIsInJlc29sdmVBY3Rpb25zIiwiZ2V0QWN0aW9uRnVuY3Rpb24iLCJJU19QUk9EVUNUSU9OIiwid2FybiIsIm1hcENvbnRleHQiLCJ0b09ic2VydmVyIiwiaXNGdW5jdGlvbiIsInRvU0NYTUxFdmVudCIsImZsYXR0ZW4iLCJpc1JhaXNhYmxlQWN0aW9uIiwiaXNQcm9taXNlTGlrZSIsImlzT2JzZXJ2YWJsZSIsImlzTWFjaGluZSIsImlzQmVoYXZpb3IiLCJyZXBvcnRVbmhhbmRsZWRFeGNlcHRpb25Pbkludm9jYXRpb24iLCJzeW1ib2xPYnNlcnZhYmxlIiwiaXNBcnJheSIsInRvRXZlbnRPYmplY3QiLCJpc1N0cmluZyIsImlzQWN0b3IiLCJ0b0ludm9rZVNvdXJjZSIsInVuaXF1ZUlkIiwiU2NoZWR1bGVyIiwiY3JlYXRlRGVmZXJyZWRBY3RvciIsImlzU3Bhd25lZEFjdG9yIiwicmVnaXN0cnkiLCJnZXRHbG9iYWwiLCJyZWdpc3RlclNlcnZpY2UiLCJwcm92aWRlIiwiY29uc3VtZSIsInNwYXduQmVoYXZpb3IiLCJERUZBVUxUX1NQQVdOX09QVElPTlMiLCJzeW5jIiwiYXV0b0ZvcndhcmQiLCJJbnRlcnByZXRlclN0YXR1cyIsIkludGVycHJldGVyIiwibWFjaGluZSIsIm9wdGlvbnMiLCJkZWZhdWx0T3B0aW9ucyIsIl90aGlzIiwiZGVsYXllZEV2ZW50c01hcCIsImxpc3RlbmVycyIsIlNldCIsImNvbnRleHRMaXN0ZW5lcnMiLCJzdG9wTGlzdGVuZXJzIiwiZG9uZUxpc3RlbmVycyIsImV2ZW50TGlzdGVuZXJzIiwic2VuZExpc3RlbmVycyIsImluaXRpYWxpemVkIiwic3RhdHVzIiwiTm90U3RhcnRlZCIsImNoaWxkcmVuIiwiTWFwIiwiZm9yd2FyZFRvIiwiX291dGdvaW5nUXVldWUiLCJpbml0IiwiZXZlbnQiLCJwYXlsb2FkIiwiYmF0Y2giLCJzdGF0ZSIsIl9ldmVudCIsIlN0b3BwZWQiLCJjb25jYXQiLCJuYW1lIiwiaWQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsIlJ1bm5pbmciLCJkZWZlckV2ZW50cyIsIkVycm9yIiwic2NoZWR1bGVyIiwic2NoZWR1bGUiLCJmb3J3YXJkIiwibmV4dFN0YXRlIiwiX25leHRTdGF0ZSIsIl9zdGF0ZSIsInNlbmRUbyIsInRvIiwiaW1tZWRpYXRlIiwiaXNQYXJlbnQiLCJwYXJlbnQiLCJQYXJlbnQiLCJ0YXJnZXQiLCJJbnRlcm5hbCIsImdldCIsInVuZGVmaW5lZCIsInR5cGUiLCJkb25lIiwic2N4bWxFdmVudCIsIm9yaWdpbiIsInNlc3Npb25JZCIsImNvbmZpZyIsInByZWRpY3RhYmxlQWN0aW9uQXJndW1lbnRzIiwicHVzaCIsIl9leGVjIiwiYWN0aW9uIiwiY29udGV4dCIsImFjdGlvbkZ1bmN0aW9uTWFwIiwiYWN0aW9ucyIsImFjdGlvbk9yRXhlYyIsImV4ZWMiLCJlcnIiLCJzZW5kQWN0aW9uXzEiLCJkZWZlciIsInNlbmRBY3Rpb24iLCJkZWxheSIsInNlbmRJZCIsImFjdGl2aXR5IiwiYWN0aXZpdGllcyIsIkludm9rZSIsImludm9rZVNvdXJjZSIsInNyYyIsInNlcnZpY2VDcmVhdG9yIiwic2VydmljZXMiLCJyZXNvbHZlZERhdGEiLCJzb3VyY2UiLCJtZXRhIiwid2l0aENvbnRleHQiLCJzcGF3biIsInNwYXduQWN0aXZpdHkiLCJzdG9wQ2hpbGQiLCJfYSIsImxhYmVsIiwidmFsdWUiLCJsb2dnZXIiLCJyZXNvbHZlZE9wdGlvbnMiLCJjbG9jayIsInJlc29sdmVkSWQiLCJib29rSWQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInByb3RvdHlwZSIsIl9pbml0aWFsU3RhdGUiLCJpbml0aWFsU3RhdGUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiZXhlY3V0ZSIsImFjdGlvbnNDb25maWciLCJlXzEiLCJfYiIsIl9jIiwibmV4dCIsImVfMV8xIiwicmV0dXJuIiwiY2FsbCIsImVfMiIsImVfMyIsImVfNCIsImVfNSIsIl9kIiwiX3Nlc3Npb25pZCIsIml0ZW0iLCJzaGlmdCIsImZvckVhY2giLCJjaGlsZCIsImRldlRvb2xzIiwiX2UiLCJfZiIsImxpc3RlbmVyIiwiZV8yXzEiLCJfZyIsIl9oIiwiZV8zXzEiLCJfaiIsIl9rIiwiY29udGV4dExpc3RlbmVyIiwiaGlzdG9yeSIsImVfNF8xIiwiZmluYWxDaGlsZFN0YXRlTm9kZSIsImNvbmZpZ3VyYXRpb24iLCJmaW5kIiwic24iLCJkb25lRGF0YSIsIl9kb25lRXZlbnQiLCJfbCIsIl9tIiwiZV81XzEiLCJfc3RvcCIsIl9zdG9wQ2hpbGRyZW4iLCJmcmVlIiwib25UcmFuc2l0aW9uIiwiYWRkIiwic3Vic2NyaWJlIiwibmV4dExpc3RlbmVyT3JPYnNlcnZlciIsIl8iLCJjb21wbGV0ZUxpc3RlbmVyIiwib2JzZXJ2ZXIiLCJjb21wbGV0ZU9uY2UiLCJkZWxldGUiLCJjb21wbGV0ZSIsIm9uRG9uZSIsIm9uU3RvcCIsInVuc3Vic2NyaWJlIiwib25FdmVudCIsIm9uU2VuZCIsIm9uQ2hhbmdlIiwib2ZmIiwiX2luaXQiLCJyZWdpc3RlciIsInJlc29sdmVkU3RhdGUiLCJyZXNvbHZlU3RhdGUiLCJmcm9tIiwiYXR0YWNoRGV2IiwiaW5pdGlhbGl6ZSIsImNsZWFyIiwiZV82IiwiZV83IiwiZV84IiwiZV85IiwiZV8xMCIsImVfNl8xIiwiZV83XzEiLCJlXzhfMSIsIl9vIiwiZV85XzEiLCJfcCIsImtleXMiLCJfcSIsImtleSIsImNsZWFyVGltZW91dCIsImVfMTBfMSIsImV4aXRBY3Rpb25zIiwic29ydCIsImEiLCJiIiwib3JkZXIiLCJtYXAiLCJzdGF0ZU5vZGUiLCJvbkV4aXQiLCJwcmVzZXJ2ZUFjdGlvbk9yZGVyIiwicmVzb2x2ZWRBY3Rpb25zIiwidXBkYXRlZENvbnRleHQiLCJuZXdTdGF0ZSIsImhpc3RvcnlWYWx1ZSIsImZpbHRlciIsImV2ZW50cyIsInRyYW5zaXRpb25zIiwidGFncyIsImNoYW5nZWQiLCJsZW5ndGgiLCJlXzExIiwiYmF0Y2hDaGFuZ2VkIiwiYmF0Y2hlZEFjdGlvbnMiLCJfbG9vcF8xIiwiZXZlbnRfMSIsInRyYW5zaXRpb24iLCJhcHBseSIsImV2ZW50c18xIiwiZXZlbnRzXzFfMSIsImVfMTFfMSIsInNlbmRlciIsImJpbmQiLCJpbmRleE9mIiwibmV4dEV2ZW50cyIsInNvbWUiLCJuZXh0RXZlbnQiLCJlXzEyIiwiZV8xMl8xIiwidGltZXJJZCIsInNldFRpbWVvdXQiLCJyZW1vdmVDaGlsZCIsImNoaWxkSWQiLCJlbnRpdHkiLCJzcGF3blByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNwYXduQ2FsbGJhY2siLCJzcGF3bkFjdG9yIiwic3Bhd25PYnNlcnZhYmxlIiwic3Bhd25NYWNoaW5lIiwiY2hpbGRTZXJ2aWNlIiwiYWN0b3IiLCJzZXQiLCJkb25lRXZlbnQiLCJiZWhhdmlvciIsImFjdG9yUmVmIiwicHJvbWlzZSIsImNhbmNlbGVkIiwidGhlbiIsInJlc3BvbnNlIiwiZXJyb3JEYXRhIiwiZXJyb3JFdmVudCIsInN0cmljdCIsImhhbmRsZUVycm9yIiwidW5zdWJzY3JpYmVkIiwidG9KU09OIiwiZ2V0U25hcHNob3QiLCJjYWxsYmFjayIsInJlY2VpdmVycyIsImVtaXR0ZWQiLCJyZWNlaXZlIiwiZSIsImNhbGxiYWNrU3RvcCIsIm5ld0xpc3RlbmVyIiwicmVjZWl2ZXIiLCJzdWJzY3JpcHRpb24iLCJpbXBsZW1lbnRhdGlvbiIsImRpc3Bvc2UiLCJzcGF3bkVmZmVjdCIsImdsb2JhbCIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18iLCJkZXZUb29sc09wdGlvbnMiLCJjb25uZWN0IiwiYXV0b1BhdXNlIiwic3RhdGVTYW5pdGl6ZXIiLCJmZWF0dXJlcyIsImp1bXAiLCJza2lwIiwiZm4iLCJtcyIsImNvbnNvbGUiLCJpbnRlcnByZXQiLCJyZXNvbHZlU3Bhd25PcHRpb25zIiwibmFtZU9yT3B0aW9ucyIsInNlcnZpY2UiLCJpc0xhenlFbnRpdHkiLCJpbnRlcnByZXRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/interpreter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/invokeUtils.js":
/*!***********************************************!*\
  !*** ./node_modules/xstate/es/invokeUtils.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toInvokeDefinition: () => (/* binding */ toInvokeDefinition),\n/* harmony export */   toInvokeSource: () => (/* binding */ toInvokeSource)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./actionTypes.js */ \"(ssr)/./node_modules/xstate/es/actionTypes.js\");\n\n\n\n\n\nfunction toInvokeSource(src) {\n    if (typeof src === \"string\") {\n        var simpleSrc = {\n            type: src\n        };\n        simpleSrc.toString = function() {\n            return src;\n        }; // v4 compat - TODO: remove in v5\n        return simpleSrc;\n    }\n    return src;\n}\nfunction toInvokeDefinition(invokeConfig) {\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({\n        type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_1__.invoke\n    }, invokeConfig), {\n        toJSON: function() {\n            invokeConfig.onDone;\n            invokeConfig.onError;\n            var invokeDef = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__rest)(invokeConfig, [\n                \"onDone\",\n                \"onError\"\n            ]);\n            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, invokeDef), {\n                type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_1__.invoke,\n                src: toInvokeSource(invokeConfig.src)\n            });\n        }\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2ludm9rZVV0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBd0Q7QUFDcEM7QUFDc0I7QUFDdEI7QUFDTTtBQUUxQixTQUFTRyxlQUFlQyxHQUFHO0lBQ3pCLElBQUksT0FBT0EsUUFBUSxVQUFVO1FBQzNCLElBQUlDLFlBQVk7WUFDZEMsTUFBTUY7UUFDUjtRQUVBQyxVQUFVRSxRQUFRLEdBQUc7WUFDbkIsT0FBT0g7UUFDVCxHQUFHLGlDQUFpQztRQUdwQyxPQUFPQztJQUNUO0lBRUEsT0FBT0Q7QUFDVDtBQUNBLFNBQVNJLG1CQUFtQkMsWUFBWTtJQUN0QyxPQUFPVCwyREFBUUEsQ0FBQ0EsMkRBQVFBLENBQUM7UUFDdkJNLE1BQU1KLG1EQUFNQTtJQUNkLEdBQUdPLGVBQWU7UUFDaEJDLFFBQVE7WUFDTkQsYUFBYUUsTUFBTTtZQUNmRixhQUFhRyxPQUFPO1lBQ3BCLElBQUlDLFlBQVlaLHlEQUFNQSxDQUFDUSxjQUFjO2dCQUFDO2dCQUFVO2FBQVU7WUFFOUQsT0FBT1QsMkRBQVFBLENBQUNBLDJEQUFRQSxDQUFDLENBQUMsR0FBR2EsWUFBWTtnQkFDdkNQLE1BQU1KLG1EQUFNQTtnQkFDWkUsS0FBS0QsZUFBZU0sYUFBYUwsR0FBRztZQUN0QztRQUNGO0lBQ0Y7QUFDRjtBQUU4QyIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0bmV4dC8uL25vZGVfbW9kdWxlcy94c3RhdGUvZXMvaW52b2tlVXRpbHMuanM/Zjg3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2Fzc2lnbiwgX19yZXN0IH0gZnJvbSAnLi9fdmlydHVhbC9fdHNsaWIuanMnO1xuaW1wb3J0ICcuL3R5cGVzLmpzJztcbmltcG9ydCB7IGludm9rZSB9IGZyb20gJy4vYWN0aW9uVHlwZXMuanMnO1xuaW1wb3J0ICcuL3V0aWxzLmpzJztcbmltcG9ydCAnLi9lbnZpcm9ubWVudC5qcyc7XG5cbmZ1bmN0aW9uIHRvSW52b2tlU291cmNlKHNyYykge1xuICBpZiAodHlwZW9mIHNyYyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgc2ltcGxlU3JjID0ge1xuICAgICAgdHlwZTogc3JjXG4gICAgfTtcblxuICAgIHNpbXBsZVNyYy50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzcmM7XG4gICAgfTsgLy8gdjQgY29tcGF0IC0gVE9ETzogcmVtb3ZlIGluIHY1XG5cblxuICAgIHJldHVybiBzaW1wbGVTcmM7XG4gIH1cblxuICByZXR1cm4gc3JjO1xufVxuZnVuY3Rpb24gdG9JbnZva2VEZWZpbml0aW9uKGludm9rZUNvbmZpZykge1xuICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe1xuICAgIHR5cGU6IGludm9rZVxuICB9LCBpbnZva2VDb25maWcpLCB7XG4gICAgdG9KU09OOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpbnZva2VDb25maWcub25Eb25lO1xuICAgICAgICAgIGludm9rZUNvbmZpZy5vbkVycm9yO1xuICAgICAgICAgIHZhciBpbnZva2VEZWYgPSBfX3Jlc3QoaW52b2tlQ29uZmlnLCBbXCJvbkRvbmVcIiwgXCJvbkVycm9yXCJdKTtcblxuICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBpbnZva2VEZWYpLCB7XG4gICAgICAgIHR5cGU6IGludm9rZSxcbiAgICAgICAgc3JjOiB0b0ludm9rZVNvdXJjZShpbnZva2VDb25maWcuc3JjKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IHsgdG9JbnZva2VEZWZpbml0aW9uLCB0b0ludm9rZVNvdXJjZSB9O1xuIl0sIm5hbWVzIjpbIl9fYXNzaWduIiwiX19yZXN0IiwiaW52b2tlIiwidG9JbnZva2VTb3VyY2UiLCJzcmMiLCJzaW1wbGVTcmMiLCJ0eXBlIiwidG9TdHJpbmciLCJ0b0ludm9rZURlZmluaXRpb24iLCJpbnZva2VDb25maWciLCJ0b0pTT04iLCJvbkRvbmUiLCJvbkVycm9yIiwiaW52b2tlRGVmIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/invokeUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/mapState.js":
/*!********************************************!*\
  !*** ./node_modules/xstate/es/mapState.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mapState: () => (/* binding */ mapState)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n\n\nfunction mapState(stateMap, stateId) {\n    var e_1, _a;\n    var foundStateId;\n    try {\n        for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__values)(Object.keys(stateMap)), _c = _b.next(); !_c.done; _c = _b.next()){\n            var mappedStateId = _c.value;\n            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.matchesState)(mappedStateId, stateId) && (!foundStateId || stateId.length > foundStateId.length)) {\n                foundStateId = mappedStateId;\n            }\n        }\n    } catch (e_1_1) {\n        e_1 = {\n            error: e_1_1\n        };\n    } finally{\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally{\n            if (e_1) throw e_1.error;\n        }\n    }\n    return stateMap[foundStateId];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL21hcFN0YXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnRDtBQUNOO0FBRTFDLFNBQVNFLFNBQVNDLFFBQVEsRUFBRUMsT0FBTztJQUNqQyxJQUFJQyxLQUFLQztJQUVULElBQUlDO0lBRUosSUFBSTtRQUNGLElBQUssSUFBSUMsS0FBS1IsMkRBQVFBLENBQUNTLE9BQU9DLElBQUksQ0FBQ1AsWUFBWVEsS0FBS0gsR0FBR0ksSUFBSSxJQUFJLENBQUNELEdBQUdFLElBQUksRUFBRUYsS0FBS0gsR0FBR0ksSUFBSSxHQUFJO1lBQ3ZGLElBQUlFLGdCQUFnQkgsR0FBR0ksS0FBSztZQUU1QixJQUFJZCx1REFBWUEsQ0FBQ2EsZUFBZVYsWUFBYSxFQUFDRyxnQkFBZ0JILFFBQVFZLE1BQU0sR0FBR1QsYUFBYVMsTUFBTSxHQUFHO2dCQUNuR1QsZUFBZU87WUFDakI7UUFDRjtJQUNGLEVBQUUsT0FBT0csT0FBTztRQUNkWixNQUFNO1lBQ0phLE9BQU9EO1FBQ1Q7SUFDRixTQUFVO1FBQ1IsSUFBSTtZQUNGLElBQUlOLE1BQU0sQ0FBQ0EsR0FBR0UsSUFBSSxJQUFLUCxDQUFBQSxLQUFLRSxHQUFHVyxNQUFNLEdBQUdiLEdBQUdjLElBQUksQ0FBQ1o7UUFDbEQsU0FBVTtZQUNSLElBQUlILEtBQUssTUFBTUEsSUFBSWEsS0FBSztRQUMxQjtJQUNGO0lBRUEsT0FBT2YsUUFBUSxDQUFDSSxhQUFhO0FBQy9CO0FBRW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnRuZXh0Ly4vbm9kZV9tb2R1bGVzL3hzdGF0ZS9lcy9tYXBTdGF0ZS5qcz9iOWU3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fdmFsdWVzIH0gZnJvbSAnLi9fdmlydHVhbC9fdHNsaWIuanMnO1xuaW1wb3J0IHsgbWF0Y2hlc1N0YXRlIH0gZnJvbSAnLi91dGlscy5qcyc7XG5cbmZ1bmN0aW9uIG1hcFN0YXRlKHN0YXRlTWFwLCBzdGF0ZUlkKSB7XG4gIHZhciBlXzEsIF9hO1xuXG4gIHZhciBmb3VuZFN0YXRlSWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKE9iamVjdC5rZXlzKHN0YXRlTWFwKSksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcbiAgICAgIHZhciBtYXBwZWRTdGF0ZUlkID0gX2MudmFsdWU7XG5cbiAgICAgIGlmIChtYXRjaGVzU3RhdGUobWFwcGVkU3RhdGVJZCwgc3RhdGVJZCkgJiYgKCFmb3VuZFN0YXRlSWQgfHwgc3RhdGVJZC5sZW5ndGggPiBmb3VuZFN0YXRlSWQubGVuZ3RoKSkge1xuICAgICAgICBmb3VuZFN0YXRlSWQgPSBtYXBwZWRTdGF0ZUlkO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZV8xXzEpIHtcbiAgICBlXzEgPSB7XG4gICAgICBlcnJvcjogZV8xXzFcbiAgICB9O1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RhdGVNYXBbZm91bmRTdGF0ZUlkXTtcbn1cblxuZXhwb3J0IHsgbWFwU3RhdGUgfTtcbiJdLCJuYW1lcyI6WyJfX3ZhbHVlcyIsIm1hdGNoZXNTdGF0ZSIsIm1hcFN0YXRlIiwic3RhdGVNYXAiLCJzdGF0ZUlkIiwiZV8xIiwiX2EiLCJmb3VuZFN0YXRlSWQiLCJfYiIsIk9iamVjdCIsImtleXMiLCJfYyIsIm5leHQiLCJkb25lIiwibWFwcGVkU3RhdGVJZCIsInZhbHVlIiwibGVuZ3RoIiwiZV8xXzEiLCJlcnJvciIsInJldHVybiIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/mapState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/match.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/match.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   matchState: () => (/* binding */ matchState)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _State_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./State.js */ \"(ssr)/./node_modules/xstate/es/State.js\");\n\n\nfunction matchState(state, patterns, defaultValue) {\n    var e_1, _a;\n    var resolvedState = _State_js__WEBPACK_IMPORTED_MODULE_0__.State.from(state, state instanceof _State_js__WEBPACK_IMPORTED_MODULE_0__.State ? state.context : undefined);\n    try {\n        for(var patterns_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(patterns), patterns_1_1 = patterns_1.next(); !patterns_1_1.done; patterns_1_1 = patterns_1.next()){\n            var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(patterns_1_1.value, 2), stateValue = _b[0], getValue = _b[1];\n            if (resolvedState.matches(stateValue)) {\n                return getValue(resolvedState);\n            }\n        }\n    } catch (e_1_1) {\n        e_1 = {\n            error: e_1_1\n        };\n    } finally{\n        try {\n            if (patterns_1_1 && !patterns_1_1.done && (_a = patterns_1.return)) _a.call(patterns_1);\n        } finally{\n            if (e_1) throw e_1.error;\n        }\n    }\n    return defaultValue(resolvedState);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL21hdGNoLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF3RDtBQUNyQjtBQUVuQyxTQUFTRyxXQUFXQyxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsWUFBWTtJQUMvQyxJQUFJQyxLQUFLQztJQUVULElBQUlDLGdCQUFnQlAsNENBQUtBLENBQUNRLElBQUksQ0FBQ04sT0FBT0EsaUJBQWlCRiw0Q0FBS0EsR0FBR0UsTUFBTU8sT0FBTyxHQUFHQztJQUUvRSxJQUFJO1FBQ0YsSUFBSyxJQUFJQyxhQUFhYiwyREFBUUEsQ0FBQ0ssV0FBV1MsZUFBZUQsV0FBV0UsSUFBSSxJQUFJLENBQUNELGFBQWFFLElBQUksRUFBRUYsZUFBZUQsV0FBV0UsSUFBSSxHQUFJO1lBQ2hJLElBQUlFLEtBQUtoQix5REFBTUEsQ0FBQ2EsYUFBYUksS0FBSyxFQUFFLElBQ2hDQyxhQUFhRixFQUFFLENBQUMsRUFBRSxFQUNsQkcsV0FBV0gsRUFBRSxDQUFDLEVBQUU7WUFFcEIsSUFBSVIsY0FBY1ksT0FBTyxDQUFDRixhQUFhO2dCQUNyQyxPQUFPQyxTQUFTWDtZQUNsQjtRQUNGO0lBQ0YsRUFBRSxPQUFPYSxPQUFPO1FBQ2RmLE1BQU07WUFDSmdCLE9BQU9EO1FBQ1Q7SUFDRixTQUFVO1FBQ1IsSUFBSTtZQUNGLElBQUlSLGdCQUFnQixDQUFDQSxhQUFhRSxJQUFJLElBQUtSLENBQUFBLEtBQUtLLFdBQVdXLE1BQU0sR0FBR2hCLEdBQUdpQixJQUFJLENBQUNaO1FBQzlFLFNBQVU7WUFDUixJQUFJTixLQUFLLE1BQU1BLElBQUlnQixLQUFLO1FBQzFCO0lBQ0Y7SUFFQSxPQUFPakIsYUFBYUc7QUFDdEI7QUFFc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydG5leHQvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL21hdGNoLmpzPzRlMTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX192YWx1ZXMsIF9fcmVhZCB9IGZyb20gJy4vX3ZpcnR1YWwvX3RzbGliLmpzJztcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSAnLi9TdGF0ZS5qcyc7XG5cbmZ1bmN0aW9uIG1hdGNoU3RhdGUoc3RhdGUsIHBhdHRlcm5zLCBkZWZhdWx0VmFsdWUpIHtcbiAgdmFyIGVfMSwgX2E7XG5cbiAgdmFyIHJlc29sdmVkU3RhdGUgPSBTdGF0ZS5mcm9tKHN0YXRlLCBzdGF0ZSBpbnN0YW5jZW9mIFN0YXRlID8gc3RhdGUuY29udGV4dCA6IHVuZGVmaW5lZCk7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBwYXR0ZXJuc18xID0gX192YWx1ZXMocGF0dGVybnMpLCBwYXR0ZXJuc18xXzEgPSBwYXR0ZXJuc18xLm5leHQoKTsgIXBhdHRlcm5zXzFfMS5kb25lOyBwYXR0ZXJuc18xXzEgPSBwYXR0ZXJuc18xLm5leHQoKSkge1xuICAgICAgdmFyIF9iID0gX19yZWFkKHBhdHRlcm5zXzFfMS52YWx1ZSwgMiksXG4gICAgICAgICAgc3RhdGVWYWx1ZSA9IF9iWzBdLFxuICAgICAgICAgIGdldFZhbHVlID0gX2JbMV07XG5cbiAgICAgIGlmIChyZXNvbHZlZFN0YXRlLm1hdGNoZXMoc3RhdGVWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGdldFZhbHVlKHJlc29sdmVkU3RhdGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZV8xXzEpIHtcbiAgICBlXzEgPSB7XG4gICAgICBlcnJvcjogZV8xXzFcbiAgICB9O1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAocGF0dGVybnNfMV8xICYmICFwYXR0ZXJuc18xXzEuZG9uZSAmJiAoX2EgPSBwYXR0ZXJuc18xLnJldHVybikpIF9hLmNhbGwocGF0dGVybnNfMSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGVmYXVsdFZhbHVlKHJlc29sdmVkU3RhdGUpO1xufVxuXG5leHBvcnQgeyBtYXRjaFN0YXRlIH07XG4iXSwibmFtZXMiOlsiX192YWx1ZXMiLCJfX3JlYWQiLCJTdGF0ZSIsIm1hdGNoU3RhdGUiLCJzdGF0ZSIsInBhdHRlcm5zIiwiZGVmYXVsdFZhbHVlIiwiZV8xIiwiX2EiLCJyZXNvbHZlZFN0YXRlIiwiZnJvbSIsImNvbnRleHQiLCJ1bmRlZmluZWQiLCJwYXR0ZXJuc18xIiwicGF0dGVybnNfMV8xIiwibmV4dCIsImRvbmUiLCJfYiIsInZhbHVlIiwic3RhdGVWYWx1ZSIsImdldFZhbHVlIiwibWF0Y2hlcyIsImVfMV8xIiwiZXJyb3IiLCJyZXR1cm4iLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/match.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/registry.js":
/*!********************************************!*\
  !*** ./node_modules/xstate/es/registry.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   registry: () => (/* binding */ registry)\n/* harmony export */ });\nvar children = /*#__PURE__*/ new Map();\nvar sessionIdIndex = 0;\nvar registry = {\n    bookId: function() {\n        return \"x:\".concat(sessionIdIndex++);\n    },\n    register: function(id, actor) {\n        children.set(id, actor);\n        return id;\n    },\n    get: function(id) {\n        return children.get(id);\n    },\n    free: function(id) {\n        children.delete(id);\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL3JlZ2lzdHJ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFJQSxXQUFXLFdBQVcsR0FBRSxJQUFJQztBQUNoQyxJQUFJQyxpQkFBaUI7QUFDckIsSUFBSUMsV0FBVztJQUNiQyxRQUFRO1FBQ04sT0FBTyxLQUFLQyxNQUFNLENBQUNIO0lBQ3JCO0lBQ0FJLFVBQVUsU0FBVUMsRUFBRSxFQUFFQyxLQUFLO1FBQzNCUixTQUFTUyxHQUFHLENBQUNGLElBQUlDO1FBQ2pCLE9BQU9EO0lBQ1Q7SUFDQUcsS0FBSyxTQUFVSCxFQUFFO1FBQ2YsT0FBT1AsU0FBU1UsR0FBRyxDQUFDSDtJQUN0QjtJQUNBSSxNQUFNLFNBQVVKLEVBQUU7UUFDaEJQLFNBQVNZLE1BQU0sQ0FBQ0w7SUFDbEI7QUFDRjtBQUVvQiIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0bmV4dC8uL25vZGVfbW9kdWxlcy94c3RhdGUvZXMvcmVnaXN0cnkuanM/NzA5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY2hpbGRyZW4gPSAvKiNfX1BVUkVfXyovbmV3IE1hcCgpO1xudmFyIHNlc3Npb25JZEluZGV4ID0gMDtcbnZhciByZWdpc3RyeSA9IHtcbiAgYm9va0lkOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwieDpcIi5jb25jYXQoc2Vzc2lvbklkSW5kZXgrKyk7XG4gIH0sXG4gIHJlZ2lzdGVyOiBmdW5jdGlvbiAoaWQsIGFjdG9yKSB7XG4gICAgY2hpbGRyZW4uc2V0KGlkLCBhY3Rvcik7XG4gICAgcmV0dXJuIGlkO1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIHJldHVybiBjaGlsZHJlbi5nZXQoaWQpO1xuICB9LFxuICBmcmVlOiBmdW5jdGlvbiAoaWQpIHtcbiAgICBjaGlsZHJlbi5kZWxldGUoaWQpO1xuICB9XG59O1xuXG5leHBvcnQgeyByZWdpc3RyeSB9O1xuIl0sIm5hbWVzIjpbImNoaWxkcmVuIiwiTWFwIiwic2Vzc2lvbklkSW5kZXgiLCJyZWdpc3RyeSIsImJvb2tJZCIsImNvbmNhdCIsInJlZ2lzdGVyIiwiaWQiLCJhY3RvciIsInNldCIsImdldCIsImZyZWUiLCJkZWxldGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/registry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/scheduler.js":
/*!*********************************************!*\
  !*** ./node_modules/xstate/es/scheduler.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Scheduler: () => (/* binding */ Scheduler)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n\nvar defaultOptions = {\n    deferEvents: false\n};\nvar Scheduler = /*#__PURE__*/ /** @class */ function() {\n    function Scheduler(options) {\n        this.processingEvent = false;\n        this.queue = [];\n        this.initialized = false;\n        this.options = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, defaultOptions), options);\n    }\n    Scheduler.prototype.initialize = function(callback) {\n        this.initialized = true;\n        if (callback) {\n            if (!this.options.deferEvents) {\n                this.schedule(callback);\n                return;\n            }\n            this.process(callback);\n        }\n        this.flushEvents();\n    };\n    Scheduler.prototype.schedule = function(task) {\n        if (!this.initialized || this.processingEvent) {\n            this.queue.push(task);\n            return;\n        }\n        if (this.queue.length !== 0) {\n            throw new Error(\"Event queue should be empty when it is not processing events\");\n        }\n        this.process(task);\n        this.flushEvents();\n    };\n    Scheduler.prototype.clear = function() {\n        this.queue = [];\n    };\n    Scheduler.prototype.flushEvents = function() {\n        var nextCallback = this.queue.shift();\n        while(nextCallback){\n            this.process(nextCallback);\n            nextCallback = this.queue.shift();\n        }\n    };\n    Scheduler.prototype.process = function(callback) {\n        this.processingEvent = true;\n        try {\n            callback();\n        } catch (e) {\n            // there is no use to keep the future events\n            // as the situation is not anymore the same\n            this.clear();\n            throw e;\n        } finally{\n            this.processingEvent = false;\n        }\n    };\n    return Scheduler;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL3NjaGVkdWxlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFnRDtBQUVoRCxJQUFJQyxpQkFBaUI7SUFDbkJDLGFBQWE7QUFDZjtBQUVBLElBQUlDLFlBQ0osV0FBVyxHQUVYLFdBQVcsR0FDWDtJQUNFLFNBQVNBLFVBQVVDLE9BQU87UUFDeEIsSUFBSSxDQUFDQyxlQUFlLEdBQUc7UUFDdkIsSUFBSSxDQUFDQyxLQUFLLEdBQUcsRUFBRTtRQUNmLElBQUksQ0FBQ0MsV0FBVyxHQUFHO1FBQ25CLElBQUksQ0FBQ0gsT0FBTyxHQUFHSiwyREFBUUEsQ0FBQ0EsMkRBQVFBLENBQUMsQ0FBQyxHQUFHQyxpQkFBaUJHO0lBQ3hEO0lBRUFELFVBQVVLLFNBQVMsQ0FBQ0MsVUFBVSxHQUFHLFNBQVVDLFFBQVE7UUFDakQsSUFBSSxDQUFDSCxXQUFXLEdBQUc7UUFFbkIsSUFBSUcsVUFBVTtZQUNaLElBQUksQ0FBQyxJQUFJLENBQUNOLE9BQU8sQ0FBQ0YsV0FBVyxFQUFFO2dCQUM3QixJQUFJLENBQUNTLFFBQVEsQ0FBQ0Q7Z0JBQ2Q7WUFDRjtZQUVBLElBQUksQ0FBQ0UsT0FBTyxDQUFDRjtRQUNmO1FBRUEsSUFBSSxDQUFDRyxXQUFXO0lBQ2xCO0lBRUFWLFVBQVVLLFNBQVMsQ0FBQ0csUUFBUSxHQUFHLFNBQVVHLElBQUk7UUFDM0MsSUFBSSxDQUFDLElBQUksQ0FBQ1AsV0FBVyxJQUFJLElBQUksQ0FBQ0YsZUFBZSxFQUFFO1lBQzdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDUyxJQUFJLENBQUNEO1lBQ2hCO1FBQ0Y7UUFFQSxJQUFJLElBQUksQ0FBQ1IsS0FBSyxDQUFDVSxNQUFNLEtBQUssR0FBRztZQUMzQixNQUFNLElBQUlDLE1BQU07UUFDbEI7UUFFQSxJQUFJLENBQUNMLE9BQU8sQ0FBQ0U7UUFDYixJQUFJLENBQUNELFdBQVc7SUFDbEI7SUFFQVYsVUFBVUssU0FBUyxDQUFDVSxLQUFLLEdBQUc7UUFDMUIsSUFBSSxDQUFDWixLQUFLLEdBQUcsRUFBRTtJQUNqQjtJQUVBSCxVQUFVSyxTQUFTLENBQUNLLFdBQVcsR0FBRztRQUNoQyxJQUFJTSxlQUFlLElBQUksQ0FBQ2IsS0FBSyxDQUFDYyxLQUFLO1FBRW5DLE1BQU9ELGFBQWM7WUFDbkIsSUFBSSxDQUFDUCxPQUFPLENBQUNPO1lBQ2JBLGVBQWUsSUFBSSxDQUFDYixLQUFLLENBQUNjLEtBQUs7UUFDakM7SUFDRjtJQUVBakIsVUFBVUssU0FBUyxDQUFDSSxPQUFPLEdBQUcsU0FBVUYsUUFBUTtRQUM5QyxJQUFJLENBQUNMLGVBQWUsR0FBRztRQUV2QixJQUFJO1lBQ0ZLO1FBQ0YsRUFBRSxPQUFPVyxHQUFHO1lBQ1YsNENBQTRDO1lBQzVDLDJDQUEyQztZQUMzQyxJQUFJLENBQUNILEtBQUs7WUFDVixNQUFNRztRQUNSLFNBQVU7WUFDUixJQUFJLENBQUNoQixlQUFlLEdBQUc7UUFDekI7SUFDRjtJQUVBLE9BQU9GO0FBQ1Q7QUFFcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydG5leHQvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL3NjaGVkdWxlci5qcz8xZmUxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSAnLi9fdmlydHVhbC9fdHNsaWIuanMnO1xuXG52YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIGRlZmVyRXZlbnRzOiBmYWxzZVxufTtcblxudmFyIFNjaGVkdWxlciA9XG4vKiNfX1BVUkVfXyovXG5cbi8qKiBAY2xhc3MgKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2NoZWR1bGVyKG9wdGlvbnMpIHtcbiAgICB0aGlzLnByb2Nlc3NpbmdFdmVudCA9IGZhbHNlO1xuICAgIHRoaXMucXVldWUgPSBbXTtcbiAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy5vcHRpb25zID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zKSwgb3B0aW9ucyk7XG4gIH1cblxuICBTY2hlZHVsZXIucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcblxuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZGVmZXJFdmVudHMpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZShjYWxsYmFjayk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wcm9jZXNzKGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICB0aGlzLmZsdXNoRXZlbnRzKCk7XG4gIH07XG5cbiAgU2NoZWR1bGVyLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uICh0YXNrKSB7XG4gICAgaWYgKCF0aGlzLmluaXRpYWxpemVkIHx8IHRoaXMucHJvY2Vzc2luZ0V2ZW50KSB7XG4gICAgICB0aGlzLnF1ZXVlLnB1c2godGFzayk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucXVldWUubGVuZ3RoICE9PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V2ZW50IHF1ZXVlIHNob3VsZCBiZSBlbXB0eSB3aGVuIGl0IGlzIG5vdCBwcm9jZXNzaW5nIGV2ZW50cycpO1xuICAgIH1cblxuICAgIHRoaXMucHJvY2Vzcyh0YXNrKTtcbiAgICB0aGlzLmZsdXNoRXZlbnRzKCk7XG4gIH07XG5cbiAgU2NoZWR1bGVyLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnF1ZXVlID0gW107XG4gIH07XG5cbiAgU2NoZWR1bGVyLnByb3RvdHlwZS5mbHVzaEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbmV4dENhbGxiYWNrID0gdGhpcy5xdWV1ZS5zaGlmdCgpO1xuXG4gICAgd2hpbGUgKG5leHRDYWxsYmFjaykge1xuICAgICAgdGhpcy5wcm9jZXNzKG5leHRDYWxsYmFjayk7XG4gICAgICBuZXh0Q2FsbGJhY2sgPSB0aGlzLnF1ZXVlLnNoaWZ0KCk7XG4gICAgfVxuICB9O1xuXG4gIFNjaGVkdWxlci5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHRoaXMucHJvY2Vzc2luZ0V2ZW50ID0gdHJ1ZTtcblxuICAgIHRyeSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIHRoZXJlIGlzIG5vIHVzZSB0byBrZWVwIHRoZSBmdXR1cmUgZXZlbnRzXG4gICAgICAvLyBhcyB0aGUgc2l0dWF0aW9uIGlzIG5vdCBhbnltb3JlIHRoZSBzYW1lXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB0aHJvdyBlO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLnByb2Nlc3NpbmdFdmVudCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU2NoZWR1bGVyO1xufSgpO1xuXG5leHBvcnQgeyBTY2hlZHVsZXIgfTtcbiJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsImRlZmF1bHRPcHRpb25zIiwiZGVmZXJFdmVudHMiLCJTY2hlZHVsZXIiLCJvcHRpb25zIiwicHJvY2Vzc2luZ0V2ZW50IiwicXVldWUiLCJpbml0aWFsaXplZCIsInByb3RvdHlwZSIsImluaXRpYWxpemUiLCJjYWxsYmFjayIsInNjaGVkdWxlIiwicHJvY2VzcyIsImZsdXNoRXZlbnRzIiwidGFzayIsInB1c2giLCJsZW5ndGgiLCJFcnJvciIsImNsZWFyIiwibmV4dENhbGxiYWNrIiwic2hpZnQiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/scheduler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/schema.js":
/*!******************************************!*\
  !*** ./node_modules/xstate/es/schema.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSchema: () => (/* binding */ createSchema),\n/* harmony export */   t: () => (/* binding */ t)\n/* harmony export */ });\nfunction createSchema(schema) {\n    return schema;\n}\nvar t = createSchema;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL3NjaGVtYS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLFNBQVNBLGFBQWFDLE1BQU07SUFDMUIsT0FBT0E7QUFDVDtBQUNBLElBQUlDLElBQUlGO0FBRW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnRuZXh0Ly4vbm9kZV9tb2R1bGVzL3hzdGF0ZS9lcy9zY2hlbWEuanM/NGNkOCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBjcmVhdGVTY2hlbWEoc2NoZW1hKSB7XG4gIHJldHVybiBzY2hlbWE7XG59XG52YXIgdCA9IGNyZWF0ZVNjaGVtYTtcblxuZXhwb3J0IHsgY3JlYXRlU2NoZW1hLCB0IH07XG4iXSwibmFtZXMiOlsiY3JlYXRlU2NoZW1hIiwic2NoZW1hIiwidCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/schema.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/serviceScope.js":
/*!************************************************!*\
  !*** ./node_modules/xstate/es/serviceScope.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   consume: () => (/* binding */ consume),\n/* harmony export */   provide: () => (/* binding */ provide)\n/* harmony export */ });\n/**\r\n * Maintains a stack of the current service in scope.\r\n * This is used to provide the correct service to spawn().\r\n */ var serviceStack = [];\nvar provide = function(service, fn) {\n    serviceStack.push(service);\n    var result = fn(service);\n    serviceStack.pop();\n    return result;\n};\nvar consume = function(fn) {\n    return fn(serviceStack[serviceStack.length - 1]);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL3NlcnZpY2VTY29wZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Q0FHQyxHQUNELElBQUlBLGVBQWUsRUFBRTtBQUNyQixJQUFJQyxVQUFVLFNBQVVDLE9BQU8sRUFBRUMsRUFBRTtJQUNqQ0gsYUFBYUksSUFBSSxDQUFDRjtJQUNsQixJQUFJRyxTQUFTRixHQUFHRDtJQUNoQkYsYUFBYU0sR0FBRztJQUNoQixPQUFPRDtBQUNUO0FBQ0EsSUFBSUUsVUFBVSxTQUFVSixFQUFFO0lBQ3hCLE9BQU9BLEdBQUdILFlBQVksQ0FBQ0EsYUFBYVEsTUFBTSxHQUFHLEVBQUU7QUFDakQ7QUFFNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydG5leHQvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL3NlcnZpY2VTY29wZS5qcz83ZGRlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBNYWludGFpbnMgYSBzdGFjayBvZiB0aGUgY3VycmVudCBzZXJ2aWNlIGluIHNjb3BlLlxyXG4gKiBUaGlzIGlzIHVzZWQgdG8gcHJvdmlkZSB0aGUgY29ycmVjdCBzZXJ2aWNlIHRvIHNwYXduKCkuXHJcbiAqL1xudmFyIHNlcnZpY2VTdGFjayA9IFtdO1xudmFyIHByb3ZpZGUgPSBmdW5jdGlvbiAoc2VydmljZSwgZm4pIHtcbiAgc2VydmljZVN0YWNrLnB1c2goc2VydmljZSk7XG4gIHZhciByZXN1bHQgPSBmbihzZXJ2aWNlKTtcbiAgc2VydmljZVN0YWNrLnBvcCgpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBjb25zdW1lID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBmbihzZXJ2aWNlU3RhY2tbc2VydmljZVN0YWNrLmxlbmd0aCAtIDFdKTtcbn07XG5cbmV4cG9ydCB7IGNvbnN1bWUsIHByb3ZpZGUgfTtcbiJdLCJuYW1lcyI6WyJzZXJ2aWNlU3RhY2siLCJwcm92aWRlIiwic2VydmljZSIsImZuIiwicHVzaCIsInJlc3VsdCIsInBvcCIsImNvbnN1bWUiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/serviceScope.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/stateUtils.js":
/*!**********************************************!*\
  !*** ./node_modules/xstate/es/stateUtils.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAdjList: () => (/* binding */ getAdjList),\n/* harmony export */   getAllChildren: () => (/* binding */ getAllChildren),\n/* harmony export */   getAllStateNodes: () => (/* binding */ getAllStateNodes),\n/* harmony export */   getChildren: () => (/* binding */ getChildren),\n/* harmony export */   getConfiguration: () => (/* binding */ getConfiguration),\n/* harmony export */   getMeta: () => (/* binding */ getMeta),\n/* harmony export */   getTagsFromConfiguration: () => (/* binding */ getTagsFromConfiguration),\n/* harmony export */   getValue: () => (/* binding */ getValue),\n/* harmony export */   has: () => (/* binding */ has),\n/* harmony export */   isInFinalState: () => (/* binding */ isInFinalState),\n/* harmony export */   isLeafNode: () => (/* binding */ isLeafNode),\n/* harmony export */   nextEvents: () => (/* binding */ nextEvents)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n\n\nvar isLeafNode = function(stateNode) {\n    return stateNode.type === \"atomic\" || stateNode.type === \"final\";\n};\nfunction getAllChildren(stateNode) {\n    return Object.keys(stateNode.states).map(function(key) {\n        return stateNode.states[key];\n    });\n}\nfunction getChildren(stateNode) {\n    return getAllChildren(stateNode).filter(function(sn) {\n        return sn.type !== \"history\";\n    });\n}\nfunction getAllStateNodes(stateNode) {\n    var stateNodes = [\n        stateNode\n    ];\n    if (isLeafNode(stateNode)) {\n        return stateNodes;\n    }\n    return stateNodes.concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(getChildren(stateNode).map(getAllStateNodes)));\n}\nfunction getConfiguration(prevStateNodes, stateNodes) {\n    var e_1, _a, e_2, _b, e_3, _c, e_4, _d;\n    var prevConfiguration = new Set(prevStateNodes);\n    var prevAdjList = getAdjList(prevConfiguration);\n    var configuration = new Set(stateNodes);\n    try {\n        // add all ancestors\n        for(var configuration_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration), configuration_1_1 = configuration_1.next(); !configuration_1_1.done; configuration_1_1 = configuration_1.next()){\n            var s = configuration_1_1.value;\n            var m = s.parent;\n            while(m && !configuration.has(m)){\n                configuration.add(m);\n                m = m.parent;\n            }\n        }\n    } catch (e_1_1) {\n        e_1 = {\n            error: e_1_1\n        };\n    } finally{\n        try {\n            if (configuration_1_1 && !configuration_1_1.done && (_a = configuration_1.return)) _a.call(configuration_1);\n        } finally{\n            if (e_1) throw e_1.error;\n        }\n    }\n    var adjList = getAdjList(configuration);\n    try {\n        // add descendants\n        for(var configuration_2 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration), configuration_2_1 = configuration_2.next(); !configuration_2_1.done; configuration_2_1 = configuration_2.next()){\n            var s = configuration_2_1.value; // if previously active, add existing child nodes\n            if (s.type === \"compound\" && (!adjList.get(s) || !adjList.get(s).length)) {\n                if (prevAdjList.get(s)) {\n                    prevAdjList.get(s).forEach(function(sn) {\n                        return configuration.add(sn);\n                    });\n                } else {\n                    s.initialStateNodes.forEach(function(sn) {\n                        return configuration.add(sn);\n                    });\n                }\n            } else {\n                if (s.type === \"parallel\") {\n                    try {\n                        for(var _e = (e_3 = void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(getChildren(s))), _f = _e.next(); !_f.done; _f = _e.next()){\n                            var child = _f.value;\n                            if (!configuration.has(child)) {\n                                configuration.add(child);\n                                if (prevAdjList.get(child)) {\n                                    prevAdjList.get(child).forEach(function(sn) {\n                                        return configuration.add(sn);\n                                    });\n                                } else {\n                                    child.initialStateNodes.forEach(function(sn) {\n                                        return configuration.add(sn);\n                                    });\n                                }\n                            }\n                        }\n                    } catch (e_3_1) {\n                        e_3 = {\n                            error: e_3_1\n                        };\n                    } finally{\n                        try {\n                            if (_f && !_f.done && (_c = _e.return)) _c.call(_e);\n                        } finally{\n                            if (e_3) throw e_3.error;\n                        }\n                    }\n                }\n            }\n        }\n    } catch (e_2_1) {\n        e_2 = {\n            error: e_2_1\n        };\n    } finally{\n        try {\n            if (configuration_2_1 && !configuration_2_1.done && (_b = configuration_2.return)) _b.call(configuration_2);\n        } finally{\n            if (e_2) throw e_2.error;\n        }\n    }\n    try {\n        // add all ancestors\n        for(var configuration_3 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration), configuration_3_1 = configuration_3.next(); !configuration_3_1.done; configuration_3_1 = configuration_3.next()){\n            var s = configuration_3_1.value;\n            var m = s.parent;\n            while(m && !configuration.has(m)){\n                configuration.add(m);\n                m = m.parent;\n            }\n        }\n    } catch (e_4_1) {\n        e_4 = {\n            error: e_4_1\n        };\n    } finally{\n        try {\n            if (configuration_3_1 && !configuration_3_1.done && (_d = configuration_3.return)) _d.call(configuration_3);\n        } finally{\n            if (e_4) throw e_4.error;\n        }\n    }\n    return configuration;\n}\nfunction getValueFromAdj(baseNode, adjList) {\n    var childStateNodes = adjList.get(baseNode);\n    if (!childStateNodes) {\n        return {}; // todo: fix?\n    }\n    if (baseNode.type === \"compound\") {\n        var childStateNode = childStateNodes[0];\n        if (childStateNode) {\n            if (isLeafNode(childStateNode)) {\n                return childStateNode.key;\n            }\n        } else {\n            return {};\n        }\n    }\n    var stateValue = {};\n    childStateNodes.forEach(function(csn) {\n        stateValue[csn.key] = getValueFromAdj(csn, adjList);\n    });\n    return stateValue;\n}\nfunction getAdjList(configuration) {\n    var e_5, _a;\n    var adjList = new Map();\n    try {\n        for(var configuration_4 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration), configuration_4_1 = configuration_4.next(); !configuration_4_1.done; configuration_4_1 = configuration_4.next()){\n            var s = configuration_4_1.value;\n            if (!adjList.has(s)) {\n                adjList.set(s, []);\n            }\n            if (s.parent) {\n                if (!adjList.has(s.parent)) {\n                    adjList.set(s.parent, []);\n                }\n                adjList.get(s.parent).push(s);\n            }\n        }\n    } catch (e_5_1) {\n        e_5 = {\n            error: e_5_1\n        };\n    } finally{\n        try {\n            if (configuration_4_1 && !configuration_4_1.done && (_a = configuration_4.return)) _a.call(configuration_4);\n        } finally{\n            if (e_5) throw e_5.error;\n        }\n    }\n    return adjList;\n}\nfunction getValue(rootNode, configuration) {\n    var config = getConfiguration([\n        rootNode\n    ], configuration);\n    return getValueFromAdj(rootNode, getAdjList(config));\n}\nfunction has(iterable, item) {\n    if (Array.isArray(iterable)) {\n        return iterable.some(function(member) {\n            return member === item;\n        });\n    }\n    if (iterable instanceof Set) {\n        return iterable.has(item);\n    }\n    return false; // TODO: fix\n}\nfunction nextEvents(configuration) {\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(new Set((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(configuration.map(function(sn) {\n        return sn.ownEvents;\n    })), false)))), false);\n}\nfunction isInFinalState(configuration, stateNode) {\n    if (stateNode.type === \"compound\") {\n        return getChildren(stateNode).some(function(s) {\n            return s.type === \"final\" && has(configuration, s);\n        });\n    }\n    if (stateNode.type === \"parallel\") {\n        return getChildren(stateNode).every(function(sn) {\n            return isInFinalState(configuration, sn);\n        });\n    }\n    return false;\n}\nfunction getMeta(configuration) {\n    if (configuration === void 0) {\n        configuration = [];\n    }\n    return configuration.reduce(function(acc, stateNode) {\n        if (stateNode.meta !== undefined) {\n            acc[stateNode.id] = stateNode.meta;\n        }\n        return acc;\n    }, {});\n}\nfunction getTagsFromConfiguration(configuration) {\n    return new Set((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(configuration.map(function(sn) {\n        return sn.tags;\n    })));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/stateUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/types.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/types.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionTypes: () => (/* binding */ ActionTypes),\n/* harmony export */   SpecialTargets: () => (/* binding */ SpecialTargets)\n/* harmony export */ });\nvar ActionTypes;\n(function(ActionTypes) {\n    ActionTypes[\"Start\"] = \"xstate.start\";\n    ActionTypes[\"Stop\"] = \"xstate.stop\";\n    ActionTypes[\"Raise\"] = \"xstate.raise\";\n    ActionTypes[\"Send\"] = \"xstate.send\";\n    ActionTypes[\"Cancel\"] = \"xstate.cancel\";\n    ActionTypes[\"NullEvent\"] = \"\";\n    ActionTypes[\"Assign\"] = \"xstate.assign\";\n    ActionTypes[\"After\"] = \"xstate.after\";\n    ActionTypes[\"DoneState\"] = \"done.state\";\n    ActionTypes[\"DoneInvoke\"] = \"done.invoke\";\n    ActionTypes[\"Log\"] = \"xstate.log\";\n    ActionTypes[\"Init\"] = \"xstate.init\";\n    ActionTypes[\"Invoke\"] = \"xstate.invoke\";\n    ActionTypes[\"ErrorExecution\"] = \"error.execution\";\n    ActionTypes[\"ErrorCommunication\"] = \"error.communication\";\n    ActionTypes[\"ErrorPlatform\"] = \"error.platform\";\n    ActionTypes[\"ErrorCustom\"] = \"xstate.error\";\n    ActionTypes[\"Update\"] = \"xstate.update\";\n    ActionTypes[\"Pure\"] = \"xstate.pure\";\n    ActionTypes[\"Choose\"] = \"xstate.choose\";\n})(ActionTypes || (ActionTypes = {}));\nvar SpecialTargets;\n(function(SpecialTargets) {\n    SpecialTargets[\"Parent\"] = \"#_parent\";\n    SpecialTargets[\"Internal\"] = \"#_internal\";\n})(SpecialTargets || (SpecialTargets = {}));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBSUE7QUFFSCxVQUFVQSxXQUFXO0lBQ3BCQSxXQUFXLENBQUMsUUFBUSxHQUFHO0lBQ3ZCQSxXQUFXLENBQUMsT0FBTyxHQUFHO0lBQ3RCQSxXQUFXLENBQUMsUUFBUSxHQUFHO0lBQ3ZCQSxXQUFXLENBQUMsT0FBTyxHQUFHO0lBQ3RCQSxXQUFXLENBQUMsU0FBUyxHQUFHO0lBQ3hCQSxXQUFXLENBQUMsWUFBWSxHQUFHO0lBQzNCQSxXQUFXLENBQUMsU0FBUyxHQUFHO0lBQ3hCQSxXQUFXLENBQUMsUUFBUSxHQUFHO0lBQ3ZCQSxXQUFXLENBQUMsWUFBWSxHQUFHO0lBQzNCQSxXQUFXLENBQUMsYUFBYSxHQUFHO0lBQzVCQSxXQUFXLENBQUMsTUFBTSxHQUFHO0lBQ3JCQSxXQUFXLENBQUMsT0FBTyxHQUFHO0lBQ3RCQSxXQUFXLENBQUMsU0FBUyxHQUFHO0lBQ3hCQSxXQUFXLENBQUMsaUJBQWlCLEdBQUc7SUFDaENBLFdBQVcsQ0FBQyxxQkFBcUIsR0FBRztJQUNwQ0EsV0FBVyxDQUFDLGdCQUFnQixHQUFHO0lBQy9CQSxXQUFXLENBQUMsY0FBYyxHQUFHO0lBQzdCQSxXQUFXLENBQUMsU0FBUyxHQUFHO0lBQ3hCQSxXQUFXLENBQUMsT0FBTyxHQUFHO0lBQ3RCQSxXQUFXLENBQUMsU0FBUyxHQUFHO0FBQzFCLEdBQUdBLGVBQWdCQSxDQUFBQSxjQUFjLENBQUM7QUFFbEMsSUFBSUM7QUFFSCxVQUFVQSxjQUFjO0lBQ3ZCQSxjQUFjLENBQUMsU0FBUyxHQUFHO0lBQzNCQSxjQUFjLENBQUMsV0FBVyxHQUFHO0FBQy9CLEdBQUdBLGtCQUFtQkEsQ0FBQUEsaUJBQWlCLENBQUM7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0bmV4dC8uL25vZGVfbW9kdWxlcy94c3RhdGUvZXMvdHlwZXMuanM/NTEwNyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQWN0aW9uVHlwZXM7XG5cbihmdW5jdGlvbiAoQWN0aW9uVHlwZXMpIHtcbiAgQWN0aW9uVHlwZXNbXCJTdGFydFwiXSA9IFwieHN0YXRlLnN0YXJ0XCI7XG4gIEFjdGlvblR5cGVzW1wiU3RvcFwiXSA9IFwieHN0YXRlLnN0b3BcIjtcbiAgQWN0aW9uVHlwZXNbXCJSYWlzZVwiXSA9IFwieHN0YXRlLnJhaXNlXCI7XG4gIEFjdGlvblR5cGVzW1wiU2VuZFwiXSA9IFwieHN0YXRlLnNlbmRcIjtcbiAgQWN0aW9uVHlwZXNbXCJDYW5jZWxcIl0gPSBcInhzdGF0ZS5jYW5jZWxcIjtcbiAgQWN0aW9uVHlwZXNbXCJOdWxsRXZlbnRcIl0gPSBcIlwiO1xuICBBY3Rpb25UeXBlc1tcIkFzc2lnblwiXSA9IFwieHN0YXRlLmFzc2lnblwiO1xuICBBY3Rpb25UeXBlc1tcIkFmdGVyXCJdID0gXCJ4c3RhdGUuYWZ0ZXJcIjtcbiAgQWN0aW9uVHlwZXNbXCJEb25lU3RhdGVcIl0gPSBcImRvbmUuc3RhdGVcIjtcbiAgQWN0aW9uVHlwZXNbXCJEb25lSW52b2tlXCJdID0gXCJkb25lLmludm9rZVwiO1xuICBBY3Rpb25UeXBlc1tcIkxvZ1wiXSA9IFwieHN0YXRlLmxvZ1wiO1xuICBBY3Rpb25UeXBlc1tcIkluaXRcIl0gPSBcInhzdGF0ZS5pbml0XCI7XG4gIEFjdGlvblR5cGVzW1wiSW52b2tlXCJdID0gXCJ4c3RhdGUuaW52b2tlXCI7XG4gIEFjdGlvblR5cGVzW1wiRXJyb3JFeGVjdXRpb25cIl0gPSBcImVycm9yLmV4ZWN1dGlvblwiO1xuICBBY3Rpb25UeXBlc1tcIkVycm9yQ29tbXVuaWNhdGlvblwiXSA9IFwiZXJyb3IuY29tbXVuaWNhdGlvblwiO1xuICBBY3Rpb25UeXBlc1tcIkVycm9yUGxhdGZvcm1cIl0gPSBcImVycm9yLnBsYXRmb3JtXCI7XG4gIEFjdGlvblR5cGVzW1wiRXJyb3JDdXN0b21cIl0gPSBcInhzdGF0ZS5lcnJvclwiO1xuICBBY3Rpb25UeXBlc1tcIlVwZGF0ZVwiXSA9IFwieHN0YXRlLnVwZGF0ZVwiO1xuICBBY3Rpb25UeXBlc1tcIlB1cmVcIl0gPSBcInhzdGF0ZS5wdXJlXCI7XG4gIEFjdGlvblR5cGVzW1wiQ2hvb3NlXCJdID0gXCJ4c3RhdGUuY2hvb3NlXCI7XG59KShBY3Rpb25UeXBlcyB8fCAoQWN0aW9uVHlwZXMgPSB7fSkpO1xuXG52YXIgU3BlY2lhbFRhcmdldHM7XG5cbihmdW5jdGlvbiAoU3BlY2lhbFRhcmdldHMpIHtcbiAgU3BlY2lhbFRhcmdldHNbXCJQYXJlbnRcIl0gPSBcIiNfcGFyZW50XCI7XG4gIFNwZWNpYWxUYXJnZXRzW1wiSW50ZXJuYWxcIl0gPSBcIiNfaW50ZXJuYWxcIjtcbn0pKFNwZWNpYWxUYXJnZXRzIHx8IChTcGVjaWFsVGFyZ2V0cyA9IHt9KSk7XG5cbmV4cG9ydCB7IEFjdGlvblR5cGVzLCBTcGVjaWFsVGFyZ2V0cyB9O1xuIl0sIm5hbWVzIjpbIkFjdGlvblR5cGVzIiwiU3BlY2lhbFRhcmdldHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/utils.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createInvokeId: () => (/* binding */ createInvokeId),\n/* harmony export */   evaluateGuard: () => (/* binding */ evaluateGuard),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   getActionType: () => (/* binding */ getActionType),\n/* harmony export */   getEventType: () => (/* binding */ getEventType),\n/* harmony export */   interopSymbols: () => (/* binding */ interopSymbols),\n/* harmony export */   isActor: () => (/* binding */ isActor),\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isBehavior: () => (/* binding */ isBehavior),\n/* harmony export */   isBuiltInEvent: () => (/* binding */ isBuiltInEvent),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isMachine: () => (/* binding */ isMachine),\n/* harmony export */   isObservable: () => (/* binding */ isObservable),\n/* harmony export */   isPromiseLike: () => (/* binding */ isPromiseLike),\n/* harmony export */   isRaisableAction: () => (/* binding */ isRaisableAction),\n/* harmony export */   isStateLike: () => (/* binding */ isStateLike),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   keys: () => (/* binding */ keys),\n/* harmony export */   mapContext: () => (/* binding */ mapContext),\n/* harmony export */   mapFilterValues: () => (/* binding */ mapFilterValues),\n/* harmony export */   mapValues: () => (/* binding */ mapValues),\n/* harmony export */   matchesState: () => (/* binding */ matchesState),\n/* harmony export */   nestedPath: () => (/* binding */ nestedPath),\n/* harmony export */   normalizeTarget: () => (/* binding */ normalizeTarget),\n/* harmony export */   partition: () => (/* binding */ partition),\n/* harmony export */   path: () => (/* binding */ path),\n/* harmony export */   pathToStateValue: () => (/* binding */ pathToStateValue),\n/* harmony export */   pathsToStateValue: () => (/* binding */ pathsToStateValue),\n/* harmony export */   reportUnhandledExceptionOnInvocation: () => (/* binding */ reportUnhandledExceptionOnInvocation),\n/* harmony export */   symbolObservable: () => (/* binding */ symbolObservable),\n/* harmony export */   toArray: () => (/* binding */ toArray),\n/* harmony export */   toArrayStrict: () => (/* binding */ toArrayStrict),\n/* harmony export */   toEventObject: () => (/* binding */ toEventObject),\n/* harmony export */   toGuard: () => (/* binding */ toGuard),\n/* harmony export */   toInvokeSource: () => (/* binding */ toInvokeSource),\n/* harmony export */   toObserver: () => (/* binding */ toObserver),\n/* harmony export */   toSCXMLEvent: () => (/* binding */ toSCXMLEvent),\n/* harmony export */   toStatePath: () => (/* binding */ toStatePath),\n/* harmony export */   toStatePaths: () => (/* binding */ toStatePaths),\n/* harmony export */   toStateValue: () => (/* binding */ toStateValue),\n/* harmony export */   toTransitionConfigArray: () => (/* binding */ toTransitionConfigArray),\n/* harmony export */   uniqueId: () => (/* binding */ uniqueId),\n/* harmony export */   updateContext: () => (/* binding */ updateContext),\n/* harmony export */   updateHistoryStates: () => (/* binding */ updateHistoryStates),\n/* harmony export */   updateHistoryValue: () => (/* binding */ updateHistoryValue),\n/* harmony export */   warn: () => (/* binding */ warn)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/xstate/es/types.js\");\n/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./actionTypes.js */ \"(ssr)/./node_modules/xstate/es/actionTypes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/xstate/es/constants.js\");\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./environment.js */ \"(ssr)/./node_modules/xstate/es/environment.js\");\n\n\n\n\n\nvar _a;\nfunction keys(value) {\n    return Object.keys(value);\n}\nfunction matchesState(parentStateId, childStateId, delimiter) {\n    if (delimiter === void 0) {\n        delimiter = _constants_js__WEBPACK_IMPORTED_MODULE_0__.STATE_DELIMITER;\n    }\n    var parentStateValue = toStateValue(parentStateId, delimiter);\n    var childStateValue = toStateValue(childStateId, delimiter);\n    if (isString(childStateValue)) {\n        if (isString(parentStateValue)) {\n            return childStateValue === parentStateValue;\n        } // Parent more specific than child\n        return false;\n    }\n    if (isString(parentStateValue)) {\n        return parentStateValue in childStateValue;\n    }\n    return Object.keys(parentStateValue).every(function(key) {\n        if (!(key in childStateValue)) {\n            return false;\n        }\n        return matchesState(parentStateValue[key], childStateValue[key]);\n    });\n}\nfunction getEventType(event) {\n    try {\n        return isString(event) || typeof event === \"number\" ? \"\".concat(event) : event.type;\n    } catch (e) {\n        throw new Error(\"Events must be strings or objects with a string event.type property.\");\n    }\n}\nfunction getActionType(action) {\n    try {\n        return isString(action) || typeof action === \"number\" ? \"\".concat(action) : isFunction(action) ? action.name : action.type;\n    } catch (e) {\n        throw new Error(\"Actions must be strings or objects with a string action.type property.\");\n    }\n}\nfunction toStatePath(stateId, delimiter) {\n    try {\n        if (isArray(stateId)) {\n            return stateId;\n        }\n        return stateId.toString().split(delimiter);\n    } catch (e) {\n        throw new Error(\"'\".concat(stateId, \"' is not a valid state path.\"));\n    }\n}\nfunction isStateLike(state) {\n    return typeof state === \"object\" && \"value\" in state && \"context\" in state && \"event\" in state && \"_event\" in state;\n}\nfunction toStateValue(stateValue, delimiter) {\n    if (isStateLike(stateValue)) {\n        return stateValue.value;\n    }\n    if (isArray(stateValue)) {\n        return pathToStateValue(stateValue);\n    }\n    if (typeof stateValue !== \"string\") {\n        return stateValue;\n    }\n    var statePath = toStatePath(stateValue, delimiter);\n    return pathToStateValue(statePath);\n}\nfunction pathToStateValue(statePath) {\n    if (statePath.length === 1) {\n        return statePath[0];\n    }\n    var value = {};\n    var marker = value;\n    for(var i = 0; i < statePath.length - 1; i++){\n        if (i === statePath.length - 2) {\n            marker[statePath[i]] = statePath[i + 1];\n        } else {\n            marker[statePath[i]] = {};\n            marker = marker[statePath[i]];\n        }\n    }\n    return value;\n}\nfunction mapValues(collection, iteratee) {\n    var result = {};\n    var collectionKeys = Object.keys(collection);\n    for(var i = 0; i < collectionKeys.length; i++){\n        var key = collectionKeys[i];\n        result[key] = iteratee(collection[key], key, collection, i);\n    }\n    return result;\n}\nfunction mapFilterValues(collection, iteratee, predicate) {\n    var e_1, _a;\n    var result = {};\n    try {\n        for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(Object.keys(collection)), _c = _b.next(); !_c.done; _c = _b.next()){\n            var key = _c.value;\n            var item = collection[key];\n            if (!predicate(item)) {\n                continue;\n            }\n            result[key] = iteratee(item, key, collection);\n        }\n    } catch (e_1_1) {\n        e_1 = {\n            error: e_1_1\n        };\n    } finally{\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally{\n            if (e_1) throw e_1.error;\n        }\n    }\n    return result;\n}\n/**\r\n * Retrieves a value at the given path.\r\n * @param props The deep path to the prop of the desired value\r\n */ var path = function(props) {\n    return function(object) {\n        var e_2, _a;\n        var result = object;\n        try {\n            for(var props_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()){\n                var prop = props_1_1.value;\n                result = result[prop];\n            }\n        } catch (e_2_1) {\n            e_2 = {\n                error: e_2_1\n            };\n        } finally{\n            try {\n                if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);\n            } finally{\n                if (e_2) throw e_2.error;\n            }\n        }\n        return result;\n    };\n};\n/**\r\n * Retrieves a value at the given path via the nested accessor prop.\r\n * @param props The deep path to the prop of the desired value\r\n */ function nestedPath(props, accessorProp) {\n    return function(object) {\n        var e_3, _a;\n        var result = object;\n        try {\n            for(var props_2 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(props), props_2_1 = props_2.next(); !props_2_1.done; props_2_1 = props_2.next()){\n                var prop = props_2_1.value;\n                result = result[accessorProp][prop];\n            }\n        } catch (e_3_1) {\n            e_3 = {\n                error: e_3_1\n            };\n        } finally{\n            try {\n                if (props_2_1 && !props_2_1.done && (_a = props_2.return)) _a.call(props_2);\n            } finally{\n                if (e_3) throw e_3.error;\n            }\n        }\n        return result;\n    };\n}\nfunction toStatePaths(stateValue) {\n    if (!stateValue) {\n        return [\n            []\n        ];\n    }\n    if (isString(stateValue)) {\n        return [\n            [\n                stateValue\n            ]\n        ];\n    }\n    var result = flatten(Object.keys(stateValue).map(function(key) {\n        var subStateValue = stateValue[key];\n        if (typeof subStateValue !== \"string\" && (!subStateValue || !Object.keys(subStateValue).length)) {\n            return [\n                [\n                    key\n                ]\n            ];\n        }\n        return toStatePaths(stateValue[key]).map(function(subPath) {\n            return [\n                key\n            ].concat(subPath);\n        });\n    }));\n    return result;\n}\nfunction pathsToStateValue(paths) {\n    var e_4, _a;\n    var result = {};\n    if (paths && paths.length === 1 && paths[0].length === 1) {\n        return paths[0][0];\n    }\n    try {\n        for(var paths_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(paths), paths_1_1 = paths_1.next(); !paths_1_1.done; paths_1_1 = paths_1.next()){\n            var currentPath = paths_1_1.value;\n            var marker = result; // tslint:disable-next-line:prefer-for-of\n            for(var i = 0; i < currentPath.length; i++){\n                var subPath = currentPath[i];\n                if (i === currentPath.length - 2) {\n                    marker[subPath] = currentPath[i + 1];\n                    break;\n                }\n                marker[subPath] = marker[subPath] || {};\n                marker = marker[subPath];\n            }\n        }\n    } catch (e_4_1) {\n        e_4 = {\n            error: e_4_1\n        };\n    } finally{\n        try {\n            if (paths_1_1 && !paths_1_1.done && (_a = paths_1.return)) _a.call(paths_1);\n        } finally{\n            if (e_4) throw e_4.error;\n        }\n    }\n    return result;\n}\nfunction flatten(array) {\n    var _a;\n    return (_a = []).concat.apply(_a, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(array), false));\n}\nfunction toArrayStrict(value) {\n    if (isArray(value)) {\n        return value;\n    }\n    return [\n        value\n    ];\n}\nfunction toArray(value) {\n    if (value === undefined) {\n        return [];\n    }\n    return toArrayStrict(value);\n}\nfunction mapContext(mapper, context, _event) {\n    var e_5, _a;\n    if (isFunction(mapper)) {\n        return mapper(context, _event.data);\n    }\n    var result = {};\n    try {\n        for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(Object.keys(mapper)), _c = _b.next(); !_c.done; _c = _b.next()){\n            var key = _c.value;\n            var subMapper = mapper[key];\n            if (isFunction(subMapper)) {\n                result[key] = subMapper(context, _event.data);\n            } else {\n                result[key] = subMapper;\n            }\n        }\n    } catch (e_5_1) {\n        e_5 = {\n            error: e_5_1\n        };\n    } finally{\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally{\n            if (e_5) throw e_5.error;\n        }\n    }\n    return result;\n}\nfunction isBuiltInEvent(eventType) {\n    return /^(done|error)\\./.test(eventType);\n}\nfunction isPromiseLike(value) {\n    if (value instanceof Promise) {\n        return true;\n    } // Check if shape matches the Promise/A+ specification for a \"thenable\".\n    if (value !== null && (isFunction(value) || typeof value === \"object\") && isFunction(value.then)) {\n        return true;\n    }\n    return false;\n}\nfunction isBehavior(value) {\n    return value !== null && typeof value === \"object\" && \"transition\" in value && typeof value.transition === \"function\";\n}\nfunction partition(items, predicate) {\n    var e_6, _a;\n    var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)([\n        [],\n        []\n    ], 2), truthy = _b[0], falsy = _b[1];\n    try {\n        for(var items_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()){\n            var item = items_1_1.value;\n            if (predicate(item)) {\n                truthy.push(item);\n            } else {\n                falsy.push(item);\n            }\n        }\n    } catch (e_6_1) {\n        e_6 = {\n            error: e_6_1\n        };\n    } finally{\n        try {\n            if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);\n        } finally{\n            if (e_6) throw e_6.error;\n        }\n    }\n    return [\n        truthy,\n        falsy\n    ];\n}\nfunction updateHistoryStates(hist, stateValue) {\n    return mapValues(hist.states, function(subHist, key) {\n        if (!subHist) {\n            return undefined;\n        }\n        var subStateValue = (isString(stateValue) ? undefined : stateValue[key]) || (subHist ? subHist.current : undefined);\n        if (!subStateValue) {\n            return undefined;\n        }\n        return {\n            current: subStateValue,\n            states: updateHistoryStates(subHist, subStateValue)\n        };\n    });\n}\nfunction updateHistoryValue(hist, stateValue) {\n    return {\n        current: stateValue,\n        states: updateHistoryStates(hist, stateValue)\n    };\n}\nfunction updateContext(context, _event, assignActions, state) {\n    if (!_environment_js__WEBPACK_IMPORTED_MODULE_2__.IS_PRODUCTION) {\n        warn(!!context, \"Attempting to update undefined context\");\n    }\n    var updatedContext = context ? assignActions.reduce(function(acc, assignAction) {\n        var e_7, _a;\n        var assignment = assignAction.assignment;\n        var meta = {\n            state: state,\n            action: assignAction,\n            _event: _event\n        };\n        var partialUpdate = {};\n        if (isFunction(assignment)) {\n            partialUpdate = assignment(acc, _event.data, meta);\n        } else {\n            try {\n                for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(Object.keys(assignment)), _c = _b.next(); !_c.done; _c = _b.next()){\n                    var key = _c.value;\n                    var propAssignment = assignment[key];\n                    partialUpdate[key] = isFunction(propAssignment) ? propAssignment(acc, _event.data, meta) : propAssignment;\n                }\n            } catch (e_7_1) {\n                e_7 = {\n                    error: e_7_1\n                };\n            } finally{\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                } finally{\n                    if (e_7) throw e_7.error;\n                }\n            }\n        }\n        return Object.assign({}, acc, partialUpdate);\n    }, context) : context;\n    return updatedContext;\n} // tslint:disable-next-line:no-empty\nvar warn = function() {};\nif (!_environment_js__WEBPACK_IMPORTED_MODULE_2__.IS_PRODUCTION) {\n    warn = function(condition, message) {\n        var error = condition instanceof Error ? condition : undefined;\n        if (!error && condition) {\n            return;\n        }\n        if (console !== undefined) {\n            var args = [\n                \"Warning: \".concat(message)\n            ];\n            if (error) {\n                args.push(error);\n            } // tslint:disable-next-line:no-console\n            console.warn.apply(console, args);\n        }\n    };\n}\nfunction isArray(value) {\n    return Array.isArray(value);\n} // tslint:disable-next-line:ban-types\nfunction isFunction(value) {\n    return typeof value === \"function\";\n}\nfunction isString(value) {\n    return typeof value === \"string\";\n}\nfunction toGuard(condition, guardMap) {\n    if (!condition) {\n        return undefined;\n    }\n    if (isString(condition)) {\n        return {\n            type: _constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_GUARD_TYPE,\n            name: condition,\n            predicate: guardMap ? guardMap[condition] : undefined\n        };\n    }\n    if (isFunction(condition)) {\n        return {\n            type: _constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_GUARD_TYPE,\n            name: condition.name,\n            predicate: condition\n        };\n    }\n    return condition;\n}\nfunction isObservable(value) {\n    try {\n        return \"subscribe\" in value && isFunction(value.subscribe);\n    } catch (e) {\n        return false;\n    }\n}\nvar symbolObservable = /*#__PURE__*/ function() {\n    return typeof Symbol === \"function\" && Symbol.observable || \"@@observable\";\n}(); // TODO: to be removed in v5, left it out just to minimize the scope of the change and maintain compatibility with older versions of integration paackages\nvar interopSymbols = (_a = {}, _a[symbolObservable] = function() {\n    return this;\n}, _a[Symbol.observable] = function() {\n    return this;\n}, _a);\nfunction isMachine(value) {\n    return !!value && \"__xstatenode\" in value;\n}\nfunction isActor(value) {\n    return !!value && typeof value.send === \"function\";\n}\nvar uniqueId = /*#__PURE__*/ function() {\n    var currentId = 0;\n    return function() {\n        currentId++;\n        return currentId.toString(16);\n    };\n}();\nfunction toEventObject(event, payload // id?: TEvent['type']\n) {\n    if (isString(event) || typeof event === \"number\") {\n        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n            type: event\n        }, payload);\n    }\n    return event;\n}\nfunction toSCXMLEvent(event, scxmlEvent) {\n    if (!isString(event) && \"$$type\" in event && event.$$type === \"scxml\") {\n        return event;\n    }\n    var eventObject = toEventObject(event);\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n        name: eventObject.type,\n        data: eventObject,\n        $$type: \"scxml\",\n        type: \"external\"\n    }, scxmlEvent);\n}\nfunction toTransitionConfigArray(event, configLike) {\n    var transitions = toArrayStrict(configLike).map(function(transitionLike) {\n        if (typeof transitionLike === \"undefined\" || typeof transitionLike === \"string\" || isMachine(transitionLike)) {\n            return {\n                target: transitionLike,\n                event: event\n            };\n        }\n        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, transitionLike), {\n            event: event\n        });\n    });\n    return transitions;\n}\nfunction normalizeTarget(target) {\n    if (target === undefined || target === _constants_js__WEBPACK_IMPORTED_MODULE_0__.TARGETLESS_KEY) {\n        return undefined;\n    }\n    return toArray(target);\n}\nfunction reportUnhandledExceptionOnInvocation(originalError, currentError, id) {\n    if (!_environment_js__WEBPACK_IMPORTED_MODULE_2__.IS_PRODUCTION) {\n        var originalStackTrace = originalError.stack ? \" Stacktrace was '\".concat(originalError.stack, \"'\") : \"\";\n        if (originalError === currentError) {\n            // tslint:disable-next-line:no-console\n            console.error(\"Missing onError handler for invocation '\".concat(id, \"', error was '\").concat(originalError, \"'.\").concat(originalStackTrace));\n        } else {\n            var stackTrace = currentError.stack ? \" Stacktrace was '\".concat(currentError.stack, \"'\") : \"\"; // tslint:disable-next-line:no-console\n            console.error(\"Missing onError handler and/or unhandled exception/promise rejection for invocation '\".concat(id, \"'. \") + \"Original error: '\".concat(originalError, \"'. \").concat(originalStackTrace, \" Current error is '\").concat(currentError, \"'.\").concat(stackTrace));\n        }\n    }\n}\nfunction evaluateGuard(machine, guard, context, _event, state) {\n    var guards = machine.options.guards;\n    var guardMeta = {\n        state: state,\n        cond: guard,\n        _event: _event\n    }; // TODO: do not hardcode!\n    if (guard.type === _constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_GUARD_TYPE) {\n        return ((guards === null || guards === void 0 ? void 0 : guards[guard.name]) || guard.predicate)(context, _event.data, guardMeta);\n    }\n    var condFn = guards === null || guards === void 0 ? void 0 : guards[guard.type];\n    if (!condFn) {\n        throw new Error(\"Guard '\".concat(guard.type, \"' is not implemented on machine '\").concat(machine.id, \"'.\"));\n    }\n    return condFn(context, _event.data, guardMeta);\n}\nfunction toInvokeSource(src) {\n    if (typeof src === \"string\") {\n        return {\n            type: src\n        };\n    }\n    return src;\n}\nfunction toObserver(nextHandler, errorHandler, completionHandler) {\n    var noop = function() {};\n    var isObserver = typeof nextHandler === \"object\";\n    var self = isObserver ? nextHandler : null;\n    return {\n        next: ((isObserver ? nextHandler.next : nextHandler) || noop).bind(self),\n        error: ((isObserver ? nextHandler.error : errorHandler) || noop).bind(self),\n        complete: ((isObserver ? nextHandler.complete : completionHandler) || noop).bind(self)\n    };\n}\nfunction createInvokeId(stateNodeId, index) {\n    return \"\".concat(stateNodeId, \":invocation[\").concat(index, \"]\");\n}\nfunction isRaisableAction(action) {\n    return (action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_3__.raise || action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_3__.send && action.to === _types_js__WEBPACK_IMPORTED_MODULE_4__.SpecialTargets.Internal) && typeof action.delay !== \"number\";\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/utils.js\n");

/***/ })

};
;